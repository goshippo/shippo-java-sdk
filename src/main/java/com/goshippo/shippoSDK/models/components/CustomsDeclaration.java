/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippoSDK.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippoSDK.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class CustomsDeclaration {

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aes_itn")
    private Optional<String> aesItn;

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     * Allowed values available &lt;a href="#tag/Customs-Declaration-B13A-Filing-Option"&gt;here&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("b13a_filing_option")
    private Optional<String> b13aFilingOption;

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("b13a_number")
    private Optional<String> b13aNumber;

    /**
     * Certificate reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificate")
    private Optional<String> certificate;

    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    @JsonProperty("certify")
    private boolean certify;

    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all 
     * information provided.
     */
    @JsonProperty("certify_signer")
    private String certifySigner;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commercial_invoice")
    private Optional<Boolean> commercialInvoice;

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contents_explanation")
    private Optional<String> contentsExplanation;

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disclaimer")
    private Optional<String> disclaimer;

    /**
     * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duties_payor")
    private Optional<? extends CustomsDeclarationDutiesPayor> dutiesPayor;

    /**
     * Additional exporter identification that may be required to ship in certain countries
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exporter_identification")
    private Optional<? extends CustomsExporterIdentification> exporterIdentification;

    /**
     * Exporter reference of an export shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exporter_reference")
    private Optional<String> exporterReference;

    /**
     * Importer reference of an import shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importer_reference")
    private Optional<String> importerReference;

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_vat_collected")
    private Optional<Boolean> isVatCollected;

    /**
     * Invoice reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice")
    private Optional<String> invoice;

    /**
     * License reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    private Optional<String> license;

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    /**
     * Additional notes to be included in the customs declaration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<String> notes;

    /**
     * Object ID of the Importer address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_importer")
    private Optional<String> addressImporter;

    /**
     * Type of goods of the shipment.  
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Contents-Type"&gt;here&lt;/a&gt;
     */
    @JsonProperty("contents_type")
    private String contentsType;

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-EELPFC"&gt;here&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eel_pfc")
    private Optional<String> eelPfc;

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Incoterm"&gt;here&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incoterm")
    private Optional<String> incoterm;

    /**
     * Additional invoiced charges to be shown on the Customs Declaration Commercial Invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiced_charges")
    private Optional<? extends CustomsInvoicedCharges> invoicedCharges;

    /**
     * Distinct Parcel content items as Customs Items object_ids.
     */
    @JsonProperty("items")
    private List<String> items;

    /**
     * Indicates how the carrier should proceed in case the shipment can't be delivered.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Non-Delivery-Option"&gt;here&lt;/a&gt;
     */
    @JsonProperty("non_delivery_option")
    private String nonDeliveryOption;

    /**
     * Date and time of object creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<String> objectId;

    /**
     * Username of the user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<String> objectOwner;

    /**
     * Indicates the validity of the enclosing object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_state")
    private Optional<? extends ObjectStateEnum> objectState;

    /**
     * Date and time of last object update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<OffsetDateTime> objectUpdated;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<Boolean> test;

    @JsonCreator
    public CustomsDeclaration(
            @JsonProperty("aes_itn") Optional<String> aesItn,
            @JsonProperty("b13a_filing_option") Optional<String> b13aFilingOption,
            @JsonProperty("b13a_number") Optional<String> b13aNumber,
            @JsonProperty("certificate") Optional<String> certificate,
            @JsonProperty("certify") boolean certify,
            @JsonProperty("certify_signer") String certifySigner,
            @JsonProperty("commercial_invoice") Optional<Boolean> commercialInvoice,
            @JsonProperty("contents_explanation") Optional<String> contentsExplanation,
            @JsonProperty("disclaimer") Optional<String> disclaimer,
            @JsonProperty("duties_payor") Optional<? extends CustomsDeclarationDutiesPayor> dutiesPayor,
            @JsonProperty("exporter_identification") Optional<? extends CustomsExporterIdentification> exporterIdentification,
            @JsonProperty("exporter_reference") Optional<String> exporterReference,
            @JsonProperty("importer_reference") Optional<String> importerReference,
            @JsonProperty("is_vat_collected") Optional<Boolean> isVatCollected,
            @JsonProperty("invoice") Optional<String> invoice,
            @JsonProperty("license") Optional<String> license,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("notes") Optional<String> notes,
            @JsonProperty("address_importer") Optional<String> addressImporter,
            @JsonProperty("contents_type") String contentsType,
            @JsonProperty("eel_pfc") Optional<String> eelPfc,
            @JsonProperty("incoterm") Optional<String> incoterm,
            @JsonProperty("invoiced_charges") Optional<? extends CustomsInvoicedCharges> invoicedCharges,
            @JsonProperty("items") List<String> items,
            @JsonProperty("non_delivery_option") String nonDeliveryOption,
            @JsonProperty("object_created") Optional<OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<String> objectId,
            @JsonProperty("object_owner") Optional<String> objectOwner,
            @JsonProperty("object_state") Optional<? extends ObjectStateEnum> objectState,
            @JsonProperty("object_updated") Optional<OffsetDateTime> objectUpdated,
            @JsonProperty("test") Optional<Boolean> test) {
        Utils.checkNotNull(aesItn, "aesItn");
        Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
        Utils.checkNotNull(b13aNumber, "b13aNumber");
        Utils.checkNotNull(certificate, "certificate");
        Utils.checkNotNull(certify, "certify");
        Utils.checkNotNull(certifySigner, "certifySigner");
        Utils.checkNotNull(commercialInvoice, "commercialInvoice");
        Utils.checkNotNull(contentsExplanation, "contentsExplanation");
        Utils.checkNotNull(disclaimer, "disclaimer");
        Utils.checkNotNull(dutiesPayor, "dutiesPayor");
        Utils.checkNotNull(exporterIdentification, "exporterIdentification");
        Utils.checkNotNull(exporterReference, "exporterReference");
        Utils.checkNotNull(importerReference, "importerReference");
        Utils.checkNotNull(isVatCollected, "isVatCollected");
        Utils.checkNotNull(invoice, "invoice");
        Utils.checkNotNull(license, "license");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(addressImporter, "addressImporter");
        Utils.checkNotNull(contentsType, "contentsType");
        Utils.checkNotNull(eelPfc, "eelPfc");
        Utils.checkNotNull(incoterm, "incoterm");
        Utils.checkNotNull(invoicedCharges, "invoicedCharges");
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(nonDeliveryOption, "nonDeliveryOption");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectState, "objectState");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(test, "test");
        this.aesItn = aesItn;
        this.b13aFilingOption = b13aFilingOption;
        this.b13aNumber = b13aNumber;
        this.certificate = certificate;
        this.certify = certify;
        this.certifySigner = certifySigner;
        this.commercialInvoice = commercialInvoice;
        this.contentsExplanation = contentsExplanation;
        this.disclaimer = disclaimer;
        this.dutiesPayor = dutiesPayor;
        this.exporterIdentification = exporterIdentification;
        this.exporterReference = exporterReference;
        this.importerReference = importerReference;
        this.isVatCollected = isVatCollected;
        this.invoice = invoice;
        this.license = license;
        this.metadata = metadata;
        this.notes = notes;
        this.addressImporter = addressImporter;
        this.contentsType = contentsType;
        this.eelPfc = eelPfc;
        this.incoterm = incoterm;
        this.invoicedCharges = invoicedCharges;
        this.items = items;
        this.nonDeliveryOption = nonDeliveryOption;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectState = objectState;
        this.objectUpdated = objectUpdated;
        this.test = test;
    }
    
    public CustomsDeclaration(
            boolean certify,
            String certifySigner,
            String contentsType,
            List<String> items,
            String nonDeliveryOption) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), certify, certifySigner, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), contentsType, Optional.empty(), Optional.empty(), Optional.empty(), items, nonDeliveryOption, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    @JsonIgnore
    public Optional<String> aesItn() {
        return aesItn;
    }

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     * Allowed values available &lt;a href="#tag/Customs-Declaration-B13A-Filing-Option"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public Optional<String> b13aFilingOption() {
        return b13aFilingOption;
    }

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    @JsonIgnore
    public Optional<String> b13aNumber() {
        return b13aNumber;
    }

    /**
     * Certificate reference of the shipment.
     */
    @JsonIgnore
    public Optional<String> certificate() {
        return certificate;
    }

    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    @JsonIgnore
    public boolean certify() {
        return certify;
    }

    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all 
     * information provided.
     */
    @JsonIgnore
    public String certifySigner() {
        return certifySigner;
    }

    @JsonIgnore
    public Optional<Boolean> commercialInvoice() {
        return commercialInvoice;
    }

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    @JsonIgnore
    public Optional<String> contentsExplanation() {
        return contentsExplanation;
    }

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    @JsonIgnore
    public Optional<String> disclaimer() {
        return disclaimer;
    }

    /**
     * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomsDeclarationDutiesPayor> dutiesPayor() {
        return (Optional<CustomsDeclarationDutiesPayor>) dutiesPayor;
    }

    /**
     * Additional exporter identification that may be required to ship in certain countries
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomsExporterIdentification> exporterIdentification() {
        return (Optional<CustomsExporterIdentification>) exporterIdentification;
    }

    /**
     * Exporter reference of an export shipment.
     */
    @JsonIgnore
    public Optional<String> exporterReference() {
        return exporterReference;
    }

    /**
     * Importer reference of an import shipment.
     */
    @JsonIgnore
    public Optional<String> importerReference() {
        return importerReference;
    }

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    @JsonIgnore
    public Optional<Boolean> isVatCollected() {
        return isVatCollected;
    }

    /**
     * Invoice reference of the shipment.
     */
    @JsonIgnore
    public Optional<String> invoice() {
        return invoice;
    }

    /**
     * License reference of the shipment.
     */
    @JsonIgnore
    public Optional<String> license() {
        return license;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    /**
     * Additional notes to be included in the customs declaration.
     */
    @JsonIgnore
    public Optional<String> notes() {
        return notes;
    }

    /**
     * Object ID of the Importer address.
     */
    @JsonIgnore
    public Optional<String> addressImporter() {
        return addressImporter;
    }

    /**
     * Type of goods of the shipment.  
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Contents-Type"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public String contentsType() {
        return contentsType;
    }

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-EELPFC"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public Optional<String> eelPfc() {
        return eelPfc;
    }

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Incoterm"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public Optional<String> incoterm() {
        return incoterm;
    }

    /**
     * Additional invoiced charges to be shown on the Customs Declaration Commercial Invoice.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomsInvoicedCharges> invoicedCharges() {
        return (Optional<CustomsInvoicedCharges>) invoicedCharges;
    }

    /**
     * Distinct Parcel content items as Customs Items object_ids.
     */
    @JsonIgnore
    public List<String> items() {
        return items;
    }

    /**
     * Indicates how the carrier should proceed in case the shipment can't be delivered.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Non-Delivery-Option"&gt;here&lt;/a&gt;
     */
    @JsonIgnore
    public String nonDeliveryOption() {
        return nonDeliveryOption;
    }

    /**
     * Date and time of object creation.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given object.
     */
    @JsonIgnore
    public Optional<String> objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the object.
     */
    @JsonIgnore
    public Optional<String> objectOwner() {
        return objectOwner;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectStateEnum> objectState() {
        return (Optional<ObjectStateEnum>) objectState;
    }

    /**
     * Date and time of last object update.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return objectUpdated;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonIgnore
    public Optional<Boolean> test() {
        return test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    public CustomsDeclaration withAesItn(String aesItn) {
        Utils.checkNotNull(aesItn, "aesItn");
        this.aesItn = Optional.ofNullable(aesItn);
        return this;
    }

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    public CustomsDeclaration withAesItn(Optional<String> aesItn) {
        Utils.checkNotNull(aesItn, "aesItn");
        this.aesItn = aesItn;
        return this;
    }

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     * Allowed values available &lt;a href="#tag/Customs-Declaration-B13A-Filing-Option"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withB13aFilingOption(String b13aFilingOption) {
        Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
        this.b13aFilingOption = Optional.ofNullable(b13aFilingOption);
        return this;
    }

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     * Allowed values available &lt;a href="#tag/Customs-Declaration-B13A-Filing-Option"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withB13aFilingOption(Optional<String> b13aFilingOption) {
        Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
        this.b13aFilingOption = b13aFilingOption;
        return this;
    }

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    public CustomsDeclaration withB13aNumber(String b13aNumber) {
        Utils.checkNotNull(b13aNumber, "b13aNumber");
        this.b13aNumber = Optional.ofNullable(b13aNumber);
        return this;
    }

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    public CustomsDeclaration withB13aNumber(Optional<String> b13aNumber) {
        Utils.checkNotNull(b13aNumber, "b13aNumber");
        this.b13aNumber = b13aNumber;
        return this;
    }

    /**
     * Certificate reference of the shipment.
     */
    public CustomsDeclaration withCertificate(String certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = Optional.ofNullable(certificate);
        return this;
    }

    /**
     * Certificate reference of the shipment.
     */
    public CustomsDeclaration withCertificate(Optional<String> certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = certificate;
        return this;
    }

    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    public CustomsDeclaration withCertify(boolean certify) {
        Utils.checkNotNull(certify, "certify");
        this.certify = certify;
        return this;
    }

    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all 
     * information provided.
     */
    public CustomsDeclaration withCertifySigner(String certifySigner) {
        Utils.checkNotNull(certifySigner, "certifySigner");
        this.certifySigner = certifySigner;
        return this;
    }

    public CustomsDeclaration withCommercialInvoice(boolean commercialInvoice) {
        Utils.checkNotNull(commercialInvoice, "commercialInvoice");
        this.commercialInvoice = Optional.ofNullable(commercialInvoice);
        return this;
    }

    public CustomsDeclaration withCommercialInvoice(Optional<Boolean> commercialInvoice) {
        Utils.checkNotNull(commercialInvoice, "commercialInvoice");
        this.commercialInvoice = commercialInvoice;
        return this;
    }

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    public CustomsDeclaration withContentsExplanation(String contentsExplanation) {
        Utils.checkNotNull(contentsExplanation, "contentsExplanation");
        this.contentsExplanation = Optional.ofNullable(contentsExplanation);
        return this;
    }

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    public CustomsDeclaration withContentsExplanation(Optional<String> contentsExplanation) {
        Utils.checkNotNull(contentsExplanation, "contentsExplanation");
        this.contentsExplanation = contentsExplanation;
        return this;
    }

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    public CustomsDeclaration withDisclaimer(String disclaimer) {
        Utils.checkNotNull(disclaimer, "disclaimer");
        this.disclaimer = Optional.ofNullable(disclaimer);
        return this;
    }

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    public CustomsDeclaration withDisclaimer(Optional<String> disclaimer) {
        Utils.checkNotNull(disclaimer, "disclaimer");
        this.disclaimer = disclaimer;
        return this;
    }

    /**
     * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
     */
    public CustomsDeclaration withDutiesPayor(CustomsDeclarationDutiesPayor dutiesPayor) {
        Utils.checkNotNull(dutiesPayor, "dutiesPayor");
        this.dutiesPayor = Optional.ofNullable(dutiesPayor);
        return this;
    }

    /**
     * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
     */
    public CustomsDeclaration withDutiesPayor(Optional<? extends CustomsDeclarationDutiesPayor> dutiesPayor) {
        Utils.checkNotNull(dutiesPayor, "dutiesPayor");
        this.dutiesPayor = dutiesPayor;
        return this;
    }

    /**
     * Additional exporter identification that may be required to ship in certain countries
     */
    public CustomsDeclaration withExporterIdentification(CustomsExporterIdentification exporterIdentification) {
        Utils.checkNotNull(exporterIdentification, "exporterIdentification");
        this.exporterIdentification = Optional.ofNullable(exporterIdentification);
        return this;
    }

    /**
     * Additional exporter identification that may be required to ship in certain countries
     */
    public CustomsDeclaration withExporterIdentification(Optional<? extends CustomsExporterIdentification> exporterIdentification) {
        Utils.checkNotNull(exporterIdentification, "exporterIdentification");
        this.exporterIdentification = exporterIdentification;
        return this;
    }

    /**
     * Exporter reference of an export shipment.
     */
    public CustomsDeclaration withExporterReference(String exporterReference) {
        Utils.checkNotNull(exporterReference, "exporterReference");
        this.exporterReference = Optional.ofNullable(exporterReference);
        return this;
    }

    /**
     * Exporter reference of an export shipment.
     */
    public CustomsDeclaration withExporterReference(Optional<String> exporterReference) {
        Utils.checkNotNull(exporterReference, "exporterReference");
        this.exporterReference = exporterReference;
        return this;
    }

    /**
     * Importer reference of an import shipment.
     */
    public CustomsDeclaration withImporterReference(String importerReference) {
        Utils.checkNotNull(importerReference, "importerReference");
        this.importerReference = Optional.ofNullable(importerReference);
        return this;
    }

    /**
     * Importer reference of an import shipment.
     */
    public CustomsDeclaration withImporterReference(Optional<String> importerReference) {
        Utils.checkNotNull(importerReference, "importerReference");
        this.importerReference = importerReference;
        return this;
    }

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    public CustomsDeclaration withIsVatCollected(boolean isVatCollected) {
        Utils.checkNotNull(isVatCollected, "isVatCollected");
        this.isVatCollected = Optional.ofNullable(isVatCollected);
        return this;
    }

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    public CustomsDeclaration withIsVatCollected(Optional<Boolean> isVatCollected) {
        Utils.checkNotNull(isVatCollected, "isVatCollected");
        this.isVatCollected = isVatCollected;
        return this;
    }

    /**
     * Invoice reference of the shipment.
     */
    public CustomsDeclaration withInvoice(String invoice) {
        Utils.checkNotNull(invoice, "invoice");
        this.invoice = Optional.ofNullable(invoice);
        return this;
    }

    /**
     * Invoice reference of the shipment.
     */
    public CustomsDeclaration withInvoice(Optional<String> invoice) {
        Utils.checkNotNull(invoice, "invoice");
        this.invoice = invoice;
        return this;
    }

    /**
     * License reference of the shipment.
     */
    public CustomsDeclaration withLicense(String license) {
        Utils.checkNotNull(license, "license");
        this.license = Optional.ofNullable(license);
        return this;
    }

    /**
     * License reference of the shipment.
     */
    public CustomsDeclaration withLicense(Optional<String> license) {
        Utils.checkNotNull(license, "license");
        this.license = license;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    public CustomsDeclaration withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    public CustomsDeclaration withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Additional notes to be included in the customs declaration.
     */
    public CustomsDeclaration withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }

    /**
     * Additional notes to be included in the customs declaration.
     */
    public CustomsDeclaration withNotes(Optional<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    /**
     * Object ID of the Importer address.
     */
    public CustomsDeclaration withAddressImporter(String addressImporter) {
        Utils.checkNotNull(addressImporter, "addressImporter");
        this.addressImporter = Optional.ofNullable(addressImporter);
        return this;
    }

    /**
     * Object ID of the Importer address.
     */
    public CustomsDeclaration withAddressImporter(Optional<String> addressImporter) {
        Utils.checkNotNull(addressImporter, "addressImporter");
        this.addressImporter = addressImporter;
        return this;
    }

    /**
     * Type of goods of the shipment.  
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Contents-Type"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withContentsType(String contentsType) {
        Utils.checkNotNull(contentsType, "contentsType");
        this.contentsType = contentsType;
        return this;
    }

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-EELPFC"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withEelPfc(String eelPfc) {
        Utils.checkNotNull(eelPfc, "eelPfc");
        this.eelPfc = Optional.ofNullable(eelPfc);
        return this;
    }

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-EELPFC"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withEelPfc(Optional<String> eelPfc) {
        Utils.checkNotNull(eelPfc, "eelPfc");
        this.eelPfc = eelPfc;
        return this;
    }

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Incoterm"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withIncoterm(String incoterm) {
        Utils.checkNotNull(incoterm, "incoterm");
        this.incoterm = Optional.ofNullable(incoterm);
        return this;
    }

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Incoterm"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withIncoterm(Optional<String> incoterm) {
        Utils.checkNotNull(incoterm, "incoterm");
        this.incoterm = incoterm;
        return this;
    }

    /**
     * Additional invoiced charges to be shown on the Customs Declaration Commercial Invoice.
     */
    public CustomsDeclaration withInvoicedCharges(CustomsInvoicedCharges invoicedCharges) {
        Utils.checkNotNull(invoicedCharges, "invoicedCharges");
        this.invoicedCharges = Optional.ofNullable(invoicedCharges);
        return this;
    }

    /**
     * Additional invoiced charges to be shown on the Customs Declaration Commercial Invoice.
     */
    public CustomsDeclaration withInvoicedCharges(Optional<? extends CustomsInvoicedCharges> invoicedCharges) {
        Utils.checkNotNull(invoicedCharges, "invoicedCharges");
        this.invoicedCharges = invoicedCharges;
        return this;
    }

    /**
     * Distinct Parcel content items as Customs Items object_ids.
     */
    public CustomsDeclaration withItems(List<String> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    /**
     * Indicates how the carrier should proceed in case the shipment can't be delivered.
     * Allowed values available &lt;a href="#tag/Customs-Declaration-Non-Delivery-Option"&gt;here&lt;/a&gt;
     */
    public CustomsDeclaration withNonDeliveryOption(String nonDeliveryOption) {
        Utils.checkNotNull(nonDeliveryOption, "nonDeliveryOption");
        this.nonDeliveryOption = nonDeliveryOption;
        return this;
    }

    /**
     * Date and time of object creation.
     */
    public CustomsDeclaration withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of object creation.
     */
    public CustomsDeclaration withObjectCreated(Optional<OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given object.
     */
    public CustomsDeclaration withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given object.
     */
    public CustomsDeclaration withObjectId(Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the object.
     */
    public CustomsDeclaration withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the object.
     */
    public CustomsDeclaration withObjectOwner(Optional<String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    public CustomsDeclaration withObjectState(ObjectStateEnum objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = Optional.ofNullable(objectState);
        return this;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    public CustomsDeclaration withObjectState(Optional<? extends ObjectStateEnum> objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = objectState;
        return this;
    }

    /**
     * Date and time of last object update.
     */
    public CustomsDeclaration withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last object update.
     */
    public CustomsDeclaration withObjectUpdated(Optional<OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public CustomsDeclaration withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public CustomsDeclaration withTest(Optional<Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomsDeclaration other = (CustomsDeclaration) o;
        return 
            Objects.deepEquals(this.aesItn, other.aesItn) &&
            Objects.deepEquals(this.b13aFilingOption, other.b13aFilingOption) &&
            Objects.deepEquals(this.b13aNumber, other.b13aNumber) &&
            Objects.deepEquals(this.certificate, other.certificate) &&
            Objects.deepEquals(this.certify, other.certify) &&
            Objects.deepEquals(this.certifySigner, other.certifySigner) &&
            Objects.deepEquals(this.commercialInvoice, other.commercialInvoice) &&
            Objects.deepEquals(this.contentsExplanation, other.contentsExplanation) &&
            Objects.deepEquals(this.disclaimer, other.disclaimer) &&
            Objects.deepEquals(this.dutiesPayor, other.dutiesPayor) &&
            Objects.deepEquals(this.exporterIdentification, other.exporterIdentification) &&
            Objects.deepEquals(this.exporterReference, other.exporterReference) &&
            Objects.deepEquals(this.importerReference, other.importerReference) &&
            Objects.deepEquals(this.isVatCollected, other.isVatCollected) &&
            Objects.deepEquals(this.invoice, other.invoice) &&
            Objects.deepEquals(this.license, other.license) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.notes, other.notes) &&
            Objects.deepEquals(this.addressImporter, other.addressImporter) &&
            Objects.deepEquals(this.contentsType, other.contentsType) &&
            Objects.deepEquals(this.eelPfc, other.eelPfc) &&
            Objects.deepEquals(this.incoterm, other.incoterm) &&
            Objects.deepEquals(this.invoicedCharges, other.invoicedCharges) &&
            Objects.deepEquals(this.items, other.items) &&
            Objects.deepEquals(this.nonDeliveryOption, other.nonDeliveryOption) &&
            Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            Objects.deepEquals(this.objectState, other.objectState) &&
            Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            aesItn,
            b13aFilingOption,
            b13aNumber,
            certificate,
            certify,
            certifySigner,
            commercialInvoice,
            contentsExplanation,
            disclaimer,
            dutiesPayor,
            exporterIdentification,
            exporterReference,
            importerReference,
            isVatCollected,
            invoice,
            license,
            metadata,
            notes,
            addressImporter,
            contentsType,
            eelPfc,
            incoterm,
            invoicedCharges,
            items,
            nonDeliveryOption,
            objectCreated,
            objectId,
            objectOwner,
            objectState,
            objectUpdated,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomsDeclaration.class,
                "aesItn", aesItn,
                "b13aFilingOption", b13aFilingOption,
                "b13aNumber", b13aNumber,
                "certificate", certificate,
                "certify", certify,
                "certifySigner", certifySigner,
                "commercialInvoice", commercialInvoice,
                "contentsExplanation", contentsExplanation,
                "disclaimer", disclaimer,
                "dutiesPayor", dutiesPayor,
                "exporterIdentification", exporterIdentification,
                "exporterReference", exporterReference,
                "importerReference", importerReference,
                "isVatCollected", isVatCollected,
                "invoice", invoice,
                "license", license,
                "metadata", metadata,
                "notes", notes,
                "addressImporter", addressImporter,
                "contentsType", contentsType,
                "eelPfc", eelPfc,
                "incoterm", incoterm,
                "invoicedCharges", invoicedCharges,
                "items", items,
                "nonDeliveryOption", nonDeliveryOption,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectState", objectState,
                "objectUpdated", objectUpdated,
                "test", test);
    }
    
    public final static class Builder {
 
        private Optional<String> aesItn = Optional.empty();
 
        private Optional<String> b13aFilingOption = Optional.empty();
 
        private Optional<String> b13aNumber = Optional.empty();
 
        private Optional<String> certificate = Optional.empty();
 
        private Boolean certify;
 
        private String certifySigner;
 
        private Optional<Boolean> commercialInvoice = Optional.empty();
 
        private Optional<String> contentsExplanation = Optional.empty();
 
        private Optional<String> disclaimer = Optional.empty();
 
        private Optional<? extends CustomsDeclarationDutiesPayor> dutiesPayor = Optional.empty();
 
        private Optional<? extends CustomsExporterIdentification> exporterIdentification = Optional.empty();
 
        private Optional<String> exporterReference = Optional.empty();
 
        private Optional<String> importerReference = Optional.empty();
 
        private Optional<Boolean> isVatCollected = Optional.empty();
 
        private Optional<String> invoice = Optional.empty();
 
        private Optional<String> license = Optional.empty();
 
        private Optional<String> metadata = Optional.empty();
 
        private Optional<String> notes = Optional.empty();
 
        private Optional<String> addressImporter = Optional.empty();
 
        private String contentsType;
 
        private Optional<String> eelPfc = Optional.empty();
 
        private Optional<String> incoterm = Optional.empty();
 
        private Optional<? extends CustomsInvoicedCharges> invoicedCharges = Optional.empty();
 
        private List<String> items;
 
        private String nonDeliveryOption;
 
        private Optional<OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<String> objectId = Optional.empty();
 
        private Optional<String> objectOwner = Optional.empty();
 
        private Optional<? extends ObjectStateEnum> objectState = Optional.empty();
 
        private Optional<OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<Boolean> test = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
         * AES / ITN reference of the shipment.
         */
        public Builder aesItn(String aesItn) {
            Utils.checkNotNull(aesItn, "aesItn");
            this.aesItn = Optional.ofNullable(aesItn);
            return this;
        }

        /**
         * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
         * AES / ITN reference of the shipment.
         */
        public Builder aesItn(Optional<String> aesItn) {
            Utils.checkNotNull(aesItn, "aesItn");
            this.aesItn = aesItn;
            return this;
        }

        /**
         * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
         * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
         * Allowed values available &lt;a href="#tag/Customs-Declaration-B13A-Filing-Option"&gt;here&lt;/a&gt;
         */
        public Builder b13aFilingOption(String b13aFilingOption) {
            Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
            this.b13aFilingOption = Optional.ofNullable(b13aFilingOption);
            return this;
        }

        /**
         * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
         * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
         * Allowed values available &lt;a href="#tag/Customs-Declaration-B13A-Filing-Option"&gt;here&lt;/a&gt;
         */
        public Builder b13aFilingOption(Optional<String> b13aFilingOption) {
            Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
            this.b13aFilingOption = b13aFilingOption;
            return this;
        }

        /**
         * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
         * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
         * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
         * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
         */
        public Builder b13aNumber(String b13aNumber) {
            Utils.checkNotNull(b13aNumber, "b13aNumber");
            this.b13aNumber = Optional.ofNullable(b13aNumber);
            return this;
        }

        /**
         * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
         * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
         * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
         * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
         */
        public Builder b13aNumber(Optional<String> b13aNumber) {
            Utils.checkNotNull(b13aNumber, "b13aNumber");
            this.b13aNumber = b13aNumber;
            return this;
        }

        /**
         * Certificate reference of the shipment.
         */
        public Builder certificate(String certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = Optional.ofNullable(certificate);
            return this;
        }

        /**
         * Certificate reference of the shipment.
         */
        public Builder certificate(Optional<String> certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = certificate;
            return this;
        }

        /**
         * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
         */
        public Builder certify(boolean certify) {
            Utils.checkNotNull(certify, "certify");
            this.certify = certify;
            return this;
        }

        /**
         * Name of the person who created the customs declaration and is responsible for the validity of all 
         * information provided.
         */
        public Builder certifySigner(String certifySigner) {
            Utils.checkNotNull(certifySigner, "certifySigner");
            this.certifySigner = certifySigner;
            return this;
        }

        public Builder commercialInvoice(boolean commercialInvoice) {
            Utils.checkNotNull(commercialInvoice, "commercialInvoice");
            this.commercialInvoice = Optional.ofNullable(commercialInvoice);
            return this;
        }

        public Builder commercialInvoice(Optional<Boolean> commercialInvoice) {
            Utils.checkNotNull(commercialInvoice, "commercialInvoice");
            this.commercialInvoice = commercialInvoice;
            return this;
        }

        /**
         * **required if contents_type is `OTHER`**&lt;br&gt;
         * Explanation of the type of goods of the shipment.
         */
        public Builder contentsExplanation(String contentsExplanation) {
            Utils.checkNotNull(contentsExplanation, "contentsExplanation");
            this.contentsExplanation = Optional.ofNullable(contentsExplanation);
            return this;
        }

        /**
         * **required if contents_type is `OTHER`**&lt;br&gt;
         * Explanation of the type of goods of the shipment.
         */
        public Builder contentsExplanation(Optional<String> contentsExplanation) {
            Utils.checkNotNull(contentsExplanation, "contentsExplanation");
            this.contentsExplanation = contentsExplanation;
            return this;
        }

        /**
         * Disclaimer for the shipment and customs information that have been provided.
         */
        public Builder disclaimer(String disclaimer) {
            Utils.checkNotNull(disclaimer, "disclaimer");
            this.disclaimer = Optional.ofNullable(disclaimer);
            return this;
        }

        /**
         * Disclaimer for the shipment and customs information that have been provided.
         */
        public Builder disclaimer(Optional<String> disclaimer) {
            Utils.checkNotNull(disclaimer, "disclaimer");
            this.disclaimer = disclaimer;
            return this;
        }

        /**
         * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
         */
        public Builder dutiesPayor(CustomsDeclarationDutiesPayor dutiesPayor) {
            Utils.checkNotNull(dutiesPayor, "dutiesPayor");
            this.dutiesPayor = Optional.ofNullable(dutiesPayor);
            return this;
        }

        /**
         * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
         */
        public Builder dutiesPayor(Optional<? extends CustomsDeclarationDutiesPayor> dutiesPayor) {
            Utils.checkNotNull(dutiesPayor, "dutiesPayor");
            this.dutiesPayor = dutiesPayor;
            return this;
        }

        /**
         * Additional exporter identification that may be required to ship in certain countries
         */
        public Builder exporterIdentification(CustomsExporterIdentification exporterIdentification) {
            Utils.checkNotNull(exporterIdentification, "exporterIdentification");
            this.exporterIdentification = Optional.ofNullable(exporterIdentification);
            return this;
        }

        /**
         * Additional exporter identification that may be required to ship in certain countries
         */
        public Builder exporterIdentification(Optional<? extends CustomsExporterIdentification> exporterIdentification) {
            Utils.checkNotNull(exporterIdentification, "exporterIdentification");
            this.exporterIdentification = exporterIdentification;
            return this;
        }

        /**
         * Exporter reference of an export shipment.
         */
        public Builder exporterReference(String exporterReference) {
            Utils.checkNotNull(exporterReference, "exporterReference");
            this.exporterReference = Optional.ofNullable(exporterReference);
            return this;
        }

        /**
         * Exporter reference of an export shipment.
         */
        public Builder exporterReference(Optional<String> exporterReference) {
            Utils.checkNotNull(exporterReference, "exporterReference");
            this.exporterReference = exporterReference;
            return this;
        }

        /**
         * Importer reference of an import shipment.
         */
        public Builder importerReference(String importerReference) {
            Utils.checkNotNull(importerReference, "importerReference");
            this.importerReference = Optional.ofNullable(importerReference);
            return this;
        }

        /**
         * Importer reference of an import shipment.
         */
        public Builder importerReference(Optional<String> importerReference) {
            Utils.checkNotNull(importerReference, "importerReference");
            this.importerReference = importerReference;
            return this;
        }

        /**
         * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
         */
        public Builder isVatCollected(boolean isVatCollected) {
            Utils.checkNotNull(isVatCollected, "isVatCollected");
            this.isVatCollected = Optional.ofNullable(isVatCollected);
            return this;
        }

        /**
         * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
         */
        public Builder isVatCollected(Optional<Boolean> isVatCollected) {
            Utils.checkNotNull(isVatCollected, "isVatCollected");
            this.isVatCollected = isVatCollected;
            return this;
        }

        /**
         * Invoice reference of the shipment.
         */
        public Builder invoice(String invoice) {
            Utils.checkNotNull(invoice, "invoice");
            this.invoice = Optional.ofNullable(invoice);
            return this;
        }

        /**
         * Invoice reference of the shipment.
         */
        public Builder invoice(Optional<String> invoice) {
            Utils.checkNotNull(invoice, "invoice");
            this.invoice = invoice;
            return this;
        }

        /**
         * License reference of the shipment.
         */
        public Builder license(String license) {
            Utils.checkNotNull(license, "license");
            this.license = Optional.ofNullable(license);
            return this;
        }

        /**
         * License reference of the shipment.
         */
        public Builder license(Optional<String> license) {
            Utils.checkNotNull(license, "license");
            this.license = license;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you 
         * want to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you 
         * want to attach to the object.
         */
        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Additional notes to be included in the customs declaration.
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        /**
         * Additional notes to be included in the customs declaration.
         */
        public Builder notes(Optional<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        /**
         * Object ID of the Importer address.
         */
        public Builder addressImporter(String addressImporter) {
            Utils.checkNotNull(addressImporter, "addressImporter");
            this.addressImporter = Optional.ofNullable(addressImporter);
            return this;
        }

        /**
         * Object ID of the Importer address.
         */
        public Builder addressImporter(Optional<String> addressImporter) {
            Utils.checkNotNull(addressImporter, "addressImporter");
            this.addressImporter = addressImporter;
            return this;
        }

        /**
         * Type of goods of the shipment.  
         * Allowed values available &lt;a href="#tag/Customs-Declaration-Contents-Type"&gt;here&lt;/a&gt;
         */
        public Builder contentsType(String contentsType) {
            Utils.checkNotNull(contentsType, "contentsType");
            this.contentsType = contentsType;
            return this;
        }

        /**
         * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
         * other shipments from the US, `NOEEI_30_37_a` is applicable.
         * Allowed values available &lt;a href="#tag/Customs-Declaration-EELPFC"&gt;here&lt;/a&gt;
         */
        public Builder eelPfc(String eelPfc) {
            Utils.checkNotNull(eelPfc, "eelPfc");
            this.eelPfc = Optional.ofNullable(eelPfc);
            return this;
        }

        /**
         * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
         * other shipments from the US, `NOEEI_30_37_a` is applicable.
         * Allowed values available &lt;a href="#tag/Customs-Declaration-EELPFC"&gt;here&lt;/a&gt;
         */
        public Builder eelPfc(Optional<String> eelPfc) {
            Utils.checkNotNull(eelPfc, "eelPfc");
            this.eelPfc = eelPfc;
            return this;
        }

        /**
         * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
         * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
         * If expecting DAP for other carriers, please use DDU.
         * Allowed values available &lt;a href="#tag/Customs-Declaration-Incoterm"&gt;here&lt;/a&gt;
         */
        public Builder incoterm(String incoterm) {
            Utils.checkNotNull(incoterm, "incoterm");
            this.incoterm = Optional.ofNullable(incoterm);
            return this;
        }

        /**
         * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
         * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
         * If expecting DAP for other carriers, please use DDU.
         * Allowed values available &lt;a href="#tag/Customs-Declaration-Incoterm"&gt;here&lt;/a&gt;
         */
        public Builder incoterm(Optional<String> incoterm) {
            Utils.checkNotNull(incoterm, "incoterm");
            this.incoterm = incoterm;
            return this;
        }

        /**
         * Additional invoiced charges to be shown on the Customs Declaration Commercial Invoice.
         */
        public Builder invoicedCharges(CustomsInvoicedCharges invoicedCharges) {
            Utils.checkNotNull(invoicedCharges, "invoicedCharges");
            this.invoicedCharges = Optional.ofNullable(invoicedCharges);
            return this;
        }

        /**
         * Additional invoiced charges to be shown on the Customs Declaration Commercial Invoice.
         */
        public Builder invoicedCharges(Optional<? extends CustomsInvoicedCharges> invoicedCharges) {
            Utils.checkNotNull(invoicedCharges, "invoicedCharges");
            this.invoicedCharges = invoicedCharges;
            return this;
        }

        /**
         * Distinct Parcel content items as Customs Items object_ids.
         */
        public Builder items(List<String> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        /**
         * Indicates how the carrier should proceed in case the shipment can't be delivered.
         * Allowed values available &lt;a href="#tag/Customs-Declaration-Non-Delivery-Option"&gt;here&lt;/a&gt;
         */
        public Builder nonDeliveryOption(String nonDeliveryOption) {
            Utils.checkNotNull(nonDeliveryOption, "nonDeliveryOption");
            this.nonDeliveryOption = nonDeliveryOption;
            return this;
        }

        /**
         * Date and time of object creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of object creation.
         */
        public Builder objectCreated(Optional<OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given object.
         */
        public Builder objectId(Optional<String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the object.
         */
        public Builder objectOwner(Optional<String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Indicates the validity of the enclosing object
         */
        public Builder objectState(ObjectStateEnum objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = Optional.ofNullable(objectState);
            return this;
        }

        /**
         * Indicates the validity of the enclosing object
         */
        public Builder objectState(Optional<? extends ObjectStateEnum> objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = objectState;
            return this;
        }

        /**
         * Date and time of last object update.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last object update.
         */
        public Builder objectUpdated(Optional<OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public CustomsDeclaration build() {
            return new CustomsDeclaration(
                aesItn,
                b13aFilingOption,
                b13aNumber,
                certificate,
                certify,
                certifySigner,
                commercialInvoice,
                contentsExplanation,
                disclaimer,
                dutiesPayor,
                exporterIdentification,
                exporterReference,
                importerReference,
                isVatCollected,
                invoice,
                license,
                metadata,
                notes,
                addressImporter,
                contentsType,
                eelPfc,
                incoterm,
                invoicedCharges,
                items,
                nonDeliveryOption,
                objectCreated,
                objectId,
                objectOwner,
                objectState,
                objectUpdated,
                test);
        }
    }
}

