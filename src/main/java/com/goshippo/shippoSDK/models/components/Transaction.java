/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippoSDK.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippoSDK.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Transaction {

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commercial_invoice_url")
    private Optional<String> commercialInvoiceUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private JsonNullable<? extends CreatedBy> createdBy;

    /**
     * The estimated time of arrival according to the carrier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eta")
    private Optional<String> eta;

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label_file_type")
    private Optional<? extends LabelFileTypeEnum> labelFileType;

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label_url")
    private Optional<String> labelUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<ResponseMessage>> messages;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    /**
     * Date and time of Transaction creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given Transaction object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<String> objectId;

    /**
     * Username of the user who created the Transaction object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<String> objectOwner;

    /**
     * Indicates the validity of the enclosing object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_state")
    private Optional<? extends ObjectStateEnum> objectState;

    /**
     * Date and time of last Transaction update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<OffsetDateTime> objectUpdated;

    /**
     * Object ID of the Parcel object that is being shipped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parcel")
    private Optional<String> parcel;

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("qr_code_url")
    private Optional<String> qrCodeUrl;

    /**
     * ID of the Rate object for which a Label has to be obtained.  
     * If you purchase a label by calling the transaction endpoint without a rate (instalabel), 
     * this field will be a simplified Rate object in the Transaction model returned from the POST request.
     * &lt;/br&gt;Note, only rates less than 7 days old can be purchased to ensure up-to-date pricing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private Optional<? extends TransactionRate> rate;

    /**
     * Indicates the status of the Transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TransactionStatusEnum> status;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<Boolean> test;

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_number")
    private Optional<String> trackingNumber;

    /**
     * Indicates the high level status of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_status")
    private Optional<? extends TrackingStatusEnum> trackingStatus;

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_url_provider")
    private Optional<String> trackingUrlProvider;

    @JsonCreator
    public Transaction(
            @JsonProperty("commercial_invoice_url") Optional<String> commercialInvoiceUrl,
            @JsonProperty("created_by") JsonNullable<? extends CreatedBy> createdBy,
            @JsonProperty("eta") Optional<String> eta,
            @JsonProperty("label_file_type") Optional<? extends LabelFileTypeEnum> labelFileType,
            @JsonProperty("label_url") Optional<String> labelUrl,
            @JsonProperty("messages") Optional<? extends List<ResponseMessage>> messages,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("object_created") Optional<OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<String> objectId,
            @JsonProperty("object_owner") Optional<String> objectOwner,
            @JsonProperty("object_state") Optional<? extends ObjectStateEnum> objectState,
            @JsonProperty("object_updated") Optional<OffsetDateTime> objectUpdated,
            @JsonProperty("parcel") Optional<String> parcel,
            @JsonProperty("qr_code_url") Optional<String> qrCodeUrl,
            @JsonProperty("rate") Optional<? extends TransactionRate> rate,
            @JsonProperty("status") Optional<? extends TransactionStatusEnum> status,
            @JsonProperty("test") Optional<Boolean> test,
            @JsonProperty("tracking_number") Optional<String> trackingNumber,
            @JsonProperty("tracking_status") Optional<? extends TrackingStatusEnum> trackingStatus,
            @JsonProperty("tracking_url_provider") Optional<String> trackingUrlProvider) {
        Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(eta, "eta");
        Utils.checkNotNull(labelFileType, "labelFileType");
        Utils.checkNotNull(labelUrl, "labelUrl");
        Utils.checkNotNull(messages, "messages");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectState, "objectState");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(parcel, "parcel");
        Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
        Utils.checkNotNull(rate, "rate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(test, "test");
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        Utils.checkNotNull(trackingStatus, "trackingStatus");
        Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
        this.commercialInvoiceUrl = commercialInvoiceUrl;
        this.createdBy = createdBy;
        this.eta = eta;
        this.labelFileType = labelFileType;
        this.labelUrl = labelUrl;
        this.messages = messages;
        this.metadata = metadata;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectState = objectState;
        this.objectUpdated = objectUpdated;
        this.parcel = parcel;
        this.qrCodeUrl = qrCodeUrl;
        this.rate = rate;
        this.status = status;
        this.test = test;
        this.trackingNumber = trackingNumber;
        this.trackingStatus = trackingStatus;
        this.trackingUrlProvider = trackingUrlProvider;
    }
    
    public Transaction() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    @JsonIgnore
    public Optional<String> commercialInvoiceUrl() {
        return commercialInvoiceUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CreatedBy> createdBy() {
        return (JsonNullable<CreatedBy>) createdBy;
    }

    /**
     * The estimated time of arrival according to the carrier.
     */
    @JsonIgnore
    public Optional<String> eta() {
        return eta;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LabelFileTypeEnum> labelFileType() {
        return (Optional<LabelFileTypeEnum>) labelFileType;
    }

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    @JsonIgnore
    public Optional<String> labelUrl() {
        return labelUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ResponseMessage>> messages() {
        return (Optional<List<ResponseMessage>>) messages;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    /**
     * Date and time of Transaction creation.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given Transaction object.
     */
    @JsonIgnore
    public Optional<String> objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the Transaction object.
     */
    @JsonIgnore
    public Optional<String> objectOwner() {
        return objectOwner;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectStateEnum> objectState() {
        return (Optional<ObjectStateEnum>) objectState;
    }

    /**
     * Date and time of last Transaction update.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return objectUpdated;
    }

    /**
     * Object ID of the Parcel object that is being shipped.
     */
    @JsonIgnore
    public Optional<String> parcel() {
        return parcel;
    }

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    @JsonIgnore
    public Optional<String> qrCodeUrl() {
        return qrCodeUrl;
    }

    /**
     * ID of the Rate object for which a Label has to be obtained.  
     * If you purchase a label by calling the transaction endpoint without a rate (instalabel), 
     * this field will be a simplified Rate object in the Transaction model returned from the POST request.
     * &lt;/br&gt;Note, only rates less than 7 days old can be purchased to ensure up-to-date pricing.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionRate> rate() {
        return (Optional<TransactionRate>) rate;
    }

    /**
     * Indicates the status of the Transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionStatusEnum> status() {
        return (Optional<TransactionStatusEnum>) status;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonIgnore
    public Optional<Boolean> test() {
        return test;
    }

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    @JsonIgnore
    public Optional<String> trackingNumber() {
        return trackingNumber;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TrackingStatusEnum> trackingStatus() {
        return (Optional<TrackingStatusEnum>) trackingStatus;
    }

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    @JsonIgnore
    public Optional<String> trackingUrlProvider() {
        return trackingUrlProvider;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    public Transaction withCommercialInvoiceUrl(String commercialInvoiceUrl) {
        Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
        this.commercialInvoiceUrl = Optional.ofNullable(commercialInvoiceUrl);
        return this;
    }

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    public Transaction withCommercialInvoiceUrl(Optional<String> commercialInvoiceUrl) {
        Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
        this.commercialInvoiceUrl = commercialInvoiceUrl;
        return this;
    }

    public Transaction withCreatedBy(CreatedBy createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = JsonNullable.of(createdBy);
        return this;
    }

    public Transaction withCreatedBy(JsonNullable<? extends CreatedBy> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * The estimated time of arrival according to the carrier.
     */
    public Transaction withEta(String eta) {
        Utils.checkNotNull(eta, "eta");
        this.eta = Optional.ofNullable(eta);
        return this;
    }

    /**
     * The estimated time of arrival according to the carrier.
     */
    public Transaction withEta(Optional<String> eta) {
        Utils.checkNotNull(eta, "eta");
        this.eta = eta;
        return this;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    public Transaction withLabelFileType(LabelFileTypeEnum labelFileType) {
        Utils.checkNotNull(labelFileType, "labelFileType");
        this.labelFileType = Optional.ofNullable(labelFileType);
        return this;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    public Transaction withLabelFileType(Optional<? extends LabelFileTypeEnum> labelFileType) {
        Utils.checkNotNull(labelFileType, "labelFileType");
        this.labelFileType = labelFileType;
        return this;
    }

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    public Transaction withLabelUrl(String labelUrl) {
        Utils.checkNotNull(labelUrl, "labelUrl");
        this.labelUrl = Optional.ofNullable(labelUrl);
        return this;
    }

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    public Transaction withLabelUrl(Optional<String> labelUrl) {
        Utils.checkNotNull(labelUrl, "labelUrl");
        this.labelUrl = labelUrl;
        return this;
    }

    public Transaction withMessages(List<ResponseMessage> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    public Transaction withMessages(Optional<? extends List<ResponseMessage>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    public Transaction withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    public Transaction withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Date and time of Transaction creation.
     */
    public Transaction withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of Transaction creation.
     */
    public Transaction withObjectCreated(Optional<OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given Transaction object.
     */
    public Transaction withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given Transaction object.
     */
    public Transaction withObjectId(Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the Transaction object.
     */
    public Transaction withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the Transaction object.
     */
    public Transaction withObjectOwner(Optional<String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    public Transaction withObjectState(ObjectStateEnum objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = Optional.ofNullable(objectState);
        return this;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    public Transaction withObjectState(Optional<? extends ObjectStateEnum> objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = objectState;
        return this;
    }

    /**
     * Date and time of last Transaction update.
     */
    public Transaction withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last Transaction update.
     */
    public Transaction withObjectUpdated(Optional<OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * Object ID of the Parcel object that is being shipped.
     */
    public Transaction withParcel(String parcel) {
        Utils.checkNotNull(parcel, "parcel");
        this.parcel = Optional.ofNullable(parcel);
        return this;
    }

    /**
     * Object ID of the Parcel object that is being shipped.
     */
    public Transaction withParcel(Optional<String> parcel) {
        Utils.checkNotNull(parcel, "parcel");
        this.parcel = parcel;
        return this;
    }

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    public Transaction withQrCodeUrl(String qrCodeUrl) {
        Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
        this.qrCodeUrl = Optional.ofNullable(qrCodeUrl);
        return this;
    }

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    public Transaction withQrCodeUrl(Optional<String> qrCodeUrl) {
        Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
        this.qrCodeUrl = qrCodeUrl;
        return this;
    }

    /**
     * ID of the Rate object for which a Label has to be obtained.  
     * If you purchase a label by calling the transaction endpoint without a rate (instalabel), 
     * this field will be a simplified Rate object in the Transaction model returned from the POST request.
     * &lt;/br&gt;Note, only rates less than 7 days old can be purchased to ensure up-to-date pricing.
     */
    public Transaction withRate(TransactionRate rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = Optional.ofNullable(rate);
        return this;
    }

    /**
     * ID of the Rate object for which a Label has to be obtained.  
     * If you purchase a label by calling the transaction endpoint without a rate (instalabel), 
     * this field will be a simplified Rate object in the Transaction model returned from the POST request.
     * &lt;/br&gt;Note, only rates less than 7 days old can be purchased to ensure up-to-date pricing.
     */
    public Transaction withRate(Optional<? extends TransactionRate> rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }

    /**
     * Indicates the status of the Transaction.
     */
    public Transaction withStatus(TransactionStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Indicates the status of the Transaction.
     */
    public Transaction withStatus(Optional<? extends TransactionStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Transaction withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Transaction withTest(Optional<Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    public Transaction withTrackingNumber(String trackingNumber) {
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        this.trackingNumber = Optional.ofNullable(trackingNumber);
        return this;
    }

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    public Transaction withTrackingNumber(Optional<String> trackingNumber) {
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        this.trackingNumber = trackingNumber;
        return this;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    public Transaction withTrackingStatus(TrackingStatusEnum trackingStatus) {
        Utils.checkNotNull(trackingStatus, "trackingStatus");
        this.trackingStatus = Optional.ofNullable(trackingStatus);
        return this;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    public Transaction withTrackingStatus(Optional<? extends TrackingStatusEnum> trackingStatus) {
        Utils.checkNotNull(trackingStatus, "trackingStatus");
        this.trackingStatus = trackingStatus;
        return this;
    }

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    public Transaction withTrackingUrlProvider(String trackingUrlProvider) {
        Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
        this.trackingUrlProvider = Optional.ofNullable(trackingUrlProvider);
        return this;
    }

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    public Transaction withTrackingUrlProvider(Optional<String> trackingUrlProvider) {
        Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
        this.trackingUrlProvider = trackingUrlProvider;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transaction other = (Transaction) o;
        return 
            Objects.deepEquals(this.commercialInvoiceUrl, other.commercialInvoiceUrl) &&
            Objects.deepEquals(this.createdBy, other.createdBy) &&
            Objects.deepEquals(this.eta, other.eta) &&
            Objects.deepEquals(this.labelFileType, other.labelFileType) &&
            Objects.deepEquals(this.labelUrl, other.labelUrl) &&
            Objects.deepEquals(this.messages, other.messages) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            Objects.deepEquals(this.objectState, other.objectState) &&
            Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            Objects.deepEquals(this.parcel, other.parcel) &&
            Objects.deepEquals(this.qrCodeUrl, other.qrCodeUrl) &&
            Objects.deepEquals(this.rate, other.rate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.test, other.test) &&
            Objects.deepEquals(this.trackingNumber, other.trackingNumber) &&
            Objects.deepEquals(this.trackingStatus, other.trackingStatus) &&
            Objects.deepEquals(this.trackingUrlProvider, other.trackingUrlProvider);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            commercialInvoiceUrl,
            createdBy,
            eta,
            labelFileType,
            labelUrl,
            messages,
            metadata,
            objectCreated,
            objectId,
            objectOwner,
            objectState,
            objectUpdated,
            parcel,
            qrCodeUrl,
            rate,
            status,
            test,
            trackingNumber,
            trackingStatus,
            trackingUrlProvider);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Transaction.class,
                "commercialInvoiceUrl", commercialInvoiceUrl,
                "createdBy", createdBy,
                "eta", eta,
                "labelFileType", labelFileType,
                "labelUrl", labelUrl,
                "messages", messages,
                "metadata", metadata,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectState", objectState,
                "objectUpdated", objectUpdated,
                "parcel", parcel,
                "qrCodeUrl", qrCodeUrl,
                "rate", rate,
                "status", status,
                "test", test,
                "trackingNumber", trackingNumber,
                "trackingStatus", trackingStatus,
                "trackingUrlProvider", trackingUrlProvider);
    }
    
    public final static class Builder {
 
        private Optional<String> commercialInvoiceUrl = Optional.empty();
 
        private JsonNullable<? extends CreatedBy> createdBy = JsonNullable.undefined();
 
        private Optional<String> eta = Optional.empty();
 
        private Optional<? extends LabelFileTypeEnum> labelFileType = Optional.empty();
 
        private Optional<String> labelUrl = Optional.empty();
 
        private Optional<? extends List<ResponseMessage>> messages = Optional.empty();
 
        private Optional<String> metadata = Optional.empty();
 
        private Optional<OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<String> objectId = Optional.empty();
 
        private Optional<String> objectOwner = Optional.empty();
 
        private Optional<? extends ObjectStateEnum> objectState = Optional.empty();
 
        private Optional<OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<String> parcel = Optional.empty();
 
        private Optional<String> qrCodeUrl = Optional.empty();
 
        private Optional<? extends TransactionRate> rate = Optional.empty();
 
        private Optional<? extends TransactionStatusEnum> status = Optional.empty();
 
        private Optional<Boolean> test = Optional.empty();
 
        private Optional<String> trackingNumber = Optional.empty();
 
        private Optional<? extends TrackingStatusEnum> trackingStatus = Optional.empty();
 
        private Optional<String> trackingUrlProvider = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
         * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
         */
        public Builder commercialInvoiceUrl(String commercialInvoiceUrl) {
            Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
            this.commercialInvoiceUrl = Optional.ofNullable(commercialInvoiceUrl);
            return this;
        }

        /**
         * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
         * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
         */
        public Builder commercialInvoiceUrl(Optional<String> commercialInvoiceUrl) {
            Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
            this.commercialInvoiceUrl = commercialInvoiceUrl;
            return this;
        }

        public Builder createdBy(CreatedBy createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = JsonNullable.of(createdBy);
            return this;
        }

        public Builder createdBy(JsonNullable<? extends CreatedBy> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * The estimated time of arrival according to the carrier.
         */
        public Builder eta(String eta) {
            Utils.checkNotNull(eta, "eta");
            this.eta = Optional.ofNullable(eta);
            return this;
        }

        /**
         * The estimated time of arrival according to the carrier.
         */
        public Builder eta(Optional<String> eta) {
            Utils.checkNotNull(eta, "eta");
            this.eta = eta;
            return this;
        }

        /**
         * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
         * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
         */
        public Builder labelFileType(LabelFileTypeEnum labelFileType) {
            Utils.checkNotNull(labelFileType, "labelFileType");
            this.labelFileType = Optional.ofNullable(labelFileType);
            return this;
        }

        /**
         * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
         * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
         */
        public Builder labelFileType(Optional<? extends LabelFileTypeEnum> labelFileType) {
            Utils.checkNotNull(labelFileType, "labelFileType");
            this.labelFileType = labelFileType;
            return this;
        }

        /**
         * A URL pointing directly to the label in the format you've set in your settings. 
         * A value will only be returned if the Transactions has been processed successfully.
         */
        public Builder labelUrl(String labelUrl) {
            Utils.checkNotNull(labelUrl, "labelUrl");
            this.labelUrl = Optional.ofNullable(labelUrl);
            return this;
        }

        /**
         * A URL pointing directly to the label in the format you've set in your settings. 
         * A value will only be returned if the Transactions has been processed successfully.
         */
        public Builder labelUrl(Optional<String> labelUrl) {
            Utils.checkNotNull(labelUrl, "labelUrl");
            this.labelUrl = labelUrl;
            return this;
        }

        public Builder messages(List<ResponseMessage> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        public Builder messages(Optional<? extends List<ResponseMessage>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to 
         * attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to 
         * attach to the object.
         */
        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Date and time of Transaction creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of Transaction creation.
         */
        public Builder objectCreated(Optional<OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given Transaction object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given Transaction object.
         */
        public Builder objectId(Optional<String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the Transaction object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the Transaction object.
         */
        public Builder objectOwner(Optional<String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Indicates the validity of the enclosing object
         */
        public Builder objectState(ObjectStateEnum objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = Optional.ofNullable(objectState);
            return this;
        }

        /**
         * Indicates the validity of the enclosing object
         */
        public Builder objectState(Optional<? extends ObjectStateEnum> objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = objectState;
            return this;
        }

        /**
         * Date and time of last Transaction update.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last Transaction update.
         */
        public Builder objectUpdated(Optional<OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * Object ID of the Parcel object that is being shipped.
         */
        public Builder parcel(String parcel) {
            Utils.checkNotNull(parcel, "parcel");
            this.parcel = Optional.ofNullable(parcel);
            return this;
        }

        /**
         * Object ID of the Parcel object that is being shipped.
         */
        public Builder parcel(Optional<String> parcel) {
            Utils.checkNotNull(parcel, "parcel");
            this.parcel = parcel;
            return this;
        }

        /**
         * A URL pointing directly to the QR code in PNG format. 
         * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
         */
        public Builder qrCodeUrl(String qrCodeUrl) {
            Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
            this.qrCodeUrl = Optional.ofNullable(qrCodeUrl);
            return this;
        }

        /**
         * A URL pointing directly to the QR code in PNG format. 
         * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
         */
        public Builder qrCodeUrl(Optional<String> qrCodeUrl) {
            Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
            this.qrCodeUrl = qrCodeUrl;
            return this;
        }

        /**
         * ID of the Rate object for which a Label has to be obtained.  
         * If you purchase a label by calling the transaction endpoint without a rate (instalabel), 
         * this field will be a simplified Rate object in the Transaction model returned from the POST request.
         * &lt;/br&gt;Note, only rates less than 7 days old can be purchased to ensure up-to-date pricing.
         */
        public Builder rate(TransactionRate rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = Optional.ofNullable(rate);
            return this;
        }

        /**
         * ID of the Rate object for which a Label has to be obtained.  
         * If you purchase a label by calling the transaction endpoint without a rate (instalabel), 
         * this field will be a simplified Rate object in the Transaction model returned from the POST request.
         * &lt;/br&gt;Note, only rates less than 7 days old can be purchased to ensure up-to-date pricing.
         */
        public Builder rate(Optional<? extends TransactionRate> rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }

        /**
         * Indicates the status of the Transaction.
         */
        public Builder status(TransactionStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Indicates the status of the Transaction.
         */
        public Builder status(Optional<? extends TransactionStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }

        /**
         * The carrier-specific tracking number that can be used to track the Shipment. 
         * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
         */
        public Builder trackingNumber(String trackingNumber) {
            Utils.checkNotNull(trackingNumber, "trackingNumber");
            this.trackingNumber = Optional.ofNullable(trackingNumber);
            return this;
        }

        /**
         * The carrier-specific tracking number that can be used to track the Shipment. 
         * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
         */
        public Builder trackingNumber(Optional<String> trackingNumber) {
            Utils.checkNotNull(trackingNumber, "trackingNumber");
            this.trackingNumber = trackingNumber;
            return this;
        }

        /**
         * Indicates the high level status of the shipment.
         */
        public Builder trackingStatus(TrackingStatusEnum trackingStatus) {
            Utils.checkNotNull(trackingStatus, "trackingStatus");
            this.trackingStatus = Optional.ofNullable(trackingStatus);
            return this;
        }

        /**
         * Indicates the high level status of the shipment.
         */
        public Builder trackingStatus(Optional<? extends TrackingStatusEnum> trackingStatus) {
            Utils.checkNotNull(trackingStatus, "trackingStatus");
            this.trackingStatus = trackingStatus;
            return this;
        }

        /**
         * A link to track this item on the carrier-provided tracking website. 
         * A value will only be returned if tracking is available and the carrier provides such a service.
         */
        public Builder trackingUrlProvider(String trackingUrlProvider) {
            Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
            this.trackingUrlProvider = Optional.ofNullable(trackingUrlProvider);
            return this;
        }

        /**
         * A link to track this item on the carrier-provided tracking website. 
         * A value will only be returned if tracking is available and the carrier provides such a service.
         */
        public Builder trackingUrlProvider(Optional<String> trackingUrlProvider) {
            Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
            this.trackingUrlProvider = trackingUrlProvider;
            return this;
        }
        
        public Transaction build() {
            return new Transaction(
                commercialInvoiceUrl,
                createdBy,
                eta,
                labelFileType,
                labelUrl,
                messages,
                metadata,
                objectCreated,
                objectId,
                objectOwner,
                objectState,
                objectUpdated,
                parcel,
                qrCodeUrl,
                rate,
                status,
                test,
                trackingNumber,
                trackingStatus,
                trackingUrlProvider);
        }
    }
}

