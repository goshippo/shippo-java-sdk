/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippoSDK.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippoSDK.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * ObjectInfo - Holds internal state relevant to users.
 */

public class ObjectInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication")
    private Optional<? extends Authentication> authentication;

    @JsonCreator
    public ObjectInfo(
            @JsonProperty("authentication") Optional<? extends Authentication> authentication) {
        Utils.checkNotNull(authentication, "authentication");
        this.authentication = authentication;
    }
    
    public ObjectInfo() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Authentication> authentication() {
        return (Optional<Authentication>) authentication;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjectInfo withAuthentication(Authentication authentication) {
        Utils.checkNotNull(authentication, "authentication");
        this.authentication = Optional.ofNullable(authentication);
        return this;
    }

    public ObjectInfo withAuthentication(Optional<? extends Authentication> authentication) {
        Utils.checkNotNull(authentication, "authentication");
        this.authentication = authentication;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjectInfo other = (ObjectInfo) o;
        return 
            Objects.deepEquals(this.authentication, other.authentication);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authentication);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjectInfo.class,
                "authentication", authentication);
    }
    
    public final static class Builder {
 
        private Optional<? extends Authentication> authentication = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder authentication(Authentication authentication) {
            Utils.checkNotNull(authentication, "authentication");
            this.authentication = Optional.ofNullable(authentication);
            return this;
        }

        public Builder authentication(Optional<? extends Authentication> authentication) {
            Utils.checkNotNull(authentication, "authentication");
            this.authentication = authentication;
            return this;
        }
        
        public ObjectInfo build() {
            return new ObjectInfo(
                authentication);
        }
    }
}

