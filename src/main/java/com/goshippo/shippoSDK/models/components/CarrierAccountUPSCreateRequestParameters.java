/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippoSDK.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippoSDK.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CarrierAccountUPSCreateRequestParameters {

    @JsonProperty("billing_address_city")
    private String billingAddressCity;

    @JsonProperty("billing_address_country_iso2")
    private String billingAddressCountryIso2;

    @JsonProperty("billing_address_state")
    private String billingAddressState;

    @JsonProperty("billing_address_street1")
    private String billingAddressStreet1;

    /**
     * Empty string acceptable for billing_address_street2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address_street2")
    private Optional<String> billingAddressStreet2;

    @JsonProperty("billing_address_zip")
    private String billingAddressZip;

    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<String> company;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_name")
    private Optional<String> fullName;

    /**
     * Needs to be a valid phone number and cannot be null
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * User's pickup address city.
     */
    @JsonProperty("pickup_address_city")
    private String pickupAddressCity;

    /**
     * User's pickup street 1.
     */
    @JsonProperty("pickup_address_country_iso2")
    private String pickupAddressCountryIso2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickup_address_same_as_billing_address")
    private Optional<Boolean> pickupAddressSameAsBillingAddress;

    /**
     * User's pickup address state.
     */
    @JsonProperty("pickup_address_state")
    private String pickupAddressState;

    /**
     * User's pickup address street 1.
     */
    @JsonProperty("pickup_address_street1")
    private String pickupAddressStreet1;

    /**
     * User's pickup street 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pickup_address_street2")
    private Optional<String> pickupAddressStreet2;

    /**
     * User's pickup address zip code.
     */
    @JsonProperty("pickup_address_zip")
    private String pickupAddressZip;

    /**
     * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     */
    @JsonProperty("ups_agreements")
    private boolean upsAgreements;

    @JsonCreator
    public CarrierAccountUPSCreateRequestParameters(
            @JsonProperty("billing_address_city") String billingAddressCity,
            @JsonProperty("billing_address_country_iso2") String billingAddressCountryIso2,
            @JsonProperty("billing_address_state") String billingAddressState,
            @JsonProperty("billing_address_street1") String billingAddressStreet1,
            @JsonProperty("billing_address_street2") Optional<String> billingAddressStreet2,
            @JsonProperty("billing_address_zip") String billingAddressZip,
            @JsonProperty("company") Optional<String> company,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("full_name") Optional<String> fullName,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("pickup_address_city") String pickupAddressCity,
            @JsonProperty("pickup_address_country_iso2") String pickupAddressCountryIso2,
            @JsonProperty("pickup_address_same_as_billing_address") Optional<Boolean> pickupAddressSameAsBillingAddress,
            @JsonProperty("pickup_address_state") String pickupAddressState,
            @JsonProperty("pickup_address_street1") String pickupAddressStreet1,
            @JsonProperty("pickup_address_street2") Optional<String> pickupAddressStreet2,
            @JsonProperty("pickup_address_zip") String pickupAddressZip,
            @JsonProperty("ups_agreements") boolean upsAgreements) {
        Utils.checkNotNull(billingAddressCity, "billingAddressCity");
        Utils.checkNotNull(billingAddressCountryIso2, "billingAddressCountryIso2");
        Utils.checkNotNull(billingAddressState, "billingAddressState");
        Utils.checkNotNull(billingAddressStreet1, "billingAddressStreet1");
        Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
        Utils.checkNotNull(billingAddressZip, "billingAddressZip");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(fullName, "fullName");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(pickupAddressCity, "pickupAddressCity");
        Utils.checkNotNull(pickupAddressCountryIso2, "pickupAddressCountryIso2");
        Utils.checkNotNull(pickupAddressSameAsBillingAddress, "pickupAddressSameAsBillingAddress");
        Utils.checkNotNull(pickupAddressState, "pickupAddressState");
        Utils.checkNotNull(pickupAddressStreet1, "pickupAddressStreet1");
        Utils.checkNotNull(pickupAddressStreet2, "pickupAddressStreet2");
        Utils.checkNotNull(pickupAddressZip, "pickupAddressZip");
        Utils.checkNotNull(upsAgreements, "upsAgreements");
        this.billingAddressCity = billingAddressCity;
        this.billingAddressCountryIso2 = billingAddressCountryIso2;
        this.billingAddressState = billingAddressState;
        this.billingAddressStreet1 = billingAddressStreet1;
        this.billingAddressStreet2 = billingAddressStreet2;
        this.billingAddressZip = billingAddressZip;
        this.company = company;
        this.email = email;
        this.fullName = fullName;
        this.phone = phone;
        this.pickupAddressCity = pickupAddressCity;
        this.pickupAddressCountryIso2 = pickupAddressCountryIso2;
        this.pickupAddressSameAsBillingAddress = pickupAddressSameAsBillingAddress;
        this.pickupAddressState = pickupAddressState;
        this.pickupAddressStreet1 = pickupAddressStreet1;
        this.pickupAddressStreet2 = pickupAddressStreet2;
        this.pickupAddressZip = pickupAddressZip;
        this.upsAgreements = upsAgreements;
    }
    
    public CarrierAccountUPSCreateRequestParameters(
            String billingAddressCity,
            String billingAddressCountryIso2,
            String billingAddressState,
            String billingAddressStreet1,
            String billingAddressZip,
            String pickupAddressCity,
            String pickupAddressCountryIso2,
            String pickupAddressState,
            String pickupAddressStreet1,
            String pickupAddressZip,
            boolean upsAgreements) {
        this(billingAddressCity, billingAddressCountryIso2, billingAddressState, billingAddressStreet1, Optional.empty(), billingAddressZip, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), pickupAddressCity, pickupAddressCountryIso2, Optional.empty(), pickupAddressState, pickupAddressStreet1, Optional.empty(), pickupAddressZip, upsAgreements);
    }

    @JsonIgnore
    public String billingAddressCity() {
        return billingAddressCity;
    }

    @JsonIgnore
    public String billingAddressCountryIso2() {
        return billingAddressCountryIso2;
    }

    @JsonIgnore
    public String billingAddressState() {
        return billingAddressState;
    }

    @JsonIgnore
    public String billingAddressStreet1() {
        return billingAddressStreet1;
    }

    /**
     * Empty string acceptable for billing_address_street2
     */
    @JsonIgnore
    public Optional<String> billingAddressStreet2() {
        return billingAddressStreet2;
    }

    @JsonIgnore
    public String billingAddressZip() {
        return billingAddressZip;
    }

    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    @JsonIgnore
    public Optional<String> company() {
        return company;
    }

    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    @JsonIgnore
    public Optional<String> fullName() {
        return fullName;
    }

    /**
     * Needs to be a valid phone number and cannot be null
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * User's pickup address city.
     */
    @JsonIgnore
    public String pickupAddressCity() {
        return pickupAddressCity;
    }

    /**
     * User's pickup street 1.
     */
    @JsonIgnore
    public String pickupAddressCountryIso2() {
        return pickupAddressCountryIso2;
    }

    @JsonIgnore
    public Optional<Boolean> pickupAddressSameAsBillingAddress() {
        return pickupAddressSameAsBillingAddress;
    }

    /**
     * User's pickup address state.
     */
    @JsonIgnore
    public String pickupAddressState() {
        return pickupAddressState;
    }

    /**
     * User's pickup address street 1.
     */
    @JsonIgnore
    public String pickupAddressStreet1() {
        return pickupAddressStreet1;
    }

    /**
     * User's pickup street 2.
     */
    @JsonIgnore
    public Optional<String> pickupAddressStreet2() {
        return pickupAddressStreet2;
    }

    /**
     * User's pickup address zip code.
     */
    @JsonIgnore
    public String pickupAddressZip() {
        return pickupAddressZip;
    }

    /**
     * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     */
    @JsonIgnore
    public boolean upsAgreements() {
        return upsAgreements;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CarrierAccountUPSCreateRequestParameters withBillingAddressCity(String billingAddressCity) {
        Utils.checkNotNull(billingAddressCity, "billingAddressCity");
        this.billingAddressCity = billingAddressCity;
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withBillingAddressCountryIso2(String billingAddressCountryIso2) {
        Utils.checkNotNull(billingAddressCountryIso2, "billingAddressCountryIso2");
        this.billingAddressCountryIso2 = billingAddressCountryIso2;
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withBillingAddressState(String billingAddressState) {
        Utils.checkNotNull(billingAddressState, "billingAddressState");
        this.billingAddressState = billingAddressState;
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withBillingAddressStreet1(String billingAddressStreet1) {
        Utils.checkNotNull(billingAddressStreet1, "billingAddressStreet1");
        this.billingAddressStreet1 = billingAddressStreet1;
        return this;
    }

    /**
     * Empty string acceptable for billing_address_street2
     */
    public CarrierAccountUPSCreateRequestParameters withBillingAddressStreet2(String billingAddressStreet2) {
        Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
        this.billingAddressStreet2 = Optional.ofNullable(billingAddressStreet2);
        return this;
    }

    /**
     * Empty string acceptable for billing_address_street2
     */
    public CarrierAccountUPSCreateRequestParameters withBillingAddressStreet2(Optional<String> billingAddressStreet2) {
        Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
        this.billingAddressStreet2 = billingAddressStreet2;
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withBillingAddressZip(String billingAddressZip) {
        Utils.checkNotNull(billingAddressZip, "billingAddressZip");
        this.billingAddressZip = billingAddressZip;
        return this;
    }

    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    public CarrierAccountUPSCreateRequestParameters withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    public CarrierAccountUPSCreateRequestParameters withCompany(Optional<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withFullName(String fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = Optional.ofNullable(fullName);
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withFullName(Optional<String> fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = fullName;
        return this;
    }

    /**
     * Needs to be a valid phone number and cannot be null
     */
    public CarrierAccountUPSCreateRequestParameters withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * Needs to be a valid phone number and cannot be null
     */
    public CarrierAccountUPSCreateRequestParameters withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * User's pickup address city.
     */
    public CarrierAccountUPSCreateRequestParameters withPickupAddressCity(String pickupAddressCity) {
        Utils.checkNotNull(pickupAddressCity, "pickupAddressCity");
        this.pickupAddressCity = pickupAddressCity;
        return this;
    }

    /**
     * User's pickup street 1.
     */
    public CarrierAccountUPSCreateRequestParameters withPickupAddressCountryIso2(String pickupAddressCountryIso2) {
        Utils.checkNotNull(pickupAddressCountryIso2, "pickupAddressCountryIso2");
        this.pickupAddressCountryIso2 = pickupAddressCountryIso2;
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withPickupAddressSameAsBillingAddress(boolean pickupAddressSameAsBillingAddress) {
        Utils.checkNotNull(pickupAddressSameAsBillingAddress, "pickupAddressSameAsBillingAddress");
        this.pickupAddressSameAsBillingAddress = Optional.ofNullable(pickupAddressSameAsBillingAddress);
        return this;
    }

    public CarrierAccountUPSCreateRequestParameters withPickupAddressSameAsBillingAddress(Optional<Boolean> pickupAddressSameAsBillingAddress) {
        Utils.checkNotNull(pickupAddressSameAsBillingAddress, "pickupAddressSameAsBillingAddress");
        this.pickupAddressSameAsBillingAddress = pickupAddressSameAsBillingAddress;
        return this;
    }

    /**
     * User's pickup address state.
     */
    public CarrierAccountUPSCreateRequestParameters withPickupAddressState(String pickupAddressState) {
        Utils.checkNotNull(pickupAddressState, "pickupAddressState");
        this.pickupAddressState = pickupAddressState;
        return this;
    }

    /**
     * User's pickup address street 1.
     */
    public CarrierAccountUPSCreateRequestParameters withPickupAddressStreet1(String pickupAddressStreet1) {
        Utils.checkNotNull(pickupAddressStreet1, "pickupAddressStreet1");
        this.pickupAddressStreet1 = pickupAddressStreet1;
        return this;
    }

    /**
     * User's pickup street 2.
     */
    public CarrierAccountUPSCreateRequestParameters withPickupAddressStreet2(String pickupAddressStreet2) {
        Utils.checkNotNull(pickupAddressStreet2, "pickupAddressStreet2");
        this.pickupAddressStreet2 = Optional.ofNullable(pickupAddressStreet2);
        return this;
    }

    /**
     * User's pickup street 2.
     */
    public CarrierAccountUPSCreateRequestParameters withPickupAddressStreet2(Optional<String> pickupAddressStreet2) {
        Utils.checkNotNull(pickupAddressStreet2, "pickupAddressStreet2");
        this.pickupAddressStreet2 = pickupAddressStreet2;
        return this;
    }

    /**
     * User's pickup address zip code.
     */
    public CarrierAccountUPSCreateRequestParameters withPickupAddressZip(String pickupAddressZip) {
        Utils.checkNotNull(pickupAddressZip, "pickupAddressZip");
        this.pickupAddressZip = pickupAddressZip;
        return this;
    }

    /**
     * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     */
    public CarrierAccountUPSCreateRequestParameters withUpsAgreements(boolean upsAgreements) {
        Utils.checkNotNull(upsAgreements, "upsAgreements");
        this.upsAgreements = upsAgreements;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CarrierAccountUPSCreateRequestParameters other = (CarrierAccountUPSCreateRequestParameters) o;
        return 
            Objects.deepEquals(this.billingAddressCity, other.billingAddressCity) &&
            Objects.deepEquals(this.billingAddressCountryIso2, other.billingAddressCountryIso2) &&
            Objects.deepEquals(this.billingAddressState, other.billingAddressState) &&
            Objects.deepEquals(this.billingAddressStreet1, other.billingAddressStreet1) &&
            Objects.deepEquals(this.billingAddressStreet2, other.billingAddressStreet2) &&
            Objects.deepEquals(this.billingAddressZip, other.billingAddressZip) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.fullName, other.fullName) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.pickupAddressCity, other.pickupAddressCity) &&
            Objects.deepEquals(this.pickupAddressCountryIso2, other.pickupAddressCountryIso2) &&
            Objects.deepEquals(this.pickupAddressSameAsBillingAddress, other.pickupAddressSameAsBillingAddress) &&
            Objects.deepEquals(this.pickupAddressState, other.pickupAddressState) &&
            Objects.deepEquals(this.pickupAddressStreet1, other.pickupAddressStreet1) &&
            Objects.deepEquals(this.pickupAddressStreet2, other.pickupAddressStreet2) &&
            Objects.deepEquals(this.pickupAddressZip, other.pickupAddressZip) &&
            Objects.deepEquals(this.upsAgreements, other.upsAgreements);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            billingAddressCity,
            billingAddressCountryIso2,
            billingAddressState,
            billingAddressStreet1,
            billingAddressStreet2,
            billingAddressZip,
            company,
            email,
            fullName,
            phone,
            pickupAddressCity,
            pickupAddressCountryIso2,
            pickupAddressSameAsBillingAddress,
            pickupAddressState,
            pickupAddressStreet1,
            pickupAddressStreet2,
            pickupAddressZip,
            upsAgreements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CarrierAccountUPSCreateRequestParameters.class,
                "billingAddressCity", billingAddressCity,
                "billingAddressCountryIso2", billingAddressCountryIso2,
                "billingAddressState", billingAddressState,
                "billingAddressStreet1", billingAddressStreet1,
                "billingAddressStreet2", billingAddressStreet2,
                "billingAddressZip", billingAddressZip,
                "company", company,
                "email", email,
                "fullName", fullName,
                "phone", phone,
                "pickupAddressCity", pickupAddressCity,
                "pickupAddressCountryIso2", pickupAddressCountryIso2,
                "pickupAddressSameAsBillingAddress", pickupAddressSameAsBillingAddress,
                "pickupAddressState", pickupAddressState,
                "pickupAddressStreet1", pickupAddressStreet1,
                "pickupAddressStreet2", pickupAddressStreet2,
                "pickupAddressZip", pickupAddressZip,
                "upsAgreements", upsAgreements);
    }
    
    public final static class Builder {
 
        private String billingAddressCity;
 
        private String billingAddressCountryIso2;
 
        private String billingAddressState;
 
        private String billingAddressStreet1;
 
        private Optional<String> billingAddressStreet2 = Optional.empty();
 
        private String billingAddressZip;
 
        private Optional<String> company = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<String> fullName = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private String pickupAddressCity;
 
        private String pickupAddressCountryIso2;
 
        private Optional<Boolean> pickupAddressSameAsBillingAddress = Optional.empty();
 
        private String pickupAddressState;
 
        private String pickupAddressStreet1;
 
        private Optional<String> pickupAddressStreet2 = Optional.empty();
 
        private String pickupAddressZip;
 
        private Boolean upsAgreements;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder billingAddressCity(String billingAddressCity) {
            Utils.checkNotNull(billingAddressCity, "billingAddressCity");
            this.billingAddressCity = billingAddressCity;
            return this;
        }

        public Builder billingAddressCountryIso2(String billingAddressCountryIso2) {
            Utils.checkNotNull(billingAddressCountryIso2, "billingAddressCountryIso2");
            this.billingAddressCountryIso2 = billingAddressCountryIso2;
            return this;
        }

        public Builder billingAddressState(String billingAddressState) {
            Utils.checkNotNull(billingAddressState, "billingAddressState");
            this.billingAddressState = billingAddressState;
            return this;
        }

        public Builder billingAddressStreet1(String billingAddressStreet1) {
            Utils.checkNotNull(billingAddressStreet1, "billingAddressStreet1");
            this.billingAddressStreet1 = billingAddressStreet1;
            return this;
        }

        /**
         * Empty string acceptable for billing_address_street2
         */
        public Builder billingAddressStreet2(String billingAddressStreet2) {
            Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
            this.billingAddressStreet2 = Optional.ofNullable(billingAddressStreet2);
            return this;
        }

        /**
         * Empty string acceptable for billing_address_street2
         */
        public Builder billingAddressStreet2(Optional<String> billingAddressStreet2) {
            Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
            this.billingAddressStreet2 = billingAddressStreet2;
            return this;
        }

        public Builder billingAddressZip(String billingAddressZip) {
            Utils.checkNotNull(billingAddressZip, "billingAddressZip");
            this.billingAddressZip = billingAddressZip;
            return this;
        }

        /**
         * Company name. Full name is acceptable in this field if the user has no company name
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * Company name. Full name is acceptable in this field if the user has no company name
         */
        public Builder company(Optional<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder fullName(String fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = Optional.ofNullable(fullName);
            return this;
        }

        public Builder fullName(Optional<String> fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = fullName;
            return this;
        }

        /**
         * Needs to be a valid phone number and cannot be null
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Needs to be a valid phone number and cannot be null
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * User's pickup address city.
         */
        public Builder pickupAddressCity(String pickupAddressCity) {
            Utils.checkNotNull(pickupAddressCity, "pickupAddressCity");
            this.pickupAddressCity = pickupAddressCity;
            return this;
        }

        /**
         * User's pickup street 1.
         */
        public Builder pickupAddressCountryIso2(String pickupAddressCountryIso2) {
            Utils.checkNotNull(pickupAddressCountryIso2, "pickupAddressCountryIso2");
            this.pickupAddressCountryIso2 = pickupAddressCountryIso2;
            return this;
        }

        public Builder pickupAddressSameAsBillingAddress(boolean pickupAddressSameAsBillingAddress) {
            Utils.checkNotNull(pickupAddressSameAsBillingAddress, "pickupAddressSameAsBillingAddress");
            this.pickupAddressSameAsBillingAddress = Optional.ofNullable(pickupAddressSameAsBillingAddress);
            return this;
        }

        public Builder pickupAddressSameAsBillingAddress(Optional<Boolean> pickupAddressSameAsBillingAddress) {
            Utils.checkNotNull(pickupAddressSameAsBillingAddress, "pickupAddressSameAsBillingAddress");
            this.pickupAddressSameAsBillingAddress = pickupAddressSameAsBillingAddress;
            return this;
        }

        /**
         * User's pickup address state.
         */
        public Builder pickupAddressState(String pickupAddressState) {
            Utils.checkNotNull(pickupAddressState, "pickupAddressState");
            this.pickupAddressState = pickupAddressState;
            return this;
        }

        /**
         * User's pickup address street 1.
         */
        public Builder pickupAddressStreet1(String pickupAddressStreet1) {
            Utils.checkNotNull(pickupAddressStreet1, "pickupAddressStreet1");
            this.pickupAddressStreet1 = pickupAddressStreet1;
            return this;
        }

        /**
         * User's pickup street 2.
         */
        public Builder pickupAddressStreet2(String pickupAddressStreet2) {
            Utils.checkNotNull(pickupAddressStreet2, "pickupAddressStreet2");
            this.pickupAddressStreet2 = Optional.ofNullable(pickupAddressStreet2);
            return this;
        }

        /**
         * User's pickup street 2.
         */
        public Builder pickupAddressStreet2(Optional<String> pickupAddressStreet2) {
            Utils.checkNotNull(pickupAddressStreet2, "pickupAddressStreet2");
            this.pickupAddressStreet2 = pickupAddressStreet2;
            return this;
        }

        /**
         * User's pickup address zip code.
         */
        public Builder pickupAddressZip(String pickupAddressZip) {
            Utils.checkNotNull(pickupAddressZip, "pickupAddressZip");
            this.pickupAddressZip = pickupAddressZip;
            return this;
        }

        /**
         * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
         */
        public Builder upsAgreements(boolean upsAgreements) {
            Utils.checkNotNull(upsAgreements, "upsAgreements");
            this.upsAgreements = upsAgreements;
            return this;
        }
        
        public CarrierAccountUPSCreateRequestParameters build() {
            return new CarrierAccountUPSCreateRequestParameters(
                billingAddressCity,
                billingAddressCountryIso2,
                billingAddressState,
                billingAddressStreet1,
                billingAddressStreet2,
                billingAddressZip,
                company,
                email,
                fullName,
                phone,
                pickupAddressCity,
                pickupAddressCountryIso2,
                pickupAddressSameAsBillingAddress,
                pickupAddressState,
                pickupAddressStreet1,
                pickupAddressStreet2,
                pickupAddressZip,
                upsAgreements);
        }
    }
}

