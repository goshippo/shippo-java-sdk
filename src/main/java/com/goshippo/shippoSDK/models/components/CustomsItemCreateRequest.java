/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippoSDK.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippoSDK.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CustomsItemCreateRequest {

    /**
     * Text description of your item.
     */
    @JsonProperty("description")
    private String description;

    /**
     * Export Control Classification Number, required on some exports from the United States.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eccn_ear99")
    private Optional<String> eccnEar99;

    /**
     * The unit used for weight.
     */
    @JsonProperty("mass_unit")
    private WeightUnitEnum massUnit;

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    /**
     * Total weight of this item, i.e. quantity * weight per item.
     */
    @JsonProperty("net_weight")
    private String netWeight;

    /**
     * Country of origin of the item. Example: `US` or `DE`. 
     * All accepted values can be found on the &lt;a href="http://www.iso.org/" target="_blank"&gt;Official ISO Website&lt;/a&gt;.
     */
    @JsonProperty("origin_country")
    private String originCountry;

    /**
     * Quantity of this item in the shipment you send.  Must be greater than 0.
     */
    @JsonProperty("quantity")
    private long quantity;

    /**
     * SKU code of the item, which is required by some carriers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku_code")
    private Optional<String> skuCode;

    /**
     * HS code of the item, which is required by some carriers. If `tariff_number` is not provided, `hs_code` will be used.  If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 50 character limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hs_code")
    private Optional<String> hsCode;

    /**
     * The tariff number of the item. If `tariff_number` is not provided, `hs_code` will be used. If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 12 character limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tariff_number")
    private Optional<String> tariffNumber;

    /**
     * Total value of this item, i.e. quantity * value per item.
     */
    @JsonProperty("value_amount")
    private String valueAmount;

    /**
     * Currency used for value_amount. The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; 
     * currency codes are used, e.g.  `USD` or `EUR`.
     */
    @JsonProperty("value_currency")
    private String valueCurrency;

    @JsonCreator
    public CustomsItemCreateRequest(
            @JsonProperty("description") String description,
            @JsonProperty("eccn_ear99") Optional<String> eccnEar99,
            @JsonProperty("mass_unit") WeightUnitEnum massUnit,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("net_weight") String netWeight,
            @JsonProperty("origin_country") String originCountry,
            @JsonProperty("quantity") long quantity,
            @JsonProperty("sku_code") Optional<String> skuCode,
            @JsonProperty("hs_code") Optional<String> hsCode,
            @JsonProperty("tariff_number") Optional<String> tariffNumber,
            @JsonProperty("value_amount") String valueAmount,
            @JsonProperty("value_currency") String valueCurrency) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(eccnEar99, "eccnEar99");
        Utils.checkNotNull(massUnit, "massUnit");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(netWeight, "netWeight");
        Utils.checkNotNull(originCountry, "originCountry");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(skuCode, "skuCode");
        Utils.checkNotNull(hsCode, "hsCode");
        Utils.checkNotNull(tariffNumber, "tariffNumber");
        Utils.checkNotNull(valueAmount, "valueAmount");
        Utils.checkNotNull(valueCurrency, "valueCurrency");
        this.description = description;
        this.eccnEar99 = eccnEar99;
        this.massUnit = massUnit;
        this.metadata = metadata;
        this.netWeight = netWeight;
        this.originCountry = originCountry;
        this.quantity = quantity;
        this.skuCode = skuCode;
        this.hsCode = hsCode;
        this.tariffNumber = tariffNumber;
        this.valueAmount = valueAmount;
        this.valueCurrency = valueCurrency;
    }
    
    public CustomsItemCreateRequest(
            String description,
            WeightUnitEnum massUnit,
            String netWeight,
            String originCountry,
            long quantity,
            String valueAmount,
            String valueCurrency) {
        this(description, Optional.empty(), massUnit, Optional.empty(), netWeight, originCountry, quantity, Optional.empty(), Optional.empty(), Optional.empty(), valueAmount, valueCurrency);
    }

    /**
     * Text description of your item.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * Export Control Classification Number, required on some exports from the United States.
     */
    @JsonIgnore
    public Optional<String> eccnEar99() {
        return eccnEar99;
    }

    /**
     * The unit used for weight.
     */
    @JsonIgnore
    public WeightUnitEnum massUnit() {
        return massUnit;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    /**
     * Total weight of this item, i.e. quantity * weight per item.
     */
    @JsonIgnore
    public String netWeight() {
        return netWeight;
    }

    /**
     * Country of origin of the item. Example: `US` or `DE`. 
     * All accepted values can be found on the &lt;a href="http://www.iso.org/" target="_blank"&gt;Official ISO Website&lt;/a&gt;.
     */
    @JsonIgnore
    public String originCountry() {
        return originCountry;
    }

    /**
     * Quantity of this item in the shipment you send.  Must be greater than 0.
     */
    @JsonIgnore
    public long quantity() {
        return quantity;
    }

    /**
     * SKU code of the item, which is required by some carriers.
     */
    @JsonIgnore
    public Optional<String> skuCode() {
        return skuCode;
    }

    /**
     * HS code of the item, which is required by some carriers. If `tariff_number` is not provided, `hs_code` will be used.  If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 50 character limit.
     */
    @JsonIgnore
    public Optional<String> hsCode() {
        return hsCode;
    }

    /**
     * The tariff number of the item. If `tariff_number` is not provided, `hs_code` will be used. If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 12 character limit.
     */
    @JsonIgnore
    public Optional<String> tariffNumber() {
        return tariffNumber;
    }

    /**
     * Total value of this item, i.e. quantity * value per item.
     */
    @JsonIgnore
    public String valueAmount() {
        return valueAmount;
    }

    /**
     * Currency used for value_amount. The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; 
     * currency codes are used, e.g.  `USD` or `EUR`.
     */
    @JsonIgnore
    public String valueCurrency() {
        return valueCurrency;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Text description of your item.
     */
    public CustomsItemCreateRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Export Control Classification Number, required on some exports from the United States.
     */
    public CustomsItemCreateRequest withEccnEar99(String eccnEar99) {
        Utils.checkNotNull(eccnEar99, "eccnEar99");
        this.eccnEar99 = Optional.ofNullable(eccnEar99);
        return this;
    }

    /**
     * Export Control Classification Number, required on some exports from the United States.
     */
    public CustomsItemCreateRequest withEccnEar99(Optional<String> eccnEar99) {
        Utils.checkNotNull(eccnEar99, "eccnEar99");
        this.eccnEar99 = eccnEar99;
        return this;
    }

    /**
     * The unit used for weight.
     */
    public CustomsItemCreateRequest withMassUnit(WeightUnitEnum massUnit) {
        Utils.checkNotNull(massUnit, "massUnit");
        this.massUnit = massUnit;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    public CustomsItemCreateRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    public CustomsItemCreateRequest withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Total weight of this item, i.e. quantity * weight per item.
     */
    public CustomsItemCreateRequest withNetWeight(String netWeight) {
        Utils.checkNotNull(netWeight, "netWeight");
        this.netWeight = netWeight;
        return this;
    }

    /**
     * Country of origin of the item. Example: `US` or `DE`. 
     * All accepted values can be found on the &lt;a href="http://www.iso.org/" target="_blank"&gt;Official ISO Website&lt;/a&gt;.
     */
    public CustomsItemCreateRequest withOriginCountry(String originCountry) {
        Utils.checkNotNull(originCountry, "originCountry");
        this.originCountry = originCountry;
        return this;
    }

    /**
     * Quantity of this item in the shipment you send.  Must be greater than 0.
     */
    public CustomsItemCreateRequest withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * SKU code of the item, which is required by some carriers.
     */
    public CustomsItemCreateRequest withSkuCode(String skuCode) {
        Utils.checkNotNull(skuCode, "skuCode");
        this.skuCode = Optional.ofNullable(skuCode);
        return this;
    }

    /**
     * SKU code of the item, which is required by some carriers.
     */
    public CustomsItemCreateRequest withSkuCode(Optional<String> skuCode) {
        Utils.checkNotNull(skuCode, "skuCode");
        this.skuCode = skuCode;
        return this;
    }

    /**
     * HS code of the item, which is required by some carriers. If `tariff_number` is not provided, `hs_code` will be used.  If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 50 character limit.
     */
    public CustomsItemCreateRequest withHsCode(String hsCode) {
        Utils.checkNotNull(hsCode, "hsCode");
        this.hsCode = Optional.ofNullable(hsCode);
        return this;
    }

    /**
     * HS code of the item, which is required by some carriers. If `tariff_number` is not provided, `hs_code` will be used.  If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 50 character limit.
     */
    public CustomsItemCreateRequest withHsCode(Optional<String> hsCode) {
        Utils.checkNotNull(hsCode, "hsCode");
        this.hsCode = hsCode;
        return this;
    }

    /**
     * The tariff number of the item. If `tariff_number` is not provided, `hs_code` will be used. If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 12 character limit.
     */
    public CustomsItemCreateRequest withTariffNumber(String tariffNumber) {
        Utils.checkNotNull(tariffNumber, "tariffNumber");
        this.tariffNumber = Optional.ofNullable(tariffNumber);
        return this;
    }

    /**
     * The tariff number of the item. If `tariff_number` is not provided, `hs_code` will be used. If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 12 character limit.
     */
    public CustomsItemCreateRequest withTariffNumber(Optional<String> tariffNumber) {
        Utils.checkNotNull(tariffNumber, "tariffNumber");
        this.tariffNumber = tariffNumber;
        return this;
    }

    /**
     * Total value of this item, i.e. quantity * value per item.
     */
    public CustomsItemCreateRequest withValueAmount(String valueAmount) {
        Utils.checkNotNull(valueAmount, "valueAmount");
        this.valueAmount = valueAmount;
        return this;
    }

    /**
     * Currency used for value_amount. The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; 
     * currency codes are used, e.g.  `USD` or `EUR`.
     */
    public CustomsItemCreateRequest withValueCurrency(String valueCurrency) {
        Utils.checkNotNull(valueCurrency, "valueCurrency");
        this.valueCurrency = valueCurrency;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomsItemCreateRequest other = (CustomsItemCreateRequest) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.eccnEar99, other.eccnEar99) &&
            Objects.deepEquals(this.massUnit, other.massUnit) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.netWeight, other.netWeight) &&
            Objects.deepEquals(this.originCountry, other.originCountry) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.skuCode, other.skuCode) &&
            Objects.deepEquals(this.hsCode, other.hsCode) &&
            Objects.deepEquals(this.tariffNumber, other.tariffNumber) &&
            Objects.deepEquals(this.valueAmount, other.valueAmount) &&
            Objects.deepEquals(this.valueCurrency, other.valueCurrency);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            eccnEar99,
            massUnit,
            metadata,
            netWeight,
            originCountry,
            quantity,
            skuCode,
            hsCode,
            tariffNumber,
            valueAmount,
            valueCurrency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomsItemCreateRequest.class,
                "description", description,
                "eccnEar99", eccnEar99,
                "massUnit", massUnit,
                "metadata", metadata,
                "netWeight", netWeight,
                "originCountry", originCountry,
                "quantity", quantity,
                "skuCode", skuCode,
                "hsCode", hsCode,
                "tariffNumber", tariffNumber,
                "valueAmount", valueAmount,
                "valueCurrency", valueCurrency);
    }
    
    public final static class Builder {
 
        private String description;
 
        private Optional<String> eccnEar99 = Optional.empty();
 
        private WeightUnitEnum massUnit;
 
        private Optional<String> metadata = Optional.empty();
 
        private String netWeight;
 
        private String originCountry;
 
        private Long quantity;
 
        private Optional<String> skuCode = Optional.empty();
 
        private Optional<String> hsCode = Optional.empty();
 
        private Optional<String> tariffNumber = Optional.empty();
 
        private String valueAmount;
 
        private String valueCurrency;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Text description of your item.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Export Control Classification Number, required on some exports from the United States.
         */
        public Builder eccnEar99(String eccnEar99) {
            Utils.checkNotNull(eccnEar99, "eccnEar99");
            this.eccnEar99 = Optional.ofNullable(eccnEar99);
            return this;
        }

        /**
         * Export Control Classification Number, required on some exports from the United States.
         */
        public Builder eccnEar99(Optional<String> eccnEar99) {
            Utils.checkNotNull(eccnEar99, "eccnEar99");
            this.eccnEar99 = eccnEar99;
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder massUnit(WeightUnitEnum massUnit) {
            Utils.checkNotNull(massUnit, "massUnit");
            this.massUnit = massUnit;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you 
         * want to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you 
         * want to attach to the object.
         */
        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Total weight of this item, i.e. quantity * weight per item.
         */
        public Builder netWeight(String netWeight) {
            Utils.checkNotNull(netWeight, "netWeight");
            this.netWeight = netWeight;
            return this;
        }

        /**
         * Country of origin of the item. Example: `US` or `DE`. 
         * All accepted values can be found on the &lt;a href="http://www.iso.org/" target="_blank"&gt;Official ISO Website&lt;/a&gt;.
         */
        public Builder originCountry(String originCountry) {
            Utils.checkNotNull(originCountry, "originCountry");
            this.originCountry = originCountry;
            return this;
        }

        /**
         * Quantity of this item in the shipment you send.  Must be greater than 0.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * SKU code of the item, which is required by some carriers.
         */
        public Builder skuCode(String skuCode) {
            Utils.checkNotNull(skuCode, "skuCode");
            this.skuCode = Optional.ofNullable(skuCode);
            return this;
        }

        /**
         * SKU code of the item, which is required by some carriers.
         */
        public Builder skuCode(Optional<String> skuCode) {
            Utils.checkNotNull(skuCode, "skuCode");
            this.skuCode = skuCode;
            return this;
        }

        /**
         * HS code of the item, which is required by some carriers. If `tariff_number` is not provided, `hs_code` will be used.  If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 50 character limit.
         */
        public Builder hsCode(String hsCode) {
            Utils.checkNotNull(hsCode, "hsCode");
            this.hsCode = Optional.ofNullable(hsCode);
            return this;
        }

        /**
         * HS code of the item, which is required by some carriers. If `tariff_number` is not provided, `hs_code` will be used.  If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 50 character limit.
         */
        public Builder hsCode(Optional<String> hsCode) {
            Utils.checkNotNull(hsCode, "hsCode");
            this.hsCode = hsCode;
            return this;
        }

        /**
         * The tariff number of the item. If `tariff_number` is not provided, `hs_code` will be used. If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 12 character limit.
         */
        public Builder tariffNumber(String tariffNumber) {
            Utils.checkNotNull(tariffNumber, "tariffNumber");
            this.tariffNumber = Optional.ofNullable(tariffNumber);
            return this;
        }

        /**
         * The tariff number of the item. If `tariff_number` is not provided, `hs_code` will be used. If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 12 character limit.
         */
        public Builder tariffNumber(Optional<String> tariffNumber) {
            Utils.checkNotNull(tariffNumber, "tariffNumber");
            this.tariffNumber = tariffNumber;
            return this;
        }

        /**
         * Total value of this item, i.e. quantity * value per item.
         */
        public Builder valueAmount(String valueAmount) {
            Utils.checkNotNull(valueAmount, "valueAmount");
            this.valueAmount = valueAmount;
            return this;
        }

        /**
         * Currency used for value_amount. The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; 
         * currency codes are used, e.g.  `USD` or `EUR`.
         */
        public Builder valueCurrency(String valueCurrency) {
            Utils.checkNotNull(valueCurrency, "valueCurrency");
            this.valueCurrency = valueCurrency;
            return this;
        }
        
        public CustomsItemCreateRequest build() {
            return new CustomsItemCreateRequest(
                description,
                eccnEar99,
                massUnit,
                metadata,
                netWeight,
                originCountry,
                quantity,
                skuCode,
                hsCode,
                tariffNumber,
                valueAmount,
                valueCurrency);
        }
    }
}

