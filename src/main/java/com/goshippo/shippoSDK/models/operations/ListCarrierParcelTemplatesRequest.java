/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippoSDK.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.goshippo.shippoSDK.utils.SpeakeasyMetadata;
import com.goshippo.shippoSDK.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ListCarrierParcelTemplatesRequest {

    /**
     * filter by user or enabled
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include")
    private Optional<? extends Include> include;

    /**
     * filter by specific carrier
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=carrier")
    private Optional<String> carrier;

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=SHIPPO-API-VERSION")
    private Optional<String> shippoApiVersion;

    @JsonCreator
    public ListCarrierParcelTemplatesRequest(
            Optional<? extends Include> include,
            Optional<String> carrier,
            Optional<String> shippoApiVersion) {
        Utils.checkNotNull(include, "include");
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.include = include;
        this.carrier = carrier;
        this.shippoApiVersion = shippoApiVersion;
    }
    
    public ListCarrierParcelTemplatesRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * filter by user or enabled
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Include> include() {
        return (Optional<Include>) include;
    }

    /**
     * filter by specific carrier
     */
    @JsonIgnore
    public Optional<String> carrier() {
        return carrier;
    }

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    @JsonIgnore
    public Optional<String> shippoApiVersion() {
        return shippoApiVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * filter by user or enabled
     */
    public ListCarrierParcelTemplatesRequest withInclude(Include include) {
        Utils.checkNotNull(include, "include");
        this.include = Optional.ofNullable(include);
        return this;
    }

    /**
     * filter by user or enabled
     */
    public ListCarrierParcelTemplatesRequest withInclude(Optional<? extends Include> include) {
        Utils.checkNotNull(include, "include");
        this.include = include;
        return this;
    }

    /**
     * filter by specific carrier
     */
    public ListCarrierParcelTemplatesRequest withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = Optional.ofNullable(carrier);
        return this;
    }

    /**
     * filter by specific carrier
     */
    public ListCarrierParcelTemplatesRequest withCarrier(Optional<String> carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    public ListCarrierParcelTemplatesRequest withShippoApiVersion(String shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
        return this;
    }

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    public ListCarrierParcelTemplatesRequest withShippoApiVersion(Optional<String> shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = shippoApiVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCarrierParcelTemplatesRequest other = (ListCarrierParcelTemplatesRequest) o;
        return 
            Objects.deepEquals(this.include, other.include) &&
            Objects.deepEquals(this.carrier, other.carrier) &&
            Objects.deepEquals(this.shippoApiVersion, other.shippoApiVersion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            include,
            carrier,
            shippoApiVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCarrierParcelTemplatesRequest.class,
                "include", include,
                "carrier", carrier,
                "shippoApiVersion", shippoApiVersion);
    }
    
    public final static class Builder {
 
        private Optional<? extends Include> include = Optional.empty();
 
        private Optional<String> carrier = Optional.empty();
 
        private Optional<String> shippoApiVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * filter by user or enabled
         */
        public Builder include(Include include) {
            Utils.checkNotNull(include, "include");
            this.include = Optional.ofNullable(include);
            return this;
        }

        /**
         * filter by user or enabled
         */
        public Builder include(Optional<? extends Include> include) {
            Utils.checkNotNull(include, "include");
            this.include = include;
            return this;
        }

        /**
         * filter by specific carrier
         */
        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = Optional.ofNullable(carrier);
            return this;
        }

        /**
         * filter by specific carrier
         */
        public Builder carrier(Optional<String> carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        /**
         * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
         */
        public Builder shippoApiVersion(String shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
            return this;
        }

        /**
         * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
         */
        public Builder shippoApiVersion(Optional<String> shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = shippoApiVersion;
            return this;
        }
        
        public ListCarrierParcelTemplatesRequest build() {
            return new ListCarrierParcelTemplatesRequest(
                include,
                carrier,
                shippoApiVersion);
        }
    }
}

