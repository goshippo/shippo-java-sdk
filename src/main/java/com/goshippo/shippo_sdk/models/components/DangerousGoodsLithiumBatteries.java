/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippo_sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippo_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * DangerousGoodsLithiumBatteries - Container for specifying the presence of lithium batteries.
 */

public class DangerousGoodsLithiumBatteries {

    /**
     * Indicates if the shipment contains lithium batteries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contains")
    private Optional<Boolean> contains;

    @JsonCreator
    public DangerousGoodsLithiumBatteries(
            @JsonProperty("contains") Optional<Boolean> contains) {
        Utils.checkNotNull(contains, "contains");
        this.contains = contains;
    }
    
    public DangerousGoodsLithiumBatteries() {
        this(Optional.empty());
    }

    /**
     * Indicates if the shipment contains lithium batteries.
     */
    @JsonIgnore
    public Optional<Boolean> contains() {
        return contains;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates if the shipment contains lithium batteries.
     */
    public DangerousGoodsLithiumBatteries withContains(boolean contains) {
        Utils.checkNotNull(contains, "contains");
        this.contains = Optional.ofNullable(contains);
        return this;
    }

    /**
     * Indicates if the shipment contains lithium batteries.
     */
    public DangerousGoodsLithiumBatteries withContains(Optional<Boolean> contains) {
        Utils.checkNotNull(contains, "contains");
        this.contains = contains;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DangerousGoodsLithiumBatteries other = (DangerousGoodsLithiumBatteries) o;
        return 
            Objects.deepEquals(this.contains, other.contains);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contains);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DangerousGoodsLithiumBatteries.class,
                "contains", contains);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> contains = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates if the shipment contains lithium batteries.
         */
        public Builder contains(boolean contains) {
            Utils.checkNotNull(contains, "contains");
            this.contains = Optional.ofNullable(contains);
            return this;
        }

        /**
         * Indicates if the shipment contains lithium batteries.
         */
        public Builder contains(Optional<Boolean> contains) {
            Utils.checkNotNull(contains, "contains");
            this.contains = contains;
            return this;
        }
        
        public DangerousGoodsLithiumBatteries build() {
            return new DangerousGoodsLithiumBatteries(
                contains);
        }
    }
}

