/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippo_sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippo_sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * AddressValidationResults - Object that contains information regarding if an address had been validated or not. Also contains any messages 
 * generated during validation. Children keys are &lt;code&gt;is_valid&lt;/code&gt;(boolean) and &lt;code&gt;messages&lt;/code&gt;(array).
 */

public class AddressValidationResults {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_valid")
    private Optional<Boolean> isValid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<AddressValidationResultsMessage>> messages;

    @JsonCreator
    public AddressValidationResults(
            @JsonProperty("is_valid") Optional<Boolean> isValid,
            @JsonProperty("messages") Optional<? extends List<AddressValidationResultsMessage>> messages) {
        Utils.checkNotNull(isValid, "isValid");
        Utils.checkNotNull(messages, "messages");
        this.isValid = isValid;
        this.messages = messages;
    }
    
    public AddressValidationResults() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> isValid() {
        return isValid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AddressValidationResultsMessage>> messages() {
        return (Optional<List<AddressValidationResultsMessage>>) messages;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AddressValidationResults withIsValid(boolean isValid) {
        Utils.checkNotNull(isValid, "isValid");
        this.isValid = Optional.ofNullable(isValid);
        return this;
    }

    public AddressValidationResults withIsValid(Optional<Boolean> isValid) {
        Utils.checkNotNull(isValid, "isValid");
        this.isValid = isValid;
        return this;
    }

    public AddressValidationResults withMessages(List<AddressValidationResultsMessage> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    public AddressValidationResults withMessages(Optional<? extends List<AddressValidationResultsMessage>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddressValidationResults other = (AddressValidationResults) o;
        return 
            Objects.deepEquals(this.isValid, other.isValid) &&
            Objects.deepEquals(this.messages, other.messages);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isValid,
            messages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddressValidationResults.class,
                "isValid", isValid,
                "messages", messages);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> isValid = Optional.empty();
 
        private Optional<? extends List<AddressValidationResultsMessage>> messages = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder isValid(boolean isValid) {
            Utils.checkNotNull(isValid, "isValid");
            this.isValid = Optional.ofNullable(isValid);
            return this;
        }

        public Builder isValid(Optional<Boolean> isValid) {
            Utils.checkNotNull(isValid, "isValid");
            this.isValid = isValid;
            return this;
        }

        public Builder messages(List<AddressValidationResultsMessage> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        public Builder messages(Optional<? extends List<AddressValidationResultsMessage>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }
        
        public AddressValidationResults build() {
            return new AddressValidationResults(
                isValid,
                messages);
        }
    }
}

