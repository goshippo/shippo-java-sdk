/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippo_sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.shippo_sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CustomsDeclarationCreateRequestAddress {

    /**
     * Name of the party to be billed for duties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Postal code of the party to be billed for duties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private Optional<String> zip;

    /**
     * Country ISO code of account number to be billed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    @JsonCreator
    public CustomsDeclarationCreateRequestAddress(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("zip") Optional<String> zip,
            @JsonProperty("country") Optional<String> country) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(country, "country");
        this.name = name;
        this.zip = zip;
        this.country = country;
    }
    
    public CustomsDeclarationCreateRequestAddress() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Name of the party to be billed for duties.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Postal code of the party to be billed for duties.
     */
    @JsonIgnore
    public Optional<String> zip() {
        return zip;
    }

    /**
     * Country ISO code of account number to be billed.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the party to be billed for duties.
     */
    public CustomsDeclarationCreateRequestAddress withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the party to be billed for duties.
     */
    public CustomsDeclarationCreateRequestAddress withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Postal code of the party to be billed for duties.
     */
    public CustomsDeclarationCreateRequestAddress withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = Optional.ofNullable(zip);
        return this;
    }

    /**
     * Postal code of the party to be billed for duties.
     */
    public CustomsDeclarationCreateRequestAddress withZip(Optional<String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    /**
     * Country ISO code of account number to be billed.
     */
    public CustomsDeclarationCreateRequestAddress withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * Country ISO code of account number to be billed.
     */
    public CustomsDeclarationCreateRequestAddress withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomsDeclarationCreateRequestAddress other = (CustomsDeclarationCreateRequestAddress) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.zip, other.zip) &&
            Objects.deepEquals(this.country, other.country);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            zip,
            country);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomsDeclarationCreateRequestAddress.class,
                "name", name,
                "zip", zip,
                "country", country);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> zip = Optional.empty();
 
        private Optional<String> country = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the party to be billed for duties.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the party to be billed for duties.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Postal code of the party to be billed for duties.
         */
        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        /**
         * Postal code of the party to be billed for duties.
         */
        public Builder zip(Optional<String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        /**
         * Country ISO code of account number to be billed.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * Country ISO code of account number to be billed.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }
        
        public CustomsDeclarationCreateRequestAddress build() {
            return new CustomsDeclarationCreateRequestAddress(
                name,
                zip,
                country);
        }
    }
}

