/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.shippo_sdk;

import com.fasterxml.jackson.core.type.TypeReference;
import com.goshippo.shippo_sdk.models.components.Batch;
import com.goshippo.shippo_sdk.models.components.BatchCreateRequest;
import com.goshippo.shippo_sdk.models.components.BatchShipmentCreateRequest;
import com.goshippo.shippo_sdk.models.errors.SDKError;
import com.goshippo.shippo_sdk.models.operations.AddShipmentsToBatchRequest;
import com.goshippo.shippo_sdk.models.operations.AddShipmentsToBatchRequestBuilder;
import com.goshippo.shippo_sdk.models.operations.AddShipmentsToBatchResponse;
import com.goshippo.shippo_sdk.models.operations.CreateBatchRequest;
import com.goshippo.shippo_sdk.models.operations.CreateBatchRequestBuilder;
import com.goshippo.shippo_sdk.models.operations.CreateBatchResponse;
import com.goshippo.shippo_sdk.models.operations.GetBatchRequest;
import com.goshippo.shippo_sdk.models.operations.GetBatchRequestBuilder;
import com.goshippo.shippo_sdk.models.operations.GetBatchResponse;
import com.goshippo.shippo_sdk.models.operations.PurchaseBatchRequest;
import com.goshippo.shippo_sdk.models.operations.PurchaseBatchRequestBuilder;
import com.goshippo.shippo_sdk.models.operations.PurchaseBatchResponse;
import com.goshippo.shippo_sdk.models.operations.RemoveShipmentsFromBatchRequest;
import com.goshippo.shippo_sdk.models.operations.RemoveShipmentsFromBatchRequestBuilder;
import com.goshippo.shippo_sdk.models.operations.RemoveShipmentsFromBatchResponse;
import com.goshippo.shippo_sdk.models.operations.SDKMethodInterfaces.*;
import com.goshippo.shippo_sdk.utils.HTTPClient;
import com.goshippo.shippo_sdk.utils.HTTPRequest;
import com.goshippo.shippo_sdk.utils.Hook.AfterErrorContextImpl;
import com.goshippo.shippo_sdk.utils.Hook.AfterSuccessContextImpl;
import com.goshippo.shippo_sdk.utils.Hook.BeforeRequestContextImpl;
import com.goshippo.shippo_sdk.utils.SerializedBody;
import com.goshippo.shippo_sdk.utils.Utils.JsonShape;
import com.goshippo.shippo_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

/**
 * A batch is a technique for creating multiple labels at once. Use the  batch object to create and purchase many shipments in two API calls. After creating the batch, retrieve the batch to verify that all shipments are valid. You can add and remove shipments after you have created the batch. When all shipments are valid you can purchase the batch and retrieve all the shipping labels.
 * &lt;SchemaDefinition schemaRef="#/components/schemas/Batch"/&gt;
 * 
 * # Batch Shipment
 * The batch shipment object is a wrapper around a shipment object, which include shipment-specific information 
 * for batch processing.
 * 
 * Note: batch shipments can only be created on the batch endpoint, either when creating a batch object or by through 
 * the `/batches/{BATCH_OBJECT_ID}/add_shipments` endpoint
 * &lt;SchemaDefinition schemaRef="#/components/schemas/BatchShipment"/&gt;
 */
public class Batches implements
            MethodCallCreateBatch,
            MethodCallGetBatch,
            MethodCallAddShipmentsToBatch,
            MethodCallPurchaseBatch,
            MethodCallRemoveShipmentsFromBatch {

    private final SDKConfiguration sdkConfiguration;

    Batches(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a batch
     * Creates a new batch object for purchasing shipping labels for many shipments at once. Batches are created asynchronously. This means that the API response won't include your batch shipments yet. You need to retrieve the batch later to verify that all batch shipments are valid.
     * @return The call builder
     */
    public CreateBatchRequestBuilder create() {
        return new CreateBatchRequestBuilder(this);
    }

    /**
     * Create a batch
     * Creates a new batch object for purchasing shipping labels for many shipments at once. Batches are created asynchronously. This means that the API response won't include your batch shipments yet. You need to retrieve the batch later to verify that all batch shipments are valid.
     * @param batchCreateRequest
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBatchResponse create(
            BatchCreateRequest batchCreateRequest) throws Exception {
        return create(Optional.empty(), batchCreateRequest);
    }
    
    /**
     * Create a batch
     * Creates a new batch object for purchasing shipping labels for many shipments at once. Batches are created asynchronously. This means that the API response won't include your batch shipments yet. You need to retrieve the batch later to verify that all batch shipments are valid.
     * @param shippoApiVersion Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
     * @param batchCreateRequest
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateBatchResponse create(
            Optional<String> shippoApiVersion,
            BatchCreateRequest batchCreateRequest) throws Exception {
        CreateBatchRequest request =
            CreateBatchRequest
                .builder()
                .shippoApiVersion(shippoApiVersion)
                .batchCreateRequest(batchCreateRequest)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/batches");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "batchCreateRequest",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "CreateBatch", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "CreateBatch",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "CreateBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        CreateBatchResponse.Builder _resBuilder = 
            CreateBatchResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        CreateBatchResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Batch _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Batch>() {});
                _res.withBatch(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Retrieve a batch
     * Returns a batch using an object ID. &lt;br&gt; Batch shipments are displayed 100 at a time.  You can iterate 
     * through each `page` using the `?page= query` parameter.  You can also filter based on batch shipment 
     * status, for example, by passing a query param like `?object_results=creation_failed`. &lt;br&gt; 
     * For more details on filtering results, see our guide on &lt;a href="https://docs.goshippo.com/docs/api_concepts/filtering/" target="blank"&gt; filtering&lt;/a&gt;.
     * @return The call builder
     */
    public GetBatchRequestBuilder get() {
        return new GetBatchRequestBuilder(this);
    }

    /**
     * Retrieve a batch
     * Returns a batch using an object ID. &lt;br&gt; Batch shipments are displayed 100 at a time.  You can iterate 
     * through each `page` using the `?page= query` parameter.  You can also filter based on batch shipment 
     * status, for example, by passing a query param like `?object_results=creation_failed`. &lt;br&gt; 
     * For more details on filtering results, see our guide on &lt;a href="https://docs.goshippo.com/docs/api_concepts/filtering/" target="blank"&gt; filtering&lt;/a&gt;.
     * @param batchId Object ID of the batch
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBatchResponse get(
            String batchId) throws Exception {
        return get(batchId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Retrieve a batch
     * Returns a batch using an object ID. &lt;br&gt; Batch shipments are displayed 100 at a time.  You can iterate 
     * through each `page` using the `?page= query` parameter.  You can also filter based on batch shipment 
     * status, for example, by passing a query param like `?object_results=creation_failed`. &lt;br&gt; 
     * For more details on filtering results, see our guide on &lt;a href="https://docs.goshippo.com/docs/api_concepts/filtering/" target="blank"&gt; filtering&lt;/a&gt;.
     * @param batchId Object ID of the batch
     * @param page The page number you want to select
     * @param results The number of results to return per page (max 100, default 5)
     * @param shippoApiVersion Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBatchResponse get(
            String batchId,
            Optional<Long> page,
            Optional<Long> results,
            Optional<String> shippoApiVersion) throws Exception {
        GetBatchRequest request =
            GetBatchRequest
                .builder()
                .batchId(batchId)
                .page(page)
                .results(results)
                .shippoApiVersion(shippoApiVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetBatchRequest.class,
                _baseUrl,
                "/batches/{BatchId}",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetBatchRequest.class,
                request, 
                this.sdkConfiguration.globals));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "GetBatch", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "GetBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "GetBatch",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "GetBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetBatchResponse.Builder _resBuilder = 
            GetBatchResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetBatchResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Batch _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Batch>() {});
                _res.withBatch(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Add shipments to a batch
     * Adds batch shipments to an existing batch.
     * @return The call builder
     */
    public AddShipmentsToBatchRequestBuilder addShipments() {
        return new AddShipmentsToBatchRequestBuilder(this);
    }

    /**
     * Add shipments to a batch
     * Adds batch shipments to an existing batch.
     * @param batchId Object ID of the batch
     * @param requestBody Array of shipments to add to the batch
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddShipmentsToBatchResponse addShipments(
            String batchId,
            List<BatchShipmentCreateRequest> requestBody) throws Exception {
        return addShipments(batchId, Optional.empty(), requestBody);
    }
    
    /**
     * Add shipments to a batch
     * Adds batch shipments to an existing batch.
     * @param batchId Object ID of the batch
     * @param shippoApiVersion Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
     * @param requestBody Array of shipments to add to the batch
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AddShipmentsToBatchResponse addShipments(
            String batchId,
            Optional<String> shippoApiVersion,
            List<BatchShipmentCreateRequest> requestBody) throws Exception {
        AddShipmentsToBatchRequest request =
            AddShipmentsToBatchRequest
                .builder()
                .batchId(batchId)
                .shippoApiVersion(shippoApiVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                AddShipmentsToBatchRequest.class,
                _baseUrl,
                "/batches/{BatchId}/add_shipments",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "AddShipmentsToBatch", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "AddShipmentsToBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "AddShipmentsToBatch",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "AddShipmentsToBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        AddShipmentsToBatchResponse.Builder _resBuilder = 
            AddShipmentsToBatchResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        AddShipmentsToBatchResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Batch _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Batch>() {});
                _res.withBatch(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Purchase a batch
     * Purchases an existing batch with a status of `VALID`. 
     * Once you send a POST request to the purchase endpoint the batch status will change to `PURCHASING`. 
     * When all the shipments are purchased, the status will change to `PURCHASED` and you will receive a 
     * `batch_purchased` webhook indicating that the batch has been purchased
     * @return The call builder
     */
    public PurchaseBatchRequestBuilder purchase() {
        return new PurchaseBatchRequestBuilder(this);
    }

    /**
     * Purchase a batch
     * Purchases an existing batch with a status of `VALID`. 
     * Once you send a POST request to the purchase endpoint the batch status will change to `PURCHASING`. 
     * When all the shipments are purchased, the status will change to `PURCHASED` and you will receive a 
     * `batch_purchased` webhook indicating that the batch has been purchased
     * @param batchId Object ID of the batch
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PurchaseBatchResponse purchase(
            String batchId) throws Exception {
        return purchase(batchId, Optional.empty());
    }
    
    /**
     * Purchase a batch
     * Purchases an existing batch with a status of `VALID`. 
     * Once you send a POST request to the purchase endpoint the batch status will change to `PURCHASING`. 
     * When all the shipments are purchased, the status will change to `PURCHASED` and you will receive a 
     * `batch_purchased` webhook indicating that the batch has been purchased
     * @param batchId Object ID of the batch
     * @param shippoApiVersion Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PurchaseBatchResponse purchase(
            String batchId,
            Optional<String> shippoApiVersion) throws Exception {
        PurchaseBatchRequest request =
            PurchaseBatchRequest
                .builder()
                .batchId(batchId)
                .shippoApiVersion(shippoApiVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PurchaseBatchRequest.class,
                _baseUrl,
                "/batches/{BatchId}/purchase",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "PurchaseBatch", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "PurchaseBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "PurchaseBatch",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "PurchaseBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PurchaseBatchResponse.Builder _resBuilder = 
            PurchaseBatchResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PurchaseBatchResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Batch _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Batch>() {});
                _res.withBatch(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Remove shipments from a batch
     * Removes shipments from an existing batch shipment.
     * @return The call builder
     */
    public RemoveShipmentsFromBatchRequestBuilder removeShipments() {
        return new RemoveShipmentsFromBatchRequestBuilder(this);
    }

    /**
     * Remove shipments from a batch
     * Removes shipments from an existing batch shipment.
     * @param batchId Object ID of the batch
     * @param requestBody Array of shipments object ids to remove from the batch
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveShipmentsFromBatchResponse removeShipments(
            String batchId,
            List<String> requestBody) throws Exception {
        return removeShipments(batchId, Optional.empty(), requestBody);
    }
    
    /**
     * Remove shipments from a batch
     * Removes shipments from an existing batch shipment.
     * @param batchId Object ID of the batch
     * @param shippoApiVersion Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
     * @param requestBody Array of shipments object ids to remove from the batch
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveShipmentsFromBatchResponse removeShipments(
            String batchId,
            Optional<String> shippoApiVersion,
            List<String> requestBody) throws Exception {
        RemoveShipmentsFromBatchRequest request =
            RemoveShipmentsFromBatchRequest
                .builder()
                .batchId(batchId)
                .shippoApiVersion(shippoApiVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                RemoveShipmentsFromBatchRequest.class,
                _baseUrl,
                "/batches/{BatchId}/remove_shipments",
                request, this.sdkConfiguration.globals);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, this.sdkConfiguration.globals));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "RemoveShipmentsFromBatch", 
                      Optional.of(List.of()), 
                      sdkConfiguration.securitySource()),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "RemoveShipmentsFromBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "RemoveShipmentsFromBatch",
                            Optional.of(List.of()), 
                            sdkConfiguration.securitySource()),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "RemoveShipmentsFromBatch",
                            Optional.of(List.of()),
                            sdkConfiguration.securitySource()), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        RemoveShipmentsFromBatchResponse.Builder _resBuilder = 
            RemoveShipmentsFromBatchResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        RemoveShipmentsFromBatchResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Batch _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Batch>() {});
                _res.withBatch(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
