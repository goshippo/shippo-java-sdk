/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.goshippo.sdk.models.components.WebhookUpdateRequest;
import com.goshippo.sdk.utils.SpeakeasyMetadata;
import com.goshippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class UpdateWebhookRequest {

    /**
     * Object ID of the webhook to retrieve
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=webhookId")
    private String webhookId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private WebhookUpdateRequest webhookUpdateRequest;

    @JsonCreator
    public UpdateWebhookRequest(
            String webhookId,
            WebhookUpdateRequest webhookUpdateRequest) {
        Utils.checkNotNull(webhookId, "webhookId");
        Utils.checkNotNull(webhookUpdateRequest, "webhookUpdateRequest");
        this.webhookId = webhookId;
        this.webhookUpdateRequest = webhookUpdateRequest;
    }

    /**
     * Object ID of the webhook to retrieve
     */
    @JsonIgnore
    public String webhookId() {
        return webhookId;
    }

    @JsonIgnore
    public WebhookUpdateRequest webhookUpdateRequest() {
        return webhookUpdateRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Object ID of the webhook to retrieve
     */
    public UpdateWebhookRequest withWebhookId(String webhookId) {
        Utils.checkNotNull(webhookId, "webhookId");
        this.webhookId = webhookId;
        return this;
    }

    public UpdateWebhookRequest withWebhookUpdateRequest(WebhookUpdateRequest webhookUpdateRequest) {
        Utils.checkNotNull(webhookUpdateRequest, "webhookUpdateRequest");
        this.webhookUpdateRequest = webhookUpdateRequest;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateWebhookRequest other = (UpdateWebhookRequest) o;
        return 
            Objects.deepEquals(this.webhookId, other.webhookId) &&
            Objects.deepEquals(this.webhookUpdateRequest, other.webhookUpdateRequest);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            webhookId,
            webhookUpdateRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateWebhookRequest.class,
                "webhookId", webhookId,
                "webhookUpdateRequest", webhookUpdateRequest);
    }
    
    public final static class Builder {
 
        private String webhookId;
 
        private WebhookUpdateRequest webhookUpdateRequest;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Object ID of the webhook to retrieve
         */
        public Builder webhookId(String webhookId) {
            Utils.checkNotNull(webhookId, "webhookId");
            this.webhookId = webhookId;
            return this;
        }

        public Builder webhookUpdateRequest(WebhookUpdateRequest webhookUpdateRequest) {
            Utils.checkNotNull(webhookUpdateRequest, "webhookUpdateRequest");
            this.webhookUpdateRequest = webhookUpdateRequest;
            return this;
        }
        
        public UpdateWebhookRequest build() {
            return new UpdateWebhookRequest(
                webhookId,
                webhookUpdateRequest);
        }
    }
}

