/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.goshippo.sdk.models.components.OrderShopAppEnum;
import com.goshippo.sdk.models.components.OrderStatusEnum;
import com.goshippo.sdk.utils.LazySingletonValue;
import com.goshippo.sdk.utils.SpeakeasyMetadata;
import com.goshippo.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ListOrdersRequest {

    /**
     * The page number you want to select
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * The number of results to return per page (max 100)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=results")
    private Optional<Long> results;

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=SHIPPO-API-VERSION")
    private Optional<String> shippoApiVersion;

    /**
     * Filter orders by order status
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_status[]")
    private Optional<? extends List<OrderStatusEnum>> orderStatus;

    /**
     * Filter orders by shop app
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=shop_app")
    private Optional<? extends OrderShopAppEnum> shopApp;

    /**
     * Filter orders created after the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_date")
    private Optional<String> startDate;

    /**
     * Filter orders created before the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_date")
    private Optional<String> endDate;

    @JsonCreator
    public ListOrdersRequest(
            Optional<Long> page,
            Optional<Long> results,
            Optional<String> shippoApiVersion,
            Optional<? extends List<OrderStatusEnum>> orderStatus,
            Optional<? extends OrderShopAppEnum> shopApp,
            Optional<String> startDate,
            Optional<String> endDate) {
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(results, "results");
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        Utils.checkNotNull(orderStatus, "orderStatus");
        Utils.checkNotNull(shopApp, "shopApp");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        this.page = page;
        this.results = results;
        this.shippoApiVersion = shippoApiVersion;
        this.orderStatus = orderStatus;
        this.shopApp = shopApp;
        this.startDate = startDate;
        this.endDate = endDate;
    }
    
    public ListOrdersRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The page number you want to select
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * The number of results to return per page (max 100)
     */
    @JsonIgnore
    public Optional<Long> results() {
        return results;
    }

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    @JsonIgnore
    public Optional<String> shippoApiVersion() {
        return shippoApiVersion;
    }

    /**
     * Filter orders by order status
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<OrderStatusEnum>> orderStatus() {
        return (Optional<List<OrderStatusEnum>>) orderStatus;
    }

    /**
     * Filter orders by shop app
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OrderShopAppEnum> shopApp() {
        return (Optional<OrderShopAppEnum>) shopApp;
    }

    /**
     * Filter orders created after the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * Filter orders created before the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The page number you want to select
     */
    public ListOrdersRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * The page number you want to select
     */
    public ListOrdersRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * The number of results to return per page (max 100)
     */
    public ListOrdersRequest withResults(long results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    /**
     * The number of results to return per page (max 100)
     */
    public ListOrdersRequest withResults(Optional<Long> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    public ListOrdersRequest withShippoApiVersion(String shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
        return this;
    }

    /**
     * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
     */
    public ListOrdersRequest withShippoApiVersion(Optional<String> shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = shippoApiVersion;
        return this;
    }

    /**
     * Filter orders by order status
     */
    public ListOrdersRequest withOrderStatus(List<OrderStatusEnum> orderStatus) {
        Utils.checkNotNull(orderStatus, "orderStatus");
        this.orderStatus = Optional.ofNullable(orderStatus);
        return this;
    }

    /**
     * Filter orders by order status
     */
    public ListOrdersRequest withOrderStatus(Optional<? extends List<OrderStatusEnum>> orderStatus) {
        Utils.checkNotNull(orderStatus, "orderStatus");
        this.orderStatus = orderStatus;
        return this;
    }

    /**
     * Filter orders by shop app
     */
    public ListOrdersRequest withShopApp(OrderShopAppEnum shopApp) {
        Utils.checkNotNull(shopApp, "shopApp");
        this.shopApp = Optional.ofNullable(shopApp);
        return this;
    }

    /**
     * Filter orders by shop app
     */
    public ListOrdersRequest withShopApp(Optional<? extends OrderShopAppEnum> shopApp) {
        Utils.checkNotNull(shopApp, "shopApp");
        this.shopApp = shopApp;
        return this;
    }

    /**
     * Filter orders created after the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    public ListOrdersRequest withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Filter orders created after the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    public ListOrdersRequest withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Filter orders created before the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    public ListOrdersRequest withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Filter orders created before the input date and time (ISO 8601 UTC format).  This is based on the 
     * `placed_at` field, meaning when the order has been placed, not when the order object was created.
     */
    public ListOrdersRequest withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListOrdersRequest other = (ListOrdersRequest) o;
        return 
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.results, other.results) &&
            Objects.deepEquals(this.shippoApiVersion, other.shippoApiVersion) &&
            Objects.deepEquals(this.orderStatus, other.orderStatus) &&
            Objects.deepEquals(this.shopApp, other.shopApp) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            page,
            results,
            shippoApiVersion,
            orderStatus,
            shopApp,
            startDate,
            endDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListOrdersRequest.class,
                "page", page,
                "results", results,
                "shippoApiVersion", shippoApiVersion,
                "orderStatus", orderStatus,
                "shopApp", shopApp,
                "startDate", startDate,
                "endDate", endDate);
    }
    
    public final static class Builder {
 
        private Optional<Long> page;
 
        private Optional<Long> results;
 
        private Optional<String> shippoApiVersion = Optional.empty();
 
        private Optional<? extends List<OrderStatusEnum>> orderStatus = Optional.empty();
 
        private Optional<? extends OrderShopAppEnum> shopApp = Optional.empty();
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The page number you want to select
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * The page number you want to select
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * The number of results to return per page (max 100)
         */
        public Builder results(long results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        /**
         * The number of results to return per page (max 100)
         */
        public Builder results(Optional<Long> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }

        /**
         * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
         */
        public Builder shippoApiVersion(String shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
            return this;
        }

        /**
         * Optional string used to pick a non-default API version to use. See our &lt;a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/"&gt;API version&lt;/a&gt; guide.
         */
        public Builder shippoApiVersion(Optional<String> shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = shippoApiVersion;
            return this;
        }

        /**
         * Filter orders by order status
         */
        public Builder orderStatus(List<OrderStatusEnum> orderStatus) {
            Utils.checkNotNull(orderStatus, "orderStatus");
            this.orderStatus = Optional.ofNullable(orderStatus);
            return this;
        }

        /**
         * Filter orders by order status
         */
        public Builder orderStatus(Optional<? extends List<OrderStatusEnum>> orderStatus) {
            Utils.checkNotNull(orderStatus, "orderStatus");
            this.orderStatus = orderStatus;
            return this;
        }

        /**
         * Filter orders by shop app
         */
        public Builder shopApp(OrderShopAppEnum shopApp) {
            Utils.checkNotNull(shopApp, "shopApp");
            this.shopApp = Optional.ofNullable(shopApp);
            return this;
        }

        /**
         * Filter orders by shop app
         */
        public Builder shopApp(Optional<? extends OrderShopAppEnum> shopApp) {
            Utils.checkNotNull(shopApp, "shopApp");
            this.shopApp = shopApp;
            return this;
        }

        /**
         * Filter orders created after the input date and time (ISO 8601 UTC format).  This is based on the 
         * `placed_at` field, meaning when the order has been placed, not when the order object was created.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Filter orders created after the input date and time (ISO 8601 UTC format).  This is based on the 
         * `placed_at` field, meaning when the order has been placed, not when the order object was created.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Filter orders created before the input date and time (ISO 8601 UTC format).  This is based on the 
         * `placed_at` field, meaning when the order has been placed, not when the order object was created.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Filter orders created before the input date and time (ISO 8601 UTC format).  This is based on the 
         * `placed_at` field, meaning when the order has been placed, not when the order object was created.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }
        
        public ListOrdersRequest build() {
            if (page == null) {
                page = _SINGLETON_VALUE_Page.value();
            }
            if (results == null) {
                results = _SINGLETON_VALUE_Results.value();
            }            return new ListOrdersRequest(
                page,
                results,
                shippoApiVersion,
                orderStatus,
                shopApp,
                startDate,
                endDate);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Page =
                new LazySingletonValue<>(
                        "page",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_Results =
                new LazySingletonValue<>(
                        "results",
                        "25",
                        new TypeReference<Optional<Long>>() {});
    }
}

