/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ManifestCreateRequest {

    /**
     * ID of carrier account
     */
    @JsonProperty("carrier_account")
    private String carrierAccount;

    /**
     * All shipments to be submitted on this day will be closed out. 
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    @JsonProperty("shipment_date")
    private String shipmentDate;

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private Optional<? extends List<String>> transactions;

    @JsonProperty("address_from")
    private ManifestCreateRequestAddressFrom addressFrom;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("async")
    private Optional<Boolean> async;

    @JsonCreator
    public ManifestCreateRequest(
            @JsonProperty("carrier_account") String carrierAccount,
            @JsonProperty("shipment_date") String shipmentDate,
            @JsonProperty("transactions") Optional<? extends List<String>> transactions,
            @JsonProperty("address_from") ManifestCreateRequestAddressFrom addressFrom,
            @JsonProperty("async") Optional<Boolean> async) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        Utils.checkNotNull(shipmentDate, "shipmentDate");
        Utils.checkNotNull(transactions, "transactions");
        Utils.checkNotNull(addressFrom, "addressFrom");
        Utils.checkNotNull(async, "async");
        this.carrierAccount = carrierAccount;
        this.shipmentDate = shipmentDate;
        this.transactions = transactions;
        this.addressFrom = addressFrom;
        this.async = async;
    }
    
    public ManifestCreateRequest(
            String carrierAccount,
            String shipmentDate,
            ManifestCreateRequestAddressFrom addressFrom) {
        this(carrierAccount, shipmentDate, Optional.empty(), addressFrom, Optional.empty());
    }

    /**
     * ID of carrier account
     */
    @JsonIgnore
    public String carrierAccount() {
        return carrierAccount;
    }

    /**
     * All shipments to be submitted on this day will be closed out. 
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    @JsonIgnore
    public String shipmentDate() {
        return shipmentDate;
    }

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> transactions() {
        return (Optional<List<String>>) transactions;
    }

    @JsonIgnore
    public ManifestCreateRequestAddressFrom addressFrom() {
        return addressFrom;
    }

    @JsonIgnore
    public Optional<Boolean> async() {
        return async;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of carrier account
     */
    public ManifestCreateRequest withCarrierAccount(String carrierAccount) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        this.carrierAccount = carrierAccount;
        return this;
    }

    /**
     * All shipments to be submitted on this day will be closed out. 
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    public ManifestCreateRequest withShipmentDate(String shipmentDate) {
        Utils.checkNotNull(shipmentDate, "shipmentDate");
        this.shipmentDate = shipmentDate;
        return this;
    }

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    public ManifestCreateRequest withTransactions(List<String> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = Optional.ofNullable(transactions);
        return this;
    }

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    public ManifestCreateRequest withTransactions(Optional<? extends List<String>> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = transactions;
        return this;
    }

    public ManifestCreateRequest withAddressFrom(ManifestCreateRequestAddressFrom addressFrom) {
        Utils.checkNotNull(addressFrom, "addressFrom");
        this.addressFrom = addressFrom;
        return this;
    }

    public ManifestCreateRequest withAsync(boolean async) {
        Utils.checkNotNull(async, "async");
        this.async = Optional.ofNullable(async);
        return this;
    }

    public ManifestCreateRequest withAsync(Optional<Boolean> async) {
        Utils.checkNotNull(async, "async");
        this.async = async;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ManifestCreateRequest other = (ManifestCreateRequest) o;
        return 
            Objects.deepEquals(this.carrierAccount, other.carrierAccount) &&
            Objects.deepEquals(this.shipmentDate, other.shipmentDate) &&
            Objects.deepEquals(this.transactions, other.transactions) &&
            Objects.deepEquals(this.addressFrom, other.addressFrom) &&
            Objects.deepEquals(this.async, other.async);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            carrierAccount,
            shipmentDate,
            transactions,
            addressFrom,
            async);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ManifestCreateRequest.class,
                "carrierAccount", carrierAccount,
                "shipmentDate", shipmentDate,
                "transactions", transactions,
                "addressFrom", addressFrom,
                "async", async);
    }
    
    public final static class Builder {
 
        private String carrierAccount;
 
        private String shipmentDate;
 
        private Optional<? extends List<String>> transactions = Optional.empty();
 
        private ManifestCreateRequestAddressFrom addressFrom;
 
        private Optional<Boolean> async = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of carrier account
         */
        public Builder carrierAccount(String carrierAccount) {
            Utils.checkNotNull(carrierAccount, "carrierAccount");
            this.carrierAccount = carrierAccount;
            return this;
        }

        /**
         * All shipments to be submitted on this day will be closed out. 
         * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
         */
        public Builder shipmentDate(String shipmentDate) {
            Utils.checkNotNull(shipmentDate, "shipmentDate");
            this.shipmentDate = shipmentDate;
            return this;
        }

        /**
         * IDs transactions to use. If you set this to null or not send this parameter, 
         * Shippo will automatically assign all applicable transactions.
         */
        public Builder transactions(List<String> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = Optional.ofNullable(transactions);
            return this;
        }

        /**
         * IDs transactions to use. If you set this to null or not send this parameter, 
         * Shippo will automatically assign all applicable transactions.
         */
        public Builder transactions(Optional<? extends List<String>> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = transactions;
            return this;
        }

        public Builder addressFrom(ManifestCreateRequestAddressFrom addressFrom) {
            Utils.checkNotNull(addressFrom, "addressFrom");
            this.addressFrom = addressFrom;
            return this;
        }

        public Builder async(boolean async) {
            Utils.checkNotNull(async, "async");
            this.async = Optional.ofNullable(async);
            return this;
        }

        public Builder async(Optional<Boolean> async) {
            Utils.checkNotNull(async, "async");
            this.async = async;
            return this;
        }
        
        public ManifestCreateRequest build() {
            return new ManifestCreateRequest(
                carrierAccount,
                shipmentDate,
                transactions,
                addressFrom,
                async);
        }
    }
}

