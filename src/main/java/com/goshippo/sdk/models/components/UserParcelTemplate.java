/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class UserParcelTemplate {

    /**
     * The measure unit used for length, width and height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distance_unit")
    private Optional<? extends DistanceUnitEnum> distanceUnit;

    /**
     * The height of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<String> height;

    /**
     * The length of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    private Optional<String> length;

    /**
     * The name of the User Parcel Template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The weight of the package, in units specified by the weight_unit attribute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private Optional<String> weight;

    /**
     * The unit used for weight.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    private Optional<? extends WeightUnitEnum> weightUnit;

    /**
     * The width of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<String> width;

    /**
     * Date and time of User Parcel Template creation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given User Parcel Template object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<String> objectId;

    /**
     * Username of the user who created the User Parcel Template object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<String> objectOwner;

    /**
     * Date and time of last update on User Parcel Template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<OffsetDateTime> objectUpdated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends CarrierParcelTemplate> template;

    @JsonCreator
    public UserParcelTemplate(
            @JsonProperty("distance_unit") Optional<? extends DistanceUnitEnum> distanceUnit,
            @JsonProperty("height") Optional<String> height,
            @JsonProperty("length") Optional<String> length,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("weight") Optional<String> weight,
            @JsonProperty("weight_unit") Optional<? extends WeightUnitEnum> weightUnit,
            @JsonProperty("width") Optional<String> width,
            @JsonProperty("object_created") Optional<OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<String> objectId,
            @JsonProperty("object_owner") Optional<String> objectOwner,
            @JsonProperty("object_updated") Optional<OffsetDateTime> objectUpdated,
            @JsonProperty("template") Optional<? extends CarrierParcelTemplate> template) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(length, "length");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(weightUnit, "weightUnit");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(template, "template");
        this.distanceUnit = distanceUnit;
        this.height = height;
        this.length = length;
        this.name = name;
        this.weight = weight;
        this.weightUnit = weightUnit;
        this.width = width;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectUpdated = objectUpdated;
        this.template = template;
    }
    
    public UserParcelTemplate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The measure unit used for length, width and height.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DistanceUnitEnum> distanceUnit() {
        return (Optional<DistanceUnitEnum>) distanceUnit;
    }

    /**
     * The height of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    @JsonIgnore
    public Optional<String> height() {
        return height;
    }

    /**
     * The length of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    @JsonIgnore
    public Optional<String> length() {
        return length;
    }

    /**
     * The name of the User Parcel Template
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The weight of the package, in units specified by the weight_unit attribute.
     */
    @JsonIgnore
    public Optional<String> weight() {
        return weight;
    }

    /**
     * The unit used for weight.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WeightUnitEnum> weightUnit() {
        return (Optional<WeightUnitEnum>) weightUnit;
    }

    /**
     * The width of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    @JsonIgnore
    public Optional<String> width() {
        return width;
    }

    /**
     * Date and time of User Parcel Template creation
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given User Parcel Template object
     */
    @JsonIgnore
    public Optional<String> objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the User Parcel Template object
     */
    @JsonIgnore
    public Optional<String> objectOwner() {
        return objectOwner;
    }

    /**
     * Date and time of last update on User Parcel Template
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return objectUpdated;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CarrierParcelTemplate> template() {
        return (Optional<CarrierParcelTemplate>) template;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The measure unit used for length, width and height.
     */
    public UserParcelTemplate withDistanceUnit(DistanceUnitEnum distanceUnit) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        this.distanceUnit = Optional.ofNullable(distanceUnit);
        return this;
    }

    /**
     * The measure unit used for length, width and height.
     */
    public UserParcelTemplate withDistanceUnit(Optional<? extends DistanceUnitEnum> distanceUnit) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        this.distanceUnit = distanceUnit;
        return this;
    }

    /**
     * The height of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    public UserParcelTemplate withHeight(String height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    /**
     * The height of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    public UserParcelTemplate withHeight(Optional<String> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * The length of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    public UserParcelTemplate withLength(String length) {
        Utils.checkNotNull(length, "length");
        this.length = Optional.ofNullable(length);
        return this;
    }

    /**
     * The length of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    public UserParcelTemplate withLength(Optional<String> length) {
        Utils.checkNotNull(length, "length");
        this.length = length;
        return this;
    }

    /**
     * The name of the User Parcel Template
     */
    public UserParcelTemplate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the User Parcel Template
     */
    public UserParcelTemplate withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The weight of the package, in units specified by the weight_unit attribute.
     */
    public UserParcelTemplate withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = Optional.ofNullable(weight);
        return this;
    }

    /**
     * The weight of the package, in units specified by the weight_unit attribute.
     */
    public UserParcelTemplate withWeight(Optional<String> weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * The unit used for weight.
     */
    public UserParcelTemplate withWeightUnit(WeightUnitEnum weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = Optional.ofNullable(weightUnit);
        return this;
    }

    /**
     * The unit used for weight.
     */
    public UserParcelTemplate withWeightUnit(Optional<? extends WeightUnitEnum> weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = weightUnit;
        return this;
    }

    /**
     * The width of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    public UserParcelTemplate withWidth(String width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    /**
     * The width of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
     */
    public UserParcelTemplate withWidth(Optional<String> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    /**
     * Date and time of User Parcel Template creation
     */
    public UserParcelTemplate withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of User Parcel Template creation
     */
    public UserParcelTemplate withObjectCreated(Optional<OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given User Parcel Template object
     */
    public UserParcelTemplate withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given User Parcel Template object
     */
    public UserParcelTemplate withObjectId(Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the User Parcel Template object
     */
    public UserParcelTemplate withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the User Parcel Template object
     */
    public UserParcelTemplate withObjectOwner(Optional<String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Date and time of last update on User Parcel Template
     */
    public UserParcelTemplate withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last update on User Parcel Template
     */
    public UserParcelTemplate withObjectUpdated(Optional<OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    public UserParcelTemplate withTemplate(CarrierParcelTemplate template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    public UserParcelTemplate withTemplate(Optional<? extends CarrierParcelTemplate> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserParcelTemplate other = (UserParcelTemplate) o;
        return 
            Objects.deepEquals(this.distanceUnit, other.distanceUnit) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.length, other.length) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.weight, other.weight) &&
            Objects.deepEquals(this.weightUnit, other.weightUnit) &&
            Objects.deepEquals(this.width, other.width) &&
            Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            Objects.deepEquals(this.template, other.template);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            distanceUnit,
            height,
            length,
            name,
            weight,
            weightUnit,
            width,
            objectCreated,
            objectId,
            objectOwner,
            objectUpdated,
            template);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UserParcelTemplate.class,
                "distanceUnit", distanceUnit,
                "height", height,
                "length", length,
                "name", name,
                "weight", weight,
                "weightUnit", weightUnit,
                "width", width,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectUpdated", objectUpdated,
                "template", template);
    }
    
    public final static class Builder {
 
        private Optional<? extends DistanceUnitEnum> distanceUnit = Optional.empty();
 
        private Optional<String> height = Optional.empty();
 
        private Optional<String> length = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> weight = Optional.empty();
 
        private Optional<? extends WeightUnitEnum> weightUnit = Optional.empty();
 
        private Optional<String> width = Optional.empty();
 
        private Optional<OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<String> objectId = Optional.empty();
 
        private Optional<String> objectOwner = Optional.empty();
 
        private Optional<OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<? extends CarrierParcelTemplate> template = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The measure unit used for length, width and height.
         */
        public Builder distanceUnit(DistanceUnitEnum distanceUnit) {
            Utils.checkNotNull(distanceUnit, "distanceUnit");
            this.distanceUnit = Optional.ofNullable(distanceUnit);
            return this;
        }

        /**
         * The measure unit used for length, width and height.
         */
        public Builder distanceUnit(Optional<? extends DistanceUnitEnum> distanceUnit) {
            Utils.checkNotNull(distanceUnit, "distanceUnit");
            this.distanceUnit = distanceUnit;
            return this;
        }

        /**
         * The height of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
         */
        public Builder height(String height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        /**
         * The height of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
         */
        public Builder height(Optional<String> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * The length of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
         */
        public Builder length(String length) {
            Utils.checkNotNull(length, "length");
            this.length = Optional.ofNullable(length);
            return this;
        }

        /**
         * The length of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
         */
        public Builder length(Optional<String> length) {
            Utils.checkNotNull(length, "length");
            this.length = length;
            return this;
        }

        /**
         * The name of the User Parcel Template
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the User Parcel Template
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The weight of the package, in units specified by the weight_unit attribute.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = Optional.ofNullable(weight);
            return this;
        }

        /**
         * The weight of the package, in units specified by the weight_unit attribute.
         */
        public Builder weight(Optional<String> weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder weightUnit(WeightUnitEnum weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = Optional.ofNullable(weightUnit);
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder weightUnit(Optional<? extends WeightUnitEnum> weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = weightUnit;
            return this;
        }

        /**
         * The width of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
         */
        public Builder width(String width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        /**
         * The width of the package, in units specified by the `distance_unit` attribute. Required, but if using a preset carrier template then this field must be empty.
         */
        public Builder width(Optional<String> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        /**
         * Date and time of User Parcel Template creation
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of User Parcel Template creation
         */
        public Builder objectCreated(Optional<OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given User Parcel Template object
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given User Parcel Template object
         */
        public Builder objectId(Optional<String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the User Parcel Template object
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the User Parcel Template object
         */
        public Builder objectOwner(Optional<String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Date and time of last update on User Parcel Template
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last update on User Parcel Template
         */
        public Builder objectUpdated(Optional<OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        public Builder template(CarrierParcelTemplate template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        public Builder template(Optional<? extends CarrierParcelTemplate> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }
        
        public UserParcelTemplate build() {
            return new UserParcelTemplate(
                distanceUnit,
                height,
                length,
                name,
                weight,
                weightUnit,
                width,
                objectCreated,
                objectId,
                objectOwner,
                objectUpdated,
                template);
        }
    }
}

