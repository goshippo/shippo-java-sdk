/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ServiceGroup {

    /**
     * Description for the service group
     */
    @JsonProperty("description")
    private String description;

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flat_rate")
    private Optional<String> flatRate;

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flat_rate_currency")
    private Optional<String> flatRateCurrency;

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_shipping_threshold_currency")
    private Optional<String> freeShippingThresholdCurrency;

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum 
     * cart total (total cost of items in the cart) for this service group to be returned for rates at 
     * checkout. Optional unless type is `FREE_SHIPPING`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_shipping_threshold_min")
    private Optional<String> freeShippingThresholdMin;

    /**
     * Name for the service group that will be shown to customers in the response
     */
    @JsonProperty("name")
    private String name;

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate_adjustment")
    private Optional<Long> rateAdjustment;

    /**
     * The type of the service group.&lt;br&gt; 
     * `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; 
     * `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; 
     * `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
     */
    @JsonProperty("type")
    private ServiceGroupTypeEnum type;

    /**
     * The unique identifier of the given Service Group object.
     */
    @JsonProperty("object_id")
    private String objectId;

    /**
     * True if the service group is enabled, false otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;

    @JsonProperty("service_levels")
    private List<ServiceGroupAccountAndServiceLevel> serviceLevels;

    @JsonCreator
    public ServiceGroup(
            @JsonProperty("description") String description,
            @JsonProperty("flat_rate") Optional<String> flatRate,
            @JsonProperty("flat_rate_currency") Optional<String> flatRateCurrency,
            @JsonProperty("free_shipping_threshold_currency") Optional<String> freeShippingThresholdCurrency,
            @JsonProperty("free_shipping_threshold_min") Optional<String> freeShippingThresholdMin,
            @JsonProperty("name") String name,
            @JsonProperty("rate_adjustment") Optional<Long> rateAdjustment,
            @JsonProperty("type") ServiceGroupTypeEnum type,
            @JsonProperty("object_id") String objectId,
            @JsonProperty("is_active") Optional<Boolean> isActive,
            @JsonProperty("service_levels") List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(flatRate, "flatRate");
        Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
        Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
        Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(rateAdjustment, "rateAdjustment");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(serviceLevels, "serviceLevels");
        this.description = description;
        this.flatRate = flatRate;
        this.flatRateCurrency = flatRateCurrency;
        this.freeShippingThresholdCurrency = freeShippingThresholdCurrency;
        this.freeShippingThresholdMin = freeShippingThresholdMin;
        this.name = name;
        this.rateAdjustment = rateAdjustment;
        this.type = type;
        this.objectId = objectId;
        this.isActive = isActive;
        this.serviceLevels = serviceLevels;
    }
    
    public ServiceGroup(
            String description,
            String name,
            ServiceGroupTypeEnum type,
            String objectId,
            List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
        this(description, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), type, objectId, Optional.empty(), serviceLevels);
    }

    /**
     * Description for the service group
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    @JsonIgnore
    public Optional<String> flatRate() {
        return flatRate;
    }

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @JsonIgnore
    public Optional<String> flatRateCurrency() {
        return flatRateCurrency;
    }

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @JsonIgnore
    public Optional<String> freeShippingThresholdCurrency() {
        return freeShippingThresholdCurrency;
    }

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum 
     * cart total (total cost of items in the cart) for this service group to be returned for rates at 
     * checkout. Optional unless type is `FREE_SHIPPING`
     */
    @JsonIgnore
    public Optional<String> freeShippingThresholdMin() {
        return freeShippingThresholdMin;
    }

    /**
     * Name for the service group that will be shown to customers in the response
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    @JsonIgnore
    public Optional<Long> rateAdjustment() {
        return rateAdjustment;
    }

    /**
     * The type of the service group.&lt;br&gt; 
     * `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; 
     * `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; 
     * `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
     */
    @JsonIgnore
    public ServiceGroupTypeEnum type() {
        return type;
    }

    /**
     * The unique identifier of the given Service Group object.
     */
    @JsonIgnore
    public String objectId() {
        return objectId;
    }

    /**
     * True if the service group is enabled, false otherwise.
     */
    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    @JsonIgnore
    public List<ServiceGroupAccountAndServiceLevel> serviceLevels() {
        return serviceLevels;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Description for the service group
     */
    public ServiceGroup withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    public ServiceGroup withFlatRate(String flatRate) {
        Utils.checkNotNull(flatRate, "flatRate");
        this.flatRate = Optional.ofNullable(flatRate);
        return this;
    }

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    public ServiceGroup withFlatRate(Optional<String> flatRate) {
        Utils.checkNotNull(flatRate, "flatRate");
        this.flatRate = flatRate;
        return this;
    }

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroup withFlatRateCurrency(String flatRateCurrency) {
        Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
        this.flatRateCurrency = Optional.ofNullable(flatRateCurrency);
        return this;
    }

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroup withFlatRateCurrency(Optional<String> flatRateCurrency) {
        Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
        this.flatRateCurrency = flatRateCurrency;
        return this;
    }

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroup withFreeShippingThresholdCurrency(String freeShippingThresholdCurrency) {
        Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
        this.freeShippingThresholdCurrency = Optional.ofNullable(freeShippingThresholdCurrency);
        return this;
    }

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroup withFreeShippingThresholdCurrency(Optional<String> freeShippingThresholdCurrency) {
        Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
        this.freeShippingThresholdCurrency = freeShippingThresholdCurrency;
        return this;
    }

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum 
     * cart total (total cost of items in the cart) for this service group to be returned for rates at 
     * checkout. Optional unless type is `FREE_SHIPPING`
     */
    public ServiceGroup withFreeShippingThresholdMin(String freeShippingThresholdMin) {
        Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
        this.freeShippingThresholdMin = Optional.ofNullable(freeShippingThresholdMin);
        return this;
    }

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum 
     * cart total (total cost of items in the cart) for this service group to be returned for rates at 
     * checkout. Optional unless type is `FREE_SHIPPING`
     */
    public ServiceGroup withFreeShippingThresholdMin(Optional<String> freeShippingThresholdMin) {
        Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
        this.freeShippingThresholdMin = freeShippingThresholdMin;
        return this;
    }

    /**
     * Name for the service group that will be shown to customers in the response
     */
    public ServiceGroup withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    public ServiceGroup withRateAdjustment(long rateAdjustment) {
        Utils.checkNotNull(rateAdjustment, "rateAdjustment");
        this.rateAdjustment = Optional.ofNullable(rateAdjustment);
        return this;
    }

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    public ServiceGroup withRateAdjustment(Optional<Long> rateAdjustment) {
        Utils.checkNotNull(rateAdjustment, "rateAdjustment");
        this.rateAdjustment = rateAdjustment;
        return this;
    }

    /**
     * The type of the service group.&lt;br&gt; 
     * `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; 
     * `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; 
     * `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
     */
    public ServiceGroup withType(ServiceGroupTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The unique identifier of the given Service Group object.
     */
    public ServiceGroup withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * True if the service group is enabled, false otherwise.
     */
    public ServiceGroup withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    /**
     * True if the service group is enabled, false otherwise.
     */
    public ServiceGroup withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    public ServiceGroup withServiceLevels(List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
        Utils.checkNotNull(serviceLevels, "serviceLevels");
        this.serviceLevels = serviceLevels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServiceGroup other = (ServiceGroup) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.flatRate, other.flatRate) &&
            Objects.deepEquals(this.flatRateCurrency, other.flatRateCurrency) &&
            Objects.deepEquals(this.freeShippingThresholdCurrency, other.freeShippingThresholdCurrency) &&
            Objects.deepEquals(this.freeShippingThresholdMin, other.freeShippingThresholdMin) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.rateAdjustment, other.rateAdjustment) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.isActive, other.isActive) &&
            Objects.deepEquals(this.serviceLevels, other.serviceLevels);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            flatRate,
            flatRateCurrency,
            freeShippingThresholdCurrency,
            freeShippingThresholdMin,
            name,
            rateAdjustment,
            type,
            objectId,
            isActive,
            serviceLevels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ServiceGroup.class,
                "description", description,
                "flatRate", flatRate,
                "flatRateCurrency", flatRateCurrency,
                "freeShippingThresholdCurrency", freeShippingThresholdCurrency,
                "freeShippingThresholdMin", freeShippingThresholdMin,
                "name", name,
                "rateAdjustment", rateAdjustment,
                "type", type,
                "objectId", objectId,
                "isActive", isActive,
                "serviceLevels", serviceLevels);
    }
    
    public final static class Builder {
 
        private String description;
 
        private Optional<String> flatRate = Optional.empty();
 
        private Optional<String> flatRateCurrency = Optional.empty();
 
        private Optional<String> freeShippingThresholdCurrency = Optional.empty();
 
        private Optional<String> freeShippingThresholdMin = Optional.empty();
 
        private String name;
 
        private Optional<Long> rateAdjustment = Optional.empty();
 
        private ServiceGroupTypeEnum type;
 
        private String objectId;
 
        private Optional<Boolean> isActive = Optional.empty();
 
        private List<ServiceGroupAccountAndServiceLevel> serviceLevels;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Description for the service group
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * String representation of an amount to be returned as the flat rate
         * if 1. The service group is of type `LIVE_RATE` and no matching rates
         * were found; or 2. The service group is of type `FLAT_RATE`. Either
         * integers or decimals are accepted. Required unless type is
         * `FREE_SHIPPING`
         */
        public Builder flatRate(String flatRate) {
            Utils.checkNotNull(flatRate, "flatRate");
            this.flatRate = Optional.ofNullable(flatRate);
            return this;
        }

        /**
         * String representation of an amount to be returned as the flat rate
         * if 1. The service group is of type `LIVE_RATE` and no matching rates
         * were found; or 2. The service group is of type `FLAT_RATE`. Either
         * integers or decimals are accepted. Required unless type is
         * `FREE_SHIPPING`
         */
        public Builder flatRate(Optional<String> flatRate) {
            Utils.checkNotNull(flatRate, "flatRate");
            this.flatRate = flatRate;
            return this;
        }

        /**
         * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder flatRateCurrency(String flatRateCurrency) {
            Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
            this.flatRateCurrency = Optional.ofNullable(flatRateCurrency);
            return this;
        }

        /**
         * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder flatRateCurrency(Optional<String> flatRateCurrency) {
            Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
            this.flatRateCurrency = flatRateCurrency;
            return this;
        }

        /**
         * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder freeShippingThresholdCurrency(String freeShippingThresholdCurrency) {
            Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
            this.freeShippingThresholdCurrency = Optional.ofNullable(freeShippingThresholdCurrency);
            return this;
        }

        /**
         * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder freeShippingThresholdCurrency(Optional<String> freeShippingThresholdCurrency) {
            Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
            this.freeShippingThresholdCurrency = freeShippingThresholdCurrency;
            return this;
        }

        /**
         * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum 
         * cart total (total cost of items in the cart) for this service group to be returned for rates at 
         * checkout. Optional unless type is `FREE_SHIPPING`
         */
        public Builder freeShippingThresholdMin(String freeShippingThresholdMin) {
            Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
            this.freeShippingThresholdMin = Optional.ofNullable(freeShippingThresholdMin);
            return this;
        }

        /**
         * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum 
         * cart total (total cost of items in the cart) for this service group to be returned for rates at 
         * checkout. Optional unless type is `FREE_SHIPPING`
         */
        public Builder freeShippingThresholdMin(Optional<String> freeShippingThresholdMin) {
            Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
            this.freeShippingThresholdMin = freeShippingThresholdMin;
            return this;
        }

        /**
         * Name for the service group that will be shown to customers in the response
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
         */
        public Builder rateAdjustment(long rateAdjustment) {
            Utils.checkNotNull(rateAdjustment, "rateAdjustment");
            this.rateAdjustment = Optional.ofNullable(rateAdjustment);
            return this;
        }

        /**
         * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
         */
        public Builder rateAdjustment(Optional<Long> rateAdjustment) {
            Utils.checkNotNull(rateAdjustment, "rateAdjustment");
            this.rateAdjustment = rateAdjustment;
            return this;
        }

        /**
         * The type of the service group.&lt;br&gt; 
         * `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; 
         * `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; 
         * `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
         */
        public Builder type(ServiceGroupTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The unique identifier of the given Service Group object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * True if the service group is enabled, false otherwise.
         */
        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        /**
         * True if the service group is enabled, false otherwise.
         */
        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        public Builder serviceLevels(List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
            Utils.checkNotNull(serviceLevels, "serviceLevels");
            this.serviceLevels = serviceLevels;
            return this;
        }
        
        public ServiceGroup build() {
            return new ServiceGroup(
                description,
                flatRate,
                flatRateCurrency,
                freeShippingThresholdCurrency,
                freeShippingThresholdMin,
                name,
                rateAdjustment,
                type,
                objectId,
                isActive,
                serviceLevels);
        }
    }
}

