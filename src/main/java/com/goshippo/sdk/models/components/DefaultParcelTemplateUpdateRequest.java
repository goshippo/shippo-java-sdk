/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class DefaultParcelTemplateUpdateRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<String> objectId;

    @JsonCreator
    public DefaultParcelTemplateUpdateRequest(
            @JsonProperty("object_id") Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
    }
    
    public DefaultParcelTemplateUpdateRequest() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> objectId() {
        return objectId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DefaultParcelTemplateUpdateRequest withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    public DefaultParcelTemplateUpdateRequest withObjectId(Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DefaultParcelTemplateUpdateRequest other = (DefaultParcelTemplateUpdateRequest) o;
        return 
            Objects.deepEquals(this.objectId, other.objectId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            objectId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DefaultParcelTemplateUpdateRequest.class,
                "objectId", objectId);
    }
    
    public final static class Builder {
 
        private Optional<String> objectId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        public Builder objectId(Optional<String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }
        
        public DefaultParcelTemplateUpdateRequest build() {
            return new DefaultParcelTemplateUpdateRequest(
                objectId);
        }
    }
}

