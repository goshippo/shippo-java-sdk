/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * AddressCompleteCreateRequest - Address represents the address as retrieved from the database
 */

public class AddressCompleteCreateRequest {

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    @JsonProperty("name")
    private String name;

    /**
     * Company Name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<String> company;

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @JsonProperty("street1")
    private String street1;

    /**
     * Second street line, 35 character limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street2")
    private Optional<String> street2;

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street3")
    private Optional<String> street3;

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_no")
    private Optional<String> streetNo;

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    @JsonProperty("city")
    private String city;

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @JsonProperty("state")
    private String state;

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    @JsonProperty("zip")
    private String zip;

    /**
     * ISO 3166-1 alpha-2 country codes and country names can be used. For most consistent results, we reccomend using country codes like `US` or `DE`.
     * If using country names, please ensure they are spelled correctly and in English. Country names are converted to country codes.
     * Refer to this &lt;a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements" target="_blank"&gt;guide&lt;/a&gt; for a list of country codes.
     * Sending a country is always required.
     */
    @JsonProperty("country")
    private String country;

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_residential")
    private Optional<Boolean> isResidential;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validate")
    private Optional<Boolean> validate;

    @JsonCreator
    public AddressCompleteCreateRequest(
            @JsonProperty("name") String name,
            @JsonProperty("company") Optional<String> company,
            @JsonProperty("street1") String street1,
            @JsonProperty("street2") Optional<String> street2,
            @JsonProperty("street3") Optional<String> street3,
            @JsonProperty("street_no") Optional<String> streetNo,
            @JsonProperty("city") String city,
            @JsonProperty("state") String state,
            @JsonProperty("zip") String zip,
            @JsonProperty("country") String country,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("is_residential") Optional<Boolean> isResidential,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("validate") Optional<Boolean> validate) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(street3, "street3");
        Utils.checkNotNull(streetNo, "streetNo");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(isResidential, "isResidential");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(validate, "validate");
        this.name = name;
        this.company = company;
        this.street1 = street1;
        this.street2 = street2;
        this.street3 = street3;
        this.streetNo = streetNo;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.phone = phone;
        this.email = email;
        this.isResidential = isResidential;
        this.metadata = metadata;
        this.validate = validate;
    }
    
    public AddressCompleteCreateRequest(
            String name,
            String street1,
            String city,
            String state,
            String zip,
            String country) {
        this(name, Optional.empty(), street1, Optional.empty(), Optional.empty(), Optional.empty(), city, state, zip, country, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Company Name
     */
    @JsonIgnore
    public Optional<String> company() {
        return company;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @JsonIgnore
    public String street1() {
        return street1;
    }

    /**
     * Second street line, 35 character limit.
     */
    @JsonIgnore
    public Optional<String> street2() {
        return street2;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @JsonIgnore
    public Optional<String> street3() {
        return street3;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @JsonIgnore
    public Optional<String> streetNo() {
        return streetNo;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    @JsonIgnore
    public String city() {
        return city;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @JsonIgnore
    public String state() {
        return state;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    @JsonIgnore
    public String zip() {
        return zip;
    }

    /**
     * ISO 3166-1 alpha-2 country codes and country names can be used. For most consistent results, we reccomend using country codes like `US` or `DE`.
     * If using country names, please ensure they are spelled correctly and in English. Country names are converted to country codes.
     * Refer to this &lt;a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements" target="_blank"&gt;guide&lt;/a&gt; for a list of country codes.
     * Sending a country is always required.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    @JsonIgnore
    public Optional<Boolean> isResidential() {
        return isResidential;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    @JsonIgnore
    public Optional<Boolean> validate() {
        return validate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    public AddressCompleteCreateRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Company Name
     */
    public AddressCompleteCreateRequest withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    /**
     * Company Name
     */
    public AddressCompleteCreateRequest withCompany(Optional<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    public AddressCompleteCreateRequest withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public AddressCompleteCreateRequest withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = Optional.ofNullable(street2);
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public AddressCompleteCreateRequest withStreet2(Optional<String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public AddressCompleteCreateRequest withStreet3(String street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = Optional.ofNullable(street3);
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public AddressCompleteCreateRequest withStreet3(Optional<String> street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = street3;
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public AddressCompleteCreateRequest withStreetNo(String streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = Optional.ofNullable(streetNo);
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public AddressCompleteCreateRequest withStreetNo(Optional<String> streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = streetNo;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    public AddressCompleteCreateRequest withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    public AddressCompleteCreateRequest withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    public AddressCompleteCreateRequest withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    /**
     * ISO 3166-1 alpha-2 country codes and country names can be used. For most consistent results, we reccomend using country codes like `US` or `DE`.
     * If using country names, please ensure they are spelled correctly and in English. Country names are converted to country codes.
     * Refer to this &lt;a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements" target="_blank"&gt;guide&lt;/a&gt; for a list of country codes.
     * Sending a country is always required.
     */
    public AddressCompleteCreateRequest withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public AddressCompleteCreateRequest withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public AddressCompleteCreateRequest withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public AddressCompleteCreateRequest withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public AddressCompleteCreateRequest withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public AddressCompleteCreateRequest withIsResidential(boolean isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = Optional.ofNullable(isResidential);
        return this;
    }

    public AddressCompleteCreateRequest withIsResidential(Optional<Boolean> isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = isResidential;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public AddressCompleteCreateRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public AddressCompleteCreateRequest withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public AddressCompleteCreateRequest withValidate(boolean validate) {
        Utils.checkNotNull(validate, "validate");
        this.validate = Optional.ofNullable(validate);
        return this;
    }

    public AddressCompleteCreateRequest withValidate(Optional<Boolean> validate) {
        Utils.checkNotNull(validate, "validate");
        this.validate = validate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddressCompleteCreateRequest other = (AddressCompleteCreateRequest) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.street1, other.street1) &&
            Objects.deepEquals(this.street2, other.street2) &&
            Objects.deepEquals(this.street3, other.street3) &&
            Objects.deepEquals(this.streetNo, other.streetNo) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.zip, other.zip) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.isResidential, other.isResidential) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.validate, other.validate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            company,
            street1,
            street2,
            street3,
            streetNo,
            city,
            state,
            zip,
            country,
            phone,
            email,
            isResidential,
            metadata,
            validate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddressCompleteCreateRequest.class,
                "name", name,
                "company", company,
                "street1", street1,
                "street2", street2,
                "street3", street3,
                "streetNo", streetNo,
                "city", city,
                "state", state,
                "zip", zip,
                "country", country,
                "phone", phone,
                "email", email,
                "isResidential", isResidential,
                "metadata", metadata,
                "validate", validate);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<String> company = Optional.empty();
 
        private String street1;
 
        private Optional<String> street2 = Optional.empty();
 
        private Optional<String> street3 = Optional.empty();
 
        private Optional<String> streetNo = Optional.empty();
 
        private String city;
 
        private String state;
 
        private String zip;
 
        private String country;
 
        private Optional<String> phone = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<Boolean> isResidential = Optional.empty();
 
        private Optional<String> metadata = Optional.empty();
 
        private Optional<Boolean> validate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First and Last Name of the addressee
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(Optional<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = Optional.ofNullable(street2);
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(Optional<String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(String street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = Optional.ofNullable(street3);
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(Optional<String> street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = street3;
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(String streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = Optional.ofNullable(streetNo);
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(Optional<String> streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = streetNo;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
         * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
         * or a ZIP code (see below), if known, it will yield more accurate results.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * **required for purchase for some countries**&lt;br&gt;
         * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
         * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
         * only accept two or three character state abbreviations.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
         * accurate Rates.
         */
        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        /**
         * ISO 3166-1 alpha-2 country codes and country names can be used. For most consistent results, we reccomend using country codes like `US` or `DE`.
         * If using country names, please ensure they are spelled correctly and in English. Country names are converted to country codes.
         * Refer to this &lt;a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements" target="_blank"&gt;guide&lt;/a&gt; for a list of country codes.
         * Sending a country is always required.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder isResidential(boolean isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = Optional.ofNullable(isResidential);
            return this;
        }

        public Builder isResidential(Optional<Boolean> isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = isResidential;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder validate(boolean validate) {
            Utils.checkNotNull(validate, "validate");
            this.validate = Optional.ofNullable(validate);
            return this;
        }

        public Builder validate(Optional<Boolean> validate) {
            Utils.checkNotNull(validate, "validate");
            this.validate = validate;
            return this;
        }
        
        public AddressCompleteCreateRequest build() {
            return new AddressCompleteCreateRequest(
                name,
                company,
                street1,
                street2,
                street3,
                streetNo,
                city,
                state,
                zip,
                country,
                phone,
                email,
                isResidential,
                metadata,
                validate);
        }
    }
}

