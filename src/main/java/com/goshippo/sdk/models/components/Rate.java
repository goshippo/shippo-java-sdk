/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class Rate {

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    @JsonProperty("amount")
    private String amount;

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    @JsonProperty("amount_local")
    private String amountLocal;

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    @JsonProperty("currency_local")
    private String currencyLocal;

    /**
     * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrives_by")
    private Optional<String> arrivesBy;

    /**
     * An array containing specific attributes of this Rate in context of the entire shipment. 
     * Attributes can be assigned `CHEAPEST`, `FASTEST`, or `BESTVALUE`.
     */
    @JsonProperty("attributes")
    private List<Attributes> attributes;

    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    @JsonProperty("carrier_account")
    private String carrierAccount;

    /**
     * Further clarification of the transit times. 
     * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration_terms")
    private Optional<String> durationTerms;

    /**
     * Estimated transit time (duration) in days of the Parcel at the given servicelevel. 
     * Please note that this is not binding, but only an average value as given by the provider. 
     * Shippo is not able to guarantee any transit times.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimated_days")
    private Optional<Long> estimatedDays;

    /**
     * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested. 
     * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider. 
     * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("included_insurance_price")
    private Optional<String> includedInsurancePrice;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<ResponseMessage>> messages;

    /**
     * Date and time of Rate creation.
     */
    @JsonProperty("object_created")
    private OffsetDateTime objectCreated;

    /**
     * Unique identifier of the given Rate object.
     */
    @JsonProperty("object_id")
    private String objectId;

    /**
     * Username of the user who created the rate object.
     */
    @JsonProperty("object_owner")
    private String objectOwner;

    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    @JsonProperty("provider")
    private String provider;

    /**
     * URL to the provider logo with max. dimensions of 75*75px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider_image_75")
    private Optional<String> providerImage75;

    /**
     * URL to the provider logo with max. dimensions of 200*200px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider_image_200")
    private Optional<String> providerImage200;

    @JsonProperty("servicelevel")
    private ServiceLevelWithParent servicelevel;

    @JsonProperty("shipment")
    private String shipment;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<Boolean> test;

    /**
     * The parcel's transit zone token. These tokens can vary depending on the provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    private Optional<String> zone;

    @JsonCreator
    public Rate(
            @JsonProperty("amount") String amount,
            @JsonProperty("amount_local") String amountLocal,
            @JsonProperty("currency") String currency,
            @JsonProperty("currency_local") String currencyLocal,
            @JsonProperty("arrives_by") Optional<String> arrivesBy,
            @JsonProperty("attributes") List<Attributes> attributes,
            @JsonProperty("carrier_account") String carrierAccount,
            @JsonProperty("duration_terms") Optional<String> durationTerms,
            @JsonProperty("estimated_days") Optional<Long> estimatedDays,
            @JsonProperty("included_insurance_price") Optional<String> includedInsurancePrice,
            @JsonProperty("messages") Optional<? extends List<ResponseMessage>> messages,
            @JsonProperty("object_created") OffsetDateTime objectCreated,
            @JsonProperty("object_id") String objectId,
            @JsonProperty("object_owner") String objectOwner,
            @JsonProperty("provider") String provider,
            @JsonProperty("provider_image_75") Optional<String> providerImage75,
            @JsonProperty("provider_image_200") Optional<String> providerImage200,
            @JsonProperty("servicelevel") ServiceLevelWithParent servicelevel,
            @JsonProperty("shipment") String shipment,
            @JsonProperty("test") Optional<Boolean> test,
            @JsonProperty("zone") Optional<String> zone) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(amountLocal, "amountLocal");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        Utils.checkNotNull(arrivesBy, "arrivesBy");
        Utils.checkNotNull(attributes, "attributes");
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        Utils.checkNotNull(durationTerms, "durationTerms");
        Utils.checkNotNull(estimatedDays, "estimatedDays");
        Utils.checkNotNull(includedInsurancePrice, "includedInsurancePrice");
        Utils.checkNotNull(messages, "messages");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(providerImage75, "providerImage75");
        Utils.checkNotNull(providerImage200, "providerImage200");
        Utils.checkNotNull(servicelevel, "servicelevel");
        Utils.checkNotNull(shipment, "shipment");
        Utils.checkNotNull(test, "test");
        Utils.checkNotNull(zone, "zone");
        this.amount = amount;
        this.amountLocal = amountLocal;
        this.currency = currency;
        this.currencyLocal = currencyLocal;
        this.arrivesBy = arrivesBy;
        this.attributes = attributes;
        this.carrierAccount = carrierAccount;
        this.durationTerms = durationTerms;
        this.estimatedDays = estimatedDays;
        this.includedInsurancePrice = includedInsurancePrice;
        this.messages = messages;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.provider = provider;
        this.providerImage75 = providerImage75;
        this.providerImage200 = providerImage200;
        this.servicelevel = servicelevel;
        this.shipment = shipment;
        this.test = test;
        this.zone = zone;
    }
    
    public Rate(
            String amount,
            String amountLocal,
            String currency,
            String currencyLocal,
            List<Attributes> attributes,
            String carrierAccount,
            OffsetDateTime objectCreated,
            String objectId,
            String objectOwner,
            String provider,
            ServiceLevelWithParent servicelevel,
            String shipment) {
        this(amount, amountLocal, currency, currencyLocal, Optional.empty(), attributes, carrierAccount, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), objectCreated, objectId, objectOwner, provider, Optional.empty(), Optional.empty(), servicelevel, shipment, Optional.empty(), Optional.empty());
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    @JsonIgnore
    public String amount() {
        return amount;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    @JsonIgnore
    public String amountLocal() {
        return amountLocal;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    @JsonIgnore
    public String currencyLocal() {
        return currencyLocal;
    }

    /**
     * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
     */
    @JsonIgnore
    public Optional<String> arrivesBy() {
        return arrivesBy;
    }

    /**
     * An array containing specific attributes of this Rate in context of the entire shipment. 
     * Attributes can be assigned `CHEAPEST`, `FASTEST`, or `BESTVALUE`.
     */
    @JsonIgnore
    public List<Attributes> attributes() {
        return attributes;
    }

    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    @JsonIgnore
    public String carrierAccount() {
        return carrierAccount;
    }

    /**
     * Further clarification of the transit times. 
     * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
     */
    @JsonIgnore
    public Optional<String> durationTerms() {
        return durationTerms;
    }

    /**
     * Estimated transit time (duration) in days of the Parcel at the given servicelevel. 
     * Please note that this is not binding, but only an average value as given by the provider. 
     * Shippo is not able to guarantee any transit times.
     */
    @JsonIgnore
    public Optional<Long> estimatedDays() {
        return estimatedDays;
    }

    /**
     * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested. 
     * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider. 
     * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
     */
    @JsonIgnore
    public Optional<String> includedInsurancePrice() {
        return includedInsurancePrice;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ResponseMessage>> messages() {
        return (Optional<List<ResponseMessage>>) messages;
    }

    /**
     * Date and time of Rate creation.
     */
    @JsonIgnore
    public OffsetDateTime objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given Rate object.
     */
    @JsonIgnore
    public String objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the rate object.
     */
    @JsonIgnore
    public String objectOwner() {
        return objectOwner;
    }

    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    @JsonIgnore
    public String provider() {
        return provider;
    }

    /**
     * URL to the provider logo with max. dimensions of 75*75px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    @JsonIgnore
    public Optional<String> providerImage75() {
        return providerImage75;
    }

    /**
     * URL to the provider logo with max. dimensions of 200*200px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    @JsonIgnore
    public Optional<String> providerImage200() {
        return providerImage200;
    }

    @JsonIgnore
    public ServiceLevelWithParent servicelevel() {
        return servicelevel;
    }

    @JsonIgnore
    public String shipment() {
        return shipment;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonIgnore
    public Optional<Boolean> test() {
        return test;
    }

    /**
     * The parcel's transit zone token. These tokens can vary depending on the provider.
     */
    @JsonIgnore
    public Optional<String> zone() {
        return zone;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    public Rate withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    public Rate withAmountLocal(String amountLocal) {
        Utils.checkNotNull(amountLocal, "amountLocal");
        this.amountLocal = amountLocal;
        return this;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    public Rate withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    public Rate withCurrencyLocal(String currencyLocal) {
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        this.currencyLocal = currencyLocal;
        return this;
    }

    /**
     * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
     */
    public Rate withArrivesBy(String arrivesBy) {
        Utils.checkNotNull(arrivesBy, "arrivesBy");
        this.arrivesBy = Optional.ofNullable(arrivesBy);
        return this;
    }

    /**
     * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
     */
    public Rate withArrivesBy(Optional<String> arrivesBy) {
        Utils.checkNotNull(arrivesBy, "arrivesBy");
        this.arrivesBy = arrivesBy;
        return this;
    }

    /**
     * An array containing specific attributes of this Rate in context of the entire shipment. 
     * Attributes can be assigned `CHEAPEST`, `FASTEST`, or `BESTVALUE`.
     */
    public Rate withAttributes(List<Attributes> attributes) {
        Utils.checkNotNull(attributes, "attributes");
        this.attributes = attributes;
        return this;
    }

    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    public Rate withCarrierAccount(String carrierAccount) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        this.carrierAccount = carrierAccount;
        return this;
    }

    /**
     * Further clarification of the transit times. 
     * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
     */
    public Rate withDurationTerms(String durationTerms) {
        Utils.checkNotNull(durationTerms, "durationTerms");
        this.durationTerms = Optional.ofNullable(durationTerms);
        return this;
    }

    /**
     * Further clarification of the transit times. 
     * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
     */
    public Rate withDurationTerms(Optional<String> durationTerms) {
        Utils.checkNotNull(durationTerms, "durationTerms");
        this.durationTerms = durationTerms;
        return this;
    }

    /**
     * Estimated transit time (duration) in days of the Parcel at the given servicelevel. 
     * Please note that this is not binding, but only an average value as given by the provider. 
     * Shippo is not able to guarantee any transit times.
     */
    public Rate withEstimatedDays(long estimatedDays) {
        Utils.checkNotNull(estimatedDays, "estimatedDays");
        this.estimatedDays = Optional.ofNullable(estimatedDays);
        return this;
    }

    /**
     * Estimated transit time (duration) in days of the Parcel at the given servicelevel. 
     * Please note that this is not binding, but only an average value as given by the provider. 
     * Shippo is not able to guarantee any transit times.
     */
    public Rate withEstimatedDays(Optional<Long> estimatedDays) {
        Utils.checkNotNull(estimatedDays, "estimatedDays");
        this.estimatedDays = estimatedDays;
        return this;
    }

    /**
     * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested. 
     * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider. 
     * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
     */
    public Rate withIncludedInsurancePrice(String includedInsurancePrice) {
        Utils.checkNotNull(includedInsurancePrice, "includedInsurancePrice");
        this.includedInsurancePrice = Optional.ofNullable(includedInsurancePrice);
        return this;
    }

    /**
     * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested. 
     * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider. 
     * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
     */
    public Rate withIncludedInsurancePrice(Optional<String> includedInsurancePrice) {
        Utils.checkNotNull(includedInsurancePrice, "includedInsurancePrice");
        this.includedInsurancePrice = includedInsurancePrice;
        return this;
    }

    public Rate withMessages(List<ResponseMessage> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    public Rate withMessages(Optional<? extends List<ResponseMessage>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    /**
     * Date and time of Rate creation.
     */
    public Rate withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given Rate object.
     */
    public Rate withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the rate object.
     */
    public Rate withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    public Rate withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * URL to the provider logo with max. dimensions of 75*75px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    public Rate withProviderImage75(String providerImage75) {
        Utils.checkNotNull(providerImage75, "providerImage75");
        this.providerImage75 = Optional.ofNullable(providerImage75);
        return this;
    }

    /**
     * URL to the provider logo with max. dimensions of 75*75px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    public Rate withProviderImage75(Optional<String> providerImage75) {
        Utils.checkNotNull(providerImage75, "providerImage75");
        this.providerImage75 = providerImage75;
        return this;
    }

    /**
     * URL to the provider logo with max. dimensions of 200*200px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    public Rate withProviderImage200(String providerImage200) {
        Utils.checkNotNull(providerImage200, "providerImage200");
        this.providerImage200 = Optional.ofNullable(providerImage200);
        return this;
    }

    /**
     * URL to the provider logo with max. dimensions of 200*200px. 
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    public Rate withProviderImage200(Optional<String> providerImage200) {
        Utils.checkNotNull(providerImage200, "providerImage200");
        this.providerImage200 = providerImage200;
        return this;
    }

    public Rate withServicelevel(ServiceLevelWithParent servicelevel) {
        Utils.checkNotNull(servicelevel, "servicelevel");
        this.servicelevel = servicelevel;
        return this;
    }

    public Rate withShipment(String shipment) {
        Utils.checkNotNull(shipment, "shipment");
        this.shipment = shipment;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Rate withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Rate withTest(Optional<Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }

    /**
     * The parcel's transit zone token. These tokens can vary depending on the provider.
     */
    public Rate withZone(String zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = Optional.ofNullable(zone);
        return this;
    }

    /**
     * The parcel's transit zone token. These tokens can vary depending on the provider.
     */
    public Rate withZone(Optional<String> zone) {
        Utils.checkNotNull(zone, "zone");
        this.zone = zone;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Rate other = (Rate) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.amountLocal, other.amountLocal) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyLocal, other.currencyLocal) &&
            Objects.deepEquals(this.arrivesBy, other.arrivesBy) &&
            Objects.deepEquals(this.attributes, other.attributes) &&
            Objects.deepEquals(this.carrierAccount, other.carrierAccount) &&
            Objects.deepEquals(this.durationTerms, other.durationTerms) &&
            Objects.deepEquals(this.estimatedDays, other.estimatedDays) &&
            Objects.deepEquals(this.includedInsurancePrice, other.includedInsurancePrice) &&
            Objects.deepEquals(this.messages, other.messages) &&
            Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            Objects.deepEquals(this.provider, other.provider) &&
            Objects.deepEquals(this.providerImage75, other.providerImage75) &&
            Objects.deepEquals(this.providerImage200, other.providerImage200) &&
            Objects.deepEquals(this.servicelevel, other.servicelevel) &&
            Objects.deepEquals(this.shipment, other.shipment) &&
            Objects.deepEquals(this.test, other.test) &&
            Objects.deepEquals(this.zone, other.zone);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            amountLocal,
            currency,
            currencyLocal,
            arrivesBy,
            attributes,
            carrierAccount,
            durationTerms,
            estimatedDays,
            includedInsurancePrice,
            messages,
            objectCreated,
            objectId,
            objectOwner,
            provider,
            providerImage75,
            providerImage200,
            servicelevel,
            shipment,
            test,
            zone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Rate.class,
                "amount", amount,
                "amountLocal", amountLocal,
                "currency", currency,
                "currencyLocal", currencyLocal,
                "arrivesBy", arrivesBy,
                "attributes", attributes,
                "carrierAccount", carrierAccount,
                "durationTerms", durationTerms,
                "estimatedDays", estimatedDays,
                "includedInsurancePrice", includedInsurancePrice,
                "messages", messages,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "provider", provider,
                "providerImage75", providerImage75,
                "providerImage200", providerImage200,
                "servicelevel", servicelevel,
                "shipment", shipment,
                "test", test,
                "zone", zone);
    }
    
    public final static class Builder {
 
        private String amount;
 
        private String amountLocal;
 
        private String currency;
 
        private String currencyLocal;
 
        private Optional<String> arrivesBy = Optional.empty();
 
        private List<Attributes> attributes;
 
        private String carrierAccount;
 
        private Optional<String> durationTerms = Optional.empty();
 
        private Optional<Long> estimatedDays = Optional.empty();
 
        private Optional<String> includedInsurancePrice = Optional.empty();
 
        private Optional<? extends List<ResponseMessage>> messages = Optional.empty();
 
        private OffsetDateTime objectCreated;
 
        private String objectId;
 
        private String objectOwner;
 
        private String provider;
 
        private Optional<String> providerImage75 = Optional.empty();
 
        private Optional<String> providerImage200 = Optional.empty();
 
        private ServiceLevelWithParent servicelevel;
 
        private String shipment;
 
        private Optional<Boolean> test = Optional.empty();
 
        private Optional<String> zone = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Final Rate price, expressed in the currency used in the sender's country.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Final Rate price, expressed in the currency used in the recipient's country.
         */
        public Builder amountLocal(String amountLocal) {
            Utils.checkNotNull(amountLocal, "amountLocal");
            this.amountLocal = amountLocal;
            return this;
        }

        /**
         * Currency used in the sender's country, refers to `amount`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Currency used in the recipient's country, refers to `amount_local`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
         */
        public Builder currencyLocal(String currencyLocal) {
            Utils.checkNotNull(currencyLocal, "currencyLocal");
            this.currencyLocal = currencyLocal;
            return this;
        }

        /**
         * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
         */
        public Builder arrivesBy(String arrivesBy) {
            Utils.checkNotNull(arrivesBy, "arrivesBy");
            this.arrivesBy = Optional.ofNullable(arrivesBy);
            return this;
        }

        /**
         * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
         */
        public Builder arrivesBy(Optional<String> arrivesBy) {
            Utils.checkNotNull(arrivesBy, "arrivesBy");
            this.arrivesBy = arrivesBy;
            return this;
        }

        /**
         * An array containing specific attributes of this Rate in context of the entire shipment. 
         * Attributes can be assigned `CHEAPEST`, `FASTEST`, or `BESTVALUE`.
         */
        public Builder attributes(List<Attributes> attributes) {
            Utils.checkNotNull(attributes, "attributes");
            this.attributes = attributes;
            return this;
        }

        /**
         * Object ID of the carrier account that has been used to retrieve the rate.
         */
        public Builder carrierAccount(String carrierAccount) {
            Utils.checkNotNull(carrierAccount, "carrierAccount");
            this.carrierAccount = carrierAccount;
            return this;
        }

        /**
         * Further clarification of the transit times. 
         * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
         */
        public Builder durationTerms(String durationTerms) {
            Utils.checkNotNull(durationTerms, "durationTerms");
            this.durationTerms = Optional.ofNullable(durationTerms);
            return this;
        }

        /**
         * Further clarification of the transit times. 
         * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
         */
        public Builder durationTerms(Optional<String> durationTerms) {
            Utils.checkNotNull(durationTerms, "durationTerms");
            this.durationTerms = durationTerms;
            return this;
        }

        /**
         * Estimated transit time (duration) in days of the Parcel at the given servicelevel. 
         * Please note that this is not binding, but only an average value as given by the provider. 
         * Shippo is not able to guarantee any transit times.
         */
        public Builder estimatedDays(long estimatedDays) {
            Utils.checkNotNull(estimatedDays, "estimatedDays");
            this.estimatedDays = Optional.ofNullable(estimatedDays);
            return this;
        }

        /**
         * Estimated transit time (duration) in days of the Parcel at the given servicelevel. 
         * Please note that this is not binding, but only an average value as given by the provider. 
         * Shippo is not able to guarantee any transit times.
         */
        public Builder estimatedDays(Optional<Long> estimatedDays) {
            Utils.checkNotNull(estimatedDays, "estimatedDays");
            this.estimatedDays = estimatedDays;
            return this;
        }

        /**
         * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested. 
         * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider. 
         * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
         */
        public Builder includedInsurancePrice(String includedInsurancePrice) {
            Utils.checkNotNull(includedInsurancePrice, "includedInsurancePrice");
            this.includedInsurancePrice = Optional.ofNullable(includedInsurancePrice);
            return this;
        }

        /**
         * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested. 
         * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider. 
         * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
         */
        public Builder includedInsurancePrice(Optional<String> includedInsurancePrice) {
            Utils.checkNotNull(includedInsurancePrice, "includedInsurancePrice");
            this.includedInsurancePrice = includedInsurancePrice;
            return this;
        }

        public Builder messages(List<ResponseMessage> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        public Builder messages(Optional<? extends List<ResponseMessage>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }

        /**
         * Date and time of Rate creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given Rate object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the rate object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        /**
         * URL to the provider logo with max. dimensions of 75*75px. 
         * Please refer to the provider's Logo Usage Guidelines before using the logo.
         */
        public Builder providerImage75(String providerImage75) {
            Utils.checkNotNull(providerImage75, "providerImage75");
            this.providerImage75 = Optional.ofNullable(providerImage75);
            return this;
        }

        /**
         * URL to the provider logo with max. dimensions of 75*75px. 
         * Please refer to the provider's Logo Usage Guidelines before using the logo.
         */
        public Builder providerImage75(Optional<String> providerImage75) {
            Utils.checkNotNull(providerImage75, "providerImage75");
            this.providerImage75 = providerImage75;
            return this;
        }

        /**
         * URL to the provider logo with max. dimensions of 200*200px. 
         * Please refer to the provider's Logo Usage Guidelines before using the logo.
         */
        public Builder providerImage200(String providerImage200) {
            Utils.checkNotNull(providerImage200, "providerImage200");
            this.providerImage200 = Optional.ofNullable(providerImage200);
            return this;
        }

        /**
         * URL to the provider logo with max. dimensions of 200*200px. 
         * Please refer to the provider's Logo Usage Guidelines before using the logo.
         */
        public Builder providerImage200(Optional<String> providerImage200) {
            Utils.checkNotNull(providerImage200, "providerImage200");
            this.providerImage200 = providerImage200;
            return this;
        }

        public Builder servicelevel(ServiceLevelWithParent servicelevel) {
            Utils.checkNotNull(servicelevel, "servicelevel");
            this.servicelevel = servicelevel;
            return this;
        }

        public Builder shipment(String shipment) {
            Utils.checkNotNull(shipment, "shipment");
            this.shipment = shipment;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }

        /**
         * The parcel's transit zone token. These tokens can vary depending on the provider.
         */
        public Builder zone(String zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = Optional.ofNullable(zone);
            return this;
        }

        /**
         * The parcel's transit zone token. These tokens can vary depending on the provider.
         */
        public Builder zone(Optional<String> zone) {
            Utils.checkNotNull(zone, "zone");
            this.zone = zone;
            return this;
        }
        
        public Rate build() {
            return new Rate(
                amount,
                amountLocal,
                currency,
                currencyLocal,
                arrivesBy,
                attributes,
                carrierAccount,
                durationTerms,
                estimatedDays,
                includedInsurancePrice,
                messages,
                objectCreated,
                objectId,
                objectOwner,
                provider,
                providerImage75,
                providerImage200,
                servicelevel,
                shipment,
                test,
                zone);
        }
    }
}

