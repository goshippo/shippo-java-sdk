/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class BatchShipment {

    /**
     * Object ID of the carrier account to be used for this shipment (will override batch default)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier_account")
    private Optional<String> carrierAccount;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    /**
     * A token that sets the shipping method for the batch, overriding the batch default. 
     * Servicelevel tokens can be found &lt;a href="#tag/Service-Levels"&gt;in this list&lt;/a&gt; 
     * or &lt;a href="#operation/ListCarrierAccounts"&gt;at this endpoint&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicelevel_token")
    private Optional<String> servicelevelToken;

    /**
     * List of Shipment and Transaction error messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<Object>> messages;

    /**
     * Object ID of this batch shipment. Can be used in the remove_shipments endpoint.
     */
    @JsonProperty("object_id")
    private String objectId;

    /**
     * Object ID of the shipment object created for this batch shipment.
     */
    @JsonProperty("shipment")
    private String shipment;

    /**
     * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.&lt;br&gt;
     * `VALID` batch shipments can be purchased. &lt;br&gt;
     * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field&lt;br&gt; 
     * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
     */
    @JsonProperty("status")
    private Status status;

    /**
     * Object ID of the transaction object created for this batch shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction")
    private Optional<String> transaction;

    @JsonCreator
    public BatchShipment(
            @JsonProperty("carrier_account") Optional<String> carrierAccount,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("servicelevel_token") Optional<String> servicelevelToken,
            @JsonProperty("messages") Optional<? extends List<Object>> messages,
            @JsonProperty("object_id") String objectId,
            @JsonProperty("shipment") String shipment,
            @JsonProperty("status") Status status,
            @JsonProperty("transaction") Optional<String> transaction) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(servicelevelToken, "servicelevelToken");
        Utils.checkNotNull(messages, "messages");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(shipment, "shipment");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(transaction, "transaction");
        this.carrierAccount = carrierAccount;
        this.metadata = metadata;
        this.servicelevelToken = servicelevelToken;
        this.messages = messages;
        this.objectId = objectId;
        this.shipment = shipment;
        this.status = status;
        this.transaction = transaction;
    }
    
    public BatchShipment(
            String objectId,
            String shipment,
            Status status) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), objectId, shipment, status, Optional.empty());
    }

    /**
     * Object ID of the carrier account to be used for this shipment (will override batch default)
     */
    @JsonIgnore
    public Optional<String> carrierAccount() {
        return carrierAccount;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    /**
     * A token that sets the shipping method for the batch, overriding the batch default. 
     * Servicelevel tokens can be found &lt;a href="#tag/Service-Levels"&gt;in this list&lt;/a&gt; 
     * or &lt;a href="#operation/ListCarrierAccounts"&gt;at this endpoint&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<String> servicelevelToken() {
        return servicelevelToken;
    }

    /**
     * List of Shipment and Transaction error messages.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Object>> messages() {
        return (Optional<List<Object>>) messages;
    }

    /**
     * Object ID of this batch shipment. Can be used in the remove_shipments endpoint.
     */
    @JsonIgnore
    public String objectId() {
        return objectId;
    }

    /**
     * Object ID of the shipment object created for this batch shipment.
     */
    @JsonIgnore
    public String shipment() {
        return shipment;
    }

    /**
     * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.&lt;br&gt;
     * `VALID` batch shipments can be purchased. &lt;br&gt;
     * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field&lt;br&gt; 
     * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
     */
    @JsonIgnore
    public Status status() {
        return status;
    }

    /**
     * Object ID of the transaction object created for this batch shipment.
     */
    @JsonIgnore
    public Optional<String> transaction() {
        return transaction;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Object ID of the carrier account to be used for this shipment (will override batch default)
     */
    public BatchShipment withCarrierAccount(String carrierAccount) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        this.carrierAccount = Optional.ofNullable(carrierAccount);
        return this;
    }

    /**
     * Object ID of the carrier account to be used for this shipment (will override batch default)
     */
    public BatchShipment withCarrierAccount(Optional<String> carrierAccount) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        this.carrierAccount = carrierAccount;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public BatchShipment withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public BatchShipment withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * A token that sets the shipping method for the batch, overriding the batch default. 
     * Servicelevel tokens can be found &lt;a href="#tag/Service-Levels"&gt;in this list&lt;/a&gt; 
     * or &lt;a href="#operation/ListCarrierAccounts"&gt;at this endpoint&lt;/a&gt;.
     */
    public BatchShipment withServicelevelToken(String servicelevelToken) {
        Utils.checkNotNull(servicelevelToken, "servicelevelToken");
        this.servicelevelToken = Optional.ofNullable(servicelevelToken);
        return this;
    }

    /**
     * A token that sets the shipping method for the batch, overriding the batch default. 
     * Servicelevel tokens can be found &lt;a href="#tag/Service-Levels"&gt;in this list&lt;/a&gt; 
     * or &lt;a href="#operation/ListCarrierAccounts"&gt;at this endpoint&lt;/a&gt;.
     */
    public BatchShipment withServicelevelToken(Optional<String> servicelevelToken) {
        Utils.checkNotNull(servicelevelToken, "servicelevelToken");
        this.servicelevelToken = servicelevelToken;
        return this;
    }

    /**
     * List of Shipment and Transaction error messages.
     */
    public BatchShipment withMessages(List<Object> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    /**
     * List of Shipment and Transaction error messages.
     */
    public BatchShipment withMessages(Optional<? extends List<Object>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    /**
     * Object ID of this batch shipment. Can be used in the remove_shipments endpoint.
     */
    public BatchShipment withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Object ID of the shipment object created for this batch shipment.
     */
    public BatchShipment withShipment(String shipment) {
        Utils.checkNotNull(shipment, "shipment");
        this.shipment = shipment;
        return this;
    }

    /**
     * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.&lt;br&gt;
     * `VALID` batch shipments can be purchased. &lt;br&gt;
     * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field&lt;br&gt; 
     * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
     */
    public BatchShipment withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Object ID of the transaction object created for this batch shipment.
     */
    public BatchShipment withTransaction(String transaction) {
        Utils.checkNotNull(transaction, "transaction");
        this.transaction = Optional.ofNullable(transaction);
        return this;
    }

    /**
     * Object ID of the transaction object created for this batch shipment.
     */
    public BatchShipment withTransaction(Optional<String> transaction) {
        Utils.checkNotNull(transaction, "transaction");
        this.transaction = transaction;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BatchShipment other = (BatchShipment) o;
        return 
            Objects.deepEquals(this.carrierAccount, other.carrierAccount) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.servicelevelToken, other.servicelevelToken) &&
            Objects.deepEquals(this.messages, other.messages) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.shipment, other.shipment) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.transaction, other.transaction);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            carrierAccount,
            metadata,
            servicelevelToken,
            messages,
            objectId,
            shipment,
            status,
            transaction);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BatchShipment.class,
                "carrierAccount", carrierAccount,
                "metadata", metadata,
                "servicelevelToken", servicelevelToken,
                "messages", messages,
                "objectId", objectId,
                "shipment", shipment,
                "status", status,
                "transaction", transaction);
    }
    
    public final static class Builder {
 
        private Optional<String> carrierAccount = Optional.empty();
 
        private Optional<String> metadata = Optional.empty();
 
        private Optional<String> servicelevelToken = Optional.empty();
 
        private Optional<? extends List<Object>> messages = Optional.empty();
 
        private String objectId;
 
        private String shipment;
 
        private Status status;
 
        private Optional<String> transaction = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Object ID of the carrier account to be used for this shipment (will override batch default)
         */
        public Builder carrierAccount(String carrierAccount) {
            Utils.checkNotNull(carrierAccount, "carrierAccount");
            this.carrierAccount = Optional.ofNullable(carrierAccount);
            return this;
        }

        /**
         * Object ID of the carrier account to be used for this shipment (will override batch default)
         */
        public Builder carrierAccount(Optional<String> carrierAccount) {
            Utils.checkNotNull(carrierAccount, "carrierAccount");
            this.carrierAccount = carrierAccount;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * A token that sets the shipping method for the batch, overriding the batch default. 
         * Servicelevel tokens can be found &lt;a href="#tag/Service-Levels"&gt;in this list&lt;/a&gt; 
         * or &lt;a href="#operation/ListCarrierAccounts"&gt;at this endpoint&lt;/a&gt;.
         */
        public Builder servicelevelToken(String servicelevelToken) {
            Utils.checkNotNull(servicelevelToken, "servicelevelToken");
            this.servicelevelToken = Optional.ofNullable(servicelevelToken);
            return this;
        }

        /**
         * A token that sets the shipping method for the batch, overriding the batch default. 
         * Servicelevel tokens can be found &lt;a href="#tag/Service-Levels"&gt;in this list&lt;/a&gt; 
         * or &lt;a href="#operation/ListCarrierAccounts"&gt;at this endpoint&lt;/a&gt;.
         */
        public Builder servicelevelToken(Optional<String> servicelevelToken) {
            Utils.checkNotNull(servicelevelToken, "servicelevelToken");
            this.servicelevelToken = servicelevelToken;
            return this;
        }

        /**
         * List of Shipment and Transaction error messages.
         */
        public Builder messages(List<Object> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * List of Shipment and Transaction error messages.
         */
        public Builder messages(Optional<? extends List<Object>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }

        /**
         * Object ID of this batch shipment. Can be used in the remove_shipments endpoint.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Object ID of the shipment object created for this batch shipment.
         */
        public Builder shipment(String shipment) {
            Utils.checkNotNull(shipment, "shipment");
            this.shipment = shipment;
            return this;
        }

        /**
         * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.&lt;br&gt;
         * `VALID` batch shipments can be purchased. &lt;br&gt;
         * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field&lt;br&gt; 
         * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Object ID of the transaction object created for this batch shipment.
         */
        public Builder transaction(String transaction) {
            Utils.checkNotNull(transaction, "transaction");
            this.transaction = Optional.ofNullable(transaction);
            return this;
        }

        /**
         * Object ID of the transaction object created for this batch shipment.
         */
        public Builder transaction(Optional<String> transaction) {
            Utils.checkNotNull(transaction, "transaction");
            this.transaction = transaction;
            return this;
        }
        
        public BatchShipment build() {
            return new BatchShipment(
                carrierAccount,
                metadata,
                servicelevelToken,
                messages,
                objectId,
                shipment,
                status,
                transaction);
        }
    }
}

