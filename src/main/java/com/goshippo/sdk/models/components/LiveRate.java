/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class LiveRate {

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_local")
    private Optional<String> amountLocal;

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_local")
    private Optional<String> currencyLocal;

    /**
     * The estimated days in transit of the rate that powers the shipping option, if available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("estimated_days")
    private Optional<Long> estimatedDays;

    /**
     * The name of the service group being returned
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonCreator
    public LiveRate(
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("amount_local") Optional<String> amountLocal,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("currency_local") Optional<String> currencyLocal,
            @JsonProperty("estimated_days") Optional<Long> estimatedDays,
            @JsonProperty("title") Optional<String> title) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(amountLocal, "amountLocal");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        Utils.checkNotNull(estimatedDays, "estimatedDays");
        Utils.checkNotNull(title, "title");
        this.amount = amount;
        this.amountLocal = amountLocal;
        this.currency = currency;
        this.currencyLocal = currencyLocal;
        this.estimatedDays = estimatedDays;
        this.title = title;
    }
    
    public LiveRate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    @JsonIgnore
    public Optional<String> amountLocal() {
        return amountLocal;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    @JsonIgnore
    public Optional<String> currencyLocal() {
        return currencyLocal;
    }

    /**
     * The estimated days in transit of the rate that powers the shipping option, if available.
     */
    @JsonIgnore
    public Optional<Long> estimatedDays() {
        return estimatedDays;
    }

    /**
     * The name of the service group being returned
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    public LiveRate withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    public LiveRate withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    public LiveRate withAmountLocal(String amountLocal) {
        Utils.checkNotNull(amountLocal, "amountLocal");
        this.amountLocal = Optional.ofNullable(amountLocal);
        return this;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    public LiveRate withAmountLocal(Optional<String> amountLocal) {
        Utils.checkNotNull(amountLocal, "amountLocal");
        this.amountLocal = amountLocal;
        return this;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    public LiveRate withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    public LiveRate withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    public LiveRate withCurrencyLocal(String currencyLocal) {
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        this.currencyLocal = Optional.ofNullable(currencyLocal);
        return this;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    public LiveRate withCurrencyLocal(Optional<String> currencyLocal) {
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        this.currencyLocal = currencyLocal;
        return this;
    }

    /**
     * The estimated days in transit of the rate that powers the shipping option, if available.
     */
    public LiveRate withEstimatedDays(long estimatedDays) {
        Utils.checkNotNull(estimatedDays, "estimatedDays");
        this.estimatedDays = Optional.ofNullable(estimatedDays);
        return this;
    }

    /**
     * The estimated days in transit of the rate that powers the shipping option, if available.
     */
    public LiveRate withEstimatedDays(Optional<Long> estimatedDays) {
        Utils.checkNotNull(estimatedDays, "estimatedDays");
        this.estimatedDays = estimatedDays;
        return this;
    }

    /**
     * The name of the service group being returned
     */
    public LiveRate withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The name of the service group being returned
     */
    public LiveRate withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LiveRate other = (LiveRate) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.amountLocal, other.amountLocal) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyLocal, other.currencyLocal) &&
            Objects.deepEquals(this.estimatedDays, other.estimatedDays) &&
            Objects.deepEquals(this.title, other.title);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            amountLocal,
            currency,
            currencyLocal,
            estimatedDays,
            title);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LiveRate.class,
                "amount", amount,
                "amountLocal", amountLocal,
                "currency", currency,
                "currencyLocal", currencyLocal,
                "estimatedDays", estimatedDays,
                "title", title);
    }
    
    public final static class Builder {
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<String> amountLocal = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<String> currencyLocal = Optional.empty();
 
        private Optional<Long> estimatedDays = Optional.empty();
 
        private Optional<String> title = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Final Rate price, expressed in the currency used in the sender's country.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Final Rate price, expressed in the currency used in the sender's country.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Final Rate price, expressed in the currency used in the recipient's country.
         */
        public Builder amountLocal(String amountLocal) {
            Utils.checkNotNull(amountLocal, "amountLocal");
            this.amountLocal = Optional.ofNullable(amountLocal);
            return this;
        }

        /**
         * Final Rate price, expressed in the currency used in the recipient's country.
         */
        public Builder amountLocal(Optional<String> amountLocal) {
            Utils.checkNotNull(amountLocal, "amountLocal");
            this.amountLocal = amountLocal;
            return this;
        }

        /**
         * Currency used in the sender's country, refers to `amount`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * Currency used in the sender's country, refers to `amount`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Currency used in the recipient's country, refers to `amount_local`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
         */
        public Builder currencyLocal(String currencyLocal) {
            Utils.checkNotNull(currencyLocal, "currencyLocal");
            this.currencyLocal = Optional.ofNullable(currencyLocal);
            return this;
        }

        /**
         * Currency used in the recipient's country, refers to `amount_local`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
         */
        public Builder currencyLocal(Optional<String> currencyLocal) {
            Utils.checkNotNull(currencyLocal, "currencyLocal");
            this.currencyLocal = currencyLocal;
            return this;
        }

        /**
         * The estimated days in transit of the rate that powers the shipping option, if available.
         */
        public Builder estimatedDays(long estimatedDays) {
            Utils.checkNotNull(estimatedDays, "estimatedDays");
            this.estimatedDays = Optional.ofNullable(estimatedDays);
            return this;
        }

        /**
         * The estimated days in transit of the rate that powers the shipping option, if available.
         */
        public Builder estimatedDays(Optional<Long> estimatedDays) {
            Utils.checkNotNull(estimatedDays, "estimatedDays");
            this.estimatedDays = estimatedDays;
            return this;
        }

        /**
         * The name of the service group being returned
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The name of the service group being returned
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }
        
        public LiveRate build() {
            return new LiveRate(
                amount,
                amountLocal,
                currency,
                currencyLocal,
                estimatedDays,
                title);
        }
    }
}

