/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class Parcel {

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extra")
    private Optional<? extends ParcelExtra> extra;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    /**
     * The unit used for weight.
     */
    @JsonProperty("mass_unit")
    private WeightUnitEnum massUnit;

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("weight")
    private String weight;

    /**
     * The measure unit used for length, width and height.
     */
    @JsonProperty("distance_unit")
    private DistanceUnitEnum distanceUnit;

    /**
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("height")
    private String height;

    /**
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("length")
    private String length;

    /**
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("width")
    private String width;

    /**
     * Date and time of Parcel creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<String> objectId;

    /**
     * Username of the user who created the Parcel object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<String> objectOwner;

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_state")
    private Optional<? extends ObjectState> objectState;

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<OffsetDateTime> objectUpdated;

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends ParcelTemplateEnumSet> template;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<Boolean> test;

    @JsonCreator
    public Parcel(
            @JsonProperty("extra") Optional<? extends ParcelExtra> extra,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("mass_unit") WeightUnitEnum massUnit,
            @JsonProperty("weight") String weight,
            @JsonProperty("distance_unit") DistanceUnitEnum distanceUnit,
            @JsonProperty("height") String height,
            @JsonProperty("length") String length,
            @JsonProperty("width") String width,
            @JsonProperty("object_created") Optional<OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<String> objectId,
            @JsonProperty("object_owner") Optional<String> objectOwner,
            @JsonProperty("object_state") Optional<? extends ObjectState> objectState,
            @JsonProperty("object_updated") Optional<OffsetDateTime> objectUpdated,
            @JsonProperty("template") Optional<? extends ParcelTemplateEnumSet> template,
            @JsonProperty("test") Optional<Boolean> test) {
        Utils.checkNotNull(extra, "extra");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(massUnit, "massUnit");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(length, "length");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectState, "objectState");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(test, "test");
        this.extra = extra;
        this.metadata = metadata;
        this.massUnit = massUnit;
        this.weight = weight;
        this.distanceUnit = distanceUnit;
        this.height = height;
        this.length = length;
        this.width = width;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectState = objectState;
        this.objectUpdated = objectUpdated;
        this.template = template;
        this.test = test;
    }
    
    public Parcel(
            WeightUnitEnum massUnit,
            String weight,
            DistanceUnitEnum distanceUnit,
            String height,
            String length,
            String width) {
        this(Optional.empty(), Optional.empty(), massUnit, weight, distanceUnit, height, length, width, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParcelExtra> extra() {
        return (Optional<ParcelExtra>) extra;
    }

    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    /**
     * The unit used for weight.
     */
    @JsonIgnore
    public WeightUnitEnum massUnit() {
        return massUnit;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String weight() {
        return weight;
    }

    /**
     * The measure unit used for length, width and height.
     */
    @JsonIgnore
    public DistanceUnitEnum distanceUnit() {
        return distanceUnit;
    }

    /**
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String height() {
        return height;
    }

    /**
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String length() {
        return length;
    }

    /**
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String width() {
        return width;
    }

    /**
     * Date and time of Parcel creation.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    @JsonIgnore
    public Optional<String> objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the Parcel object.
     */
    @JsonIgnore
    public Optional<String> objectOwner() {
        return objectOwner;
    }

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectState> objectState() {
        return (Optional<ObjectState>) objectState;
    }

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return objectUpdated;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParcelTemplateEnumSet> template() {
        return (Optional<ParcelTemplateEnumSet>) template;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonIgnore
    public Optional<Boolean> test() {
        return test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    public Parcel withExtra(ParcelExtra extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = Optional.ofNullable(extra);
        return this;
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    public Parcel withExtra(Optional<? extends ParcelExtra> extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = extra;
        return this;
    }

    public Parcel withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public Parcel withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The unit used for weight.
     */
    public Parcel withMassUnit(WeightUnitEnum massUnit) {
        Utils.checkNotNull(massUnit, "massUnit");
        this.massUnit = massUnit;
        return this;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * The measure unit used for length, width and height.
     */
    public Parcel withDistanceUnit(DistanceUnitEnum distanceUnit) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        this.distanceUnit = distanceUnit;
        return this;
    }

    /**
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withHeight(String height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withLength(String length) {
        Utils.checkNotNull(length, "length");
        this.length = length;
        return this;
    }

    /**
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withWidth(String width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    /**
     * Date and time of Parcel creation.
     */
    public Parcel withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of Parcel creation.
     */
    public Parcel withObjectCreated(Optional<OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    public Parcel withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    public Parcel withObjectId(Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the Parcel object.
     */
    public Parcel withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the Parcel object.
     */
    public Parcel withObjectOwner(Optional<String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    public Parcel withObjectState(ObjectState objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = Optional.ofNullable(objectState);
        return this;
    }

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    public Parcel withObjectState(Optional<? extends ObjectState> objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = objectState;
        return this;
    }

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    public Parcel withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    public Parcel withObjectUpdated(Optional<OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    public Parcel withTemplate(ParcelTemplateEnumSet template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    public Parcel withTemplate(Optional<? extends ParcelTemplateEnumSet> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Parcel withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Parcel withTest(Optional<Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Parcel other = (Parcel) o;
        return 
            Objects.deepEquals(this.extra, other.extra) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.massUnit, other.massUnit) &&
            Objects.deepEquals(this.weight, other.weight) &&
            Objects.deepEquals(this.distanceUnit, other.distanceUnit) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.length, other.length) &&
            Objects.deepEquals(this.width, other.width) &&
            Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            Objects.deepEquals(this.objectState, other.objectState) &&
            Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            Objects.deepEquals(this.template, other.template) &&
            Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            extra,
            metadata,
            massUnit,
            weight,
            distanceUnit,
            height,
            length,
            width,
            objectCreated,
            objectId,
            objectOwner,
            objectState,
            objectUpdated,
            template,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Parcel.class,
                "extra", extra,
                "metadata", metadata,
                "massUnit", massUnit,
                "weight", weight,
                "distanceUnit", distanceUnit,
                "height", height,
                "length", length,
                "width", width,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectState", objectState,
                "objectUpdated", objectUpdated,
                "template", template,
                "test", test);
    }
    
    public final static class Builder {
 
        private Optional<? extends ParcelExtra> extra = Optional.empty();
 
        private Optional<String> metadata = Optional.empty();
 
        private WeightUnitEnum massUnit;
 
        private String weight;
 
        private DistanceUnitEnum distanceUnit;
 
        private String height;
 
        private String length;
 
        private String width;
 
        private Optional<OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<String> objectId = Optional.empty();
 
        private Optional<String> objectOwner = Optional.empty();
 
        private Optional<? extends ObjectState> objectState = Optional.empty();
 
        private Optional<OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<? extends ParcelTemplateEnumSet> template = Optional.empty();
 
        private Optional<Boolean> test = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
         * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
         */
        public Builder extra(ParcelExtra extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = Optional.ofNullable(extra);
            return this;
        }

        /**
         * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
         * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
         */
        public Builder extra(Optional<? extends ParcelExtra> extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = extra;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder massUnit(WeightUnitEnum massUnit) {
            Utils.checkNotNull(massUnit, "massUnit");
            this.massUnit = massUnit;
            return this;
        }

        /**
         * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * The measure unit used for length, width and height.
         */
        public Builder distanceUnit(DistanceUnitEnum distanceUnit) {
            Utils.checkNotNull(distanceUnit, "distanceUnit");
            this.distanceUnit = distanceUnit;
            return this;
        }

        /**
         * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder height(String height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder length(String length) {
            Utils.checkNotNull(length, "length");
            this.length = length;
            return this;
        }

        /**
         * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder width(String width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        /**
         * Date and time of Parcel creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of Parcel creation.
         */
        public Builder objectCreated(Optional<OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
         */
        public Builder objectId(Optional<String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the Parcel object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the Parcel object.
         */
        public Builder objectOwner(Optional<String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * A Parcel will only be valid when all required values have been sent and validated successfully.
         */
        public Builder objectState(ObjectState objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = Optional.ofNullable(objectState);
            return this;
        }

        /**
         * A Parcel will only be valid when all required values have been sent and validated successfully.
         */
        public Builder objectState(Optional<? extends ObjectState> objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = objectState;
            return this;
        }

        /**
         * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
         */
        public Builder objectUpdated(Optional<OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
         */
        public Builder template(ParcelTemplateEnumSet template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
         */
        public Builder template(Optional<? extends ParcelTemplateEnumSet> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public Parcel build() {
            return new Parcel(
                extra,
                metadata,
                massUnit,
                weight,
                distanceUnit,
                height,
                length,
                width,
                objectCreated,
                objectId,
                objectOwner,
                objectState,
                objectUpdated,
                template,
                test);
        }
    }
}

