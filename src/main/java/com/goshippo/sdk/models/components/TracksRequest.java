/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.goshippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.goshippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class TracksRequest {

    /**
     * Name of the carrier of the shipment to track.
     */
    @JsonProperty("carrier")
    private String carrier;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    /**
     * Tracking number to track.
     */
    @JsonProperty("tracking_number")
    private String trackingNumber;

    @JsonCreator
    public TracksRequest(
            @JsonProperty("carrier") String carrier,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("tracking_number") String trackingNumber) {
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        this.carrier = carrier;
        this.metadata = metadata;
        this.trackingNumber = trackingNumber;
    }
    
    public TracksRequest(
            String carrier,
            String trackingNumber) {
        this(carrier, Optional.empty(), trackingNumber);
    }

    /**
     * Name of the carrier of the shipment to track.
     */
    @JsonIgnore
    public String carrier() {
        return carrier;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    /**
     * Tracking number to track.
     */
    @JsonIgnore
    public String trackingNumber() {
        return trackingNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the carrier of the shipment to track.
     */
    public TracksRequest withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    public TracksRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    public TracksRequest withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Tracking number to track.
     */
    public TracksRequest withTrackingNumber(String trackingNumber) {
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        this.trackingNumber = trackingNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TracksRequest other = (TracksRequest) o;
        return 
            Objects.deepEquals(this.carrier, other.carrier) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.trackingNumber, other.trackingNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            carrier,
            metadata,
            trackingNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TracksRequest.class,
                "carrier", carrier,
                "metadata", metadata,
                "trackingNumber", trackingNumber);
    }
    
    public final static class Builder {
 
        private String carrier;
 
        private Optional<String> metadata = Optional.empty();
 
        private String trackingNumber;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the carrier of the shipment to track.
         */
        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
         */
        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Tracking number to track.
         */
        public Builder trackingNumber(String trackingNumber) {
            Utils.checkNotNull(trackingNumber, "trackingNumber");
            this.trackingNumber = trackingNumber;
            return this;
        }
        
        public TracksRequest build() {
            return new TracksRequest(
                carrier,
                metadata,
                trackingNumber);
        }
    }
}

