/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.SpeakeasyMetadata;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UpdateUserParcelTemplateRequest {

    /**
     * Object ID of the user parcel template
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=UserParcelTemplateObjectId")
    private String userParcelTemplateObjectId;

    /**
     * String used to pick a non-default API version to use
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=SHIPPO-API-VERSION")
    private Optional<? extends String> shippoApiVersion;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest> userParcelTemplateUpdateRequest;

    @JsonCreator
    public UpdateUserParcelTemplateRequest(
            String userParcelTemplateObjectId,
            Optional<? extends String> shippoApiVersion,
            Optional<? extends com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest> userParcelTemplateUpdateRequest) {
        Utils.checkNotNull(userParcelTemplateObjectId, "userParcelTemplateObjectId");
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        Utils.checkNotNull(userParcelTemplateUpdateRequest, "userParcelTemplateUpdateRequest");
        this.userParcelTemplateObjectId = userParcelTemplateObjectId;
        this.shippoApiVersion = shippoApiVersion;
        this.userParcelTemplateUpdateRequest = userParcelTemplateUpdateRequest;
    }
    
    public UpdateUserParcelTemplateRequest(
            String userParcelTemplateObjectId) {
        this(userParcelTemplateObjectId, Optional.empty(), Optional.empty());
    }

    /**
     * Object ID of the user parcel template
     */
    @JsonIgnore
    public String userParcelTemplateObjectId() {
        return userParcelTemplateObjectId;
    }

    /**
     * String used to pick a non-default API version to use
     */
    @JsonIgnore
    public Optional<? extends String> shippoApiVersion() {
        return shippoApiVersion;
    }

    @JsonIgnore
    public Optional<? extends com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest> userParcelTemplateUpdateRequest() {
        return userParcelTemplateUpdateRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Object ID of the user parcel template
     */
    public UpdateUserParcelTemplateRequest withUserParcelTemplateObjectId(String userParcelTemplateObjectId) {
        Utils.checkNotNull(userParcelTemplateObjectId, "userParcelTemplateObjectId");
        this.userParcelTemplateObjectId = userParcelTemplateObjectId;
        return this;
    }

    /**
     * String used to pick a non-default API version to use
     */
    public UpdateUserParcelTemplateRequest withShippoApiVersion(String shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
        return this;
    }

    /**
     * String used to pick a non-default API version to use
     */
    public UpdateUserParcelTemplateRequest withShippoApiVersion(Optional<? extends String> shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = shippoApiVersion;
        return this;
    }

    public UpdateUserParcelTemplateRequest withUserParcelTemplateUpdateRequest(com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest userParcelTemplateUpdateRequest) {
        Utils.checkNotNull(userParcelTemplateUpdateRequest, "userParcelTemplateUpdateRequest");
        this.userParcelTemplateUpdateRequest = Optional.ofNullable(userParcelTemplateUpdateRequest);
        return this;
    }

    public UpdateUserParcelTemplateRequest withUserParcelTemplateUpdateRequest(Optional<? extends com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest> userParcelTemplateUpdateRequest) {
        Utils.checkNotNull(userParcelTemplateUpdateRequest, "userParcelTemplateUpdateRequest");
        this.userParcelTemplateUpdateRequest = userParcelTemplateUpdateRequest;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateUserParcelTemplateRequest other = (UpdateUserParcelTemplateRequest) o;
        return 
            java.util.Objects.deepEquals(this.userParcelTemplateObjectId, other.userParcelTemplateObjectId) &&
            java.util.Objects.deepEquals(this.shippoApiVersion, other.shippoApiVersion) &&
            java.util.Objects.deepEquals(this.userParcelTemplateUpdateRequest, other.userParcelTemplateUpdateRequest);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            userParcelTemplateObjectId,
            shippoApiVersion,
            userParcelTemplateUpdateRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateUserParcelTemplateRequest.class,
                "userParcelTemplateObjectId", userParcelTemplateObjectId,
                "shippoApiVersion", shippoApiVersion,
                "userParcelTemplateUpdateRequest", userParcelTemplateUpdateRequest);
    }
    
    public final static class Builder {
 
        private String userParcelTemplateObjectId;
 
        private Optional<? extends String> shippoApiVersion = Optional.empty();
 
        private Optional<? extends com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest> userParcelTemplateUpdateRequest = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Object ID of the user parcel template
         */
        public Builder userParcelTemplateObjectId(String userParcelTemplateObjectId) {
            Utils.checkNotNull(userParcelTemplateObjectId, "userParcelTemplateObjectId");
            this.userParcelTemplateObjectId = userParcelTemplateObjectId;
            return this;
        }

        /**
         * String used to pick a non-default API version to use
         */
        public Builder shippoApiVersion(String shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
            return this;
        }

        /**
         * String used to pick a non-default API version to use
         */
        public Builder shippoApiVersion(Optional<? extends String> shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = shippoApiVersion;
            return this;
        }

        public Builder userParcelTemplateUpdateRequest(com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest userParcelTemplateUpdateRequest) {
            Utils.checkNotNull(userParcelTemplateUpdateRequest, "userParcelTemplateUpdateRequest");
            this.userParcelTemplateUpdateRequest = Optional.ofNullable(userParcelTemplateUpdateRequest);
            return this;
        }

        public Builder userParcelTemplateUpdateRequest(Optional<? extends com.shippo.shippo_java_sdk.models.components.UserParcelTemplateUpdateRequest> userParcelTemplateUpdateRequest) {
            Utils.checkNotNull(userParcelTemplateUpdateRequest, "userParcelTemplateUpdateRequest");
            this.userParcelTemplateUpdateRequest = userParcelTemplateUpdateRequest;
            return this;
        }
        
        public UpdateUserParcelTemplateRequest build() {
            return new UpdateUserParcelTemplateRequest(
                userParcelTemplateObjectId,
                shippoApiVersion,
                userParcelTemplateUpdateRequest);
        }
    }
}

