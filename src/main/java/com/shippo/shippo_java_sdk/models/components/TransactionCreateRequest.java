/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class TransactionCreateRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("async")
    private Optional<? extends Boolean> async;

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label_file_type")
    private Optional<? extends LabelFileTypeEnum> labelFileType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    @JsonProperty("rate")
    private String rate;

    @JsonCreator
    public TransactionCreateRequest(
            @JsonProperty("async") Optional<? extends Boolean> async,
            @JsonProperty("label_file_type") Optional<? extends LabelFileTypeEnum> labelFileType,
            @JsonProperty("metadata") Optional<? extends String> metadata,
            @JsonProperty("rate") String rate) {
        Utils.checkNotNull(async, "async");
        Utils.checkNotNull(labelFileType, "labelFileType");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(rate, "rate");
        this.async = async;
        this.labelFileType = labelFileType;
        this.metadata = metadata;
        this.rate = rate;
    }
    
    public TransactionCreateRequest(
            String rate) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), rate);
    }

    @JsonIgnore
    public Optional<? extends Boolean> async() {
        return async;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    @JsonIgnore
    public Optional<? extends LabelFileTypeEnum> labelFileType() {
        return labelFileType;
    }

    @JsonIgnore
    public Optional<? extends String> metadata() {
        return metadata;
    }

    @JsonIgnore
    public String rate() {
        return rate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TransactionCreateRequest withAsync(boolean async) {
        Utils.checkNotNull(async, "async");
        this.async = Optional.ofNullable(async);
        return this;
    }

    public TransactionCreateRequest withAsync(Optional<? extends Boolean> async) {
        Utils.checkNotNull(async, "async");
        this.async = async;
        return this;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    public TransactionCreateRequest withLabelFileType(LabelFileTypeEnum labelFileType) {
        Utils.checkNotNull(labelFileType, "labelFileType");
        this.labelFileType = Optional.ofNullable(labelFileType);
        return this;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    public TransactionCreateRequest withLabelFileType(Optional<? extends LabelFileTypeEnum> labelFileType) {
        Utils.checkNotNull(labelFileType, "labelFileType");
        this.labelFileType = labelFileType;
        return this;
    }

    public TransactionCreateRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public TransactionCreateRequest withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public TransactionCreateRequest withRate(String rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionCreateRequest other = (TransactionCreateRequest) o;
        return 
            java.util.Objects.deepEquals(this.async, other.async) &&
            java.util.Objects.deepEquals(this.labelFileType, other.labelFileType) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.rate, other.rate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            async,
            labelFileType,
            metadata,
            rate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionCreateRequest.class,
                "async", async,
                "labelFileType", labelFileType,
                "metadata", metadata,
                "rate", rate);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> async = Optional.empty();
 
        private Optional<? extends LabelFileTypeEnum> labelFileType = Optional.empty();
 
        private Optional<? extends String> metadata = Optional.empty();
 
        private String rate;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder async(boolean async) {
            Utils.checkNotNull(async, "async");
            this.async = Optional.ofNullable(async);
            return this;
        }

        public Builder async(Optional<? extends Boolean> async) {
            Utils.checkNotNull(async, "async");
            this.async = async;
            return this;
        }

        /**
         * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
         * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
         */
        public Builder labelFileType(LabelFileTypeEnum labelFileType) {
            Utils.checkNotNull(labelFileType, "labelFileType");
            this.labelFileType = Optional.ofNullable(labelFileType);
            return this;
        }

        /**
         * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
         * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
         */
        public Builder labelFileType(Optional<? extends LabelFileTypeEnum> labelFileType) {
            Utils.checkNotNull(labelFileType, "labelFileType");
            this.labelFileType = labelFileType;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder rate(String rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }
        
        public TransactionCreateRequest build() {
            return new TransactionCreateRequest(
                async,
                labelFileType,
                metadata,
                rate);
        }
    }
}

