/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class Manifest {

    /**
     * ID of carrier account
     */
    @JsonProperty("carrier_account")
    private String carrierAccount;

    /**
     * All shipments to be submitted on this day will be closed out. 
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    @JsonProperty("shipment_date")
    private String shipmentDate;

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private Optional<? extends java.util.List<String>> transactions;

    /**
     * ID of the Address object that should be used as pickup address for the scan form. 
     * The USPS will validate this address before creating the scan form.
     */
    @JsonProperty("address_from")
    private String addressFrom;

    /**
     * An array containing the URLs to all returned manifest documents.
     */
    @JsonProperty("documents")
    private java.util.List<String> documents;

    /**
     * An array of codes and messages describing the error that occurred if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends java.util.List<String>> errors;

    /**
     * Date and time of object creation.
     */
    @JsonProperty("object_created")
    private OffsetDateTime objectCreated;

    /**
     * Unique identifier of the given object.
     */
    @JsonProperty("object_id")
    private String objectId;

    /**
     * Username of the user who created the object.
     */
    @JsonProperty("object_owner")
    private String objectOwner;

    /**
     * Date and time of last object update.
     */
    @JsonProperty("object_updated")
    private OffsetDateTime objectUpdated;

    /**
     * Indicates the status of the manifest.
     */
    @JsonProperty("status")
    private ManifestStatus status;

    @JsonCreator
    public Manifest(
            @JsonProperty("carrier_account") String carrierAccount,
            @JsonProperty("shipment_date") String shipmentDate,
            @JsonProperty("transactions") Optional<? extends java.util.List<String>> transactions,
            @JsonProperty("address_from") String addressFrom,
            @JsonProperty("documents") java.util.List<String> documents,
            @JsonProperty("errors") Optional<? extends java.util.List<String>> errors,
            @JsonProperty("object_created") OffsetDateTime objectCreated,
            @JsonProperty("object_id") String objectId,
            @JsonProperty("object_owner") String objectOwner,
            @JsonProperty("object_updated") OffsetDateTime objectUpdated,
            @JsonProperty("status") ManifestStatus status) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        Utils.checkNotNull(shipmentDate, "shipmentDate");
        Utils.checkNotNull(transactions, "transactions");
        Utils.checkNotNull(addressFrom, "addressFrom");
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(errors, "errors");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(status, "status");
        this.carrierAccount = carrierAccount;
        this.shipmentDate = shipmentDate;
        this.transactions = transactions;
        this.addressFrom = addressFrom;
        this.documents = documents;
        this.errors = errors;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectUpdated = objectUpdated;
        this.status = status;
    }
    
    public Manifest(
            String carrierAccount,
            String shipmentDate,
            String addressFrom,
            java.util.List<String> documents,
            OffsetDateTime objectCreated,
            String objectId,
            String objectOwner,
            OffsetDateTime objectUpdated,
            ManifestStatus status) {
        this(carrierAccount, shipmentDate, Optional.empty(), addressFrom, documents, Optional.empty(), objectCreated, objectId, objectOwner, objectUpdated, status);
    }

    /**
     * ID of carrier account
     */
    @JsonIgnore
    public String carrierAccount() {
        return carrierAccount;
    }

    /**
     * All shipments to be submitted on this day will be closed out. 
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    @JsonIgnore
    public String shipmentDate() {
        return shipmentDate;
    }

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    @JsonIgnore
    public Optional<? extends java.util.List<String>> transactions() {
        return transactions;
    }

    /**
     * ID of the Address object that should be used as pickup address for the scan form. 
     * The USPS will validate this address before creating the scan form.
     */
    @JsonIgnore
    public String addressFrom() {
        return addressFrom;
    }

    /**
     * An array containing the URLs to all returned manifest documents.
     */
    @JsonIgnore
    public java.util.List<String> documents() {
        return documents;
    }

    /**
     * An array of codes and messages describing the error that occurred if any.
     */
    @JsonIgnore
    public Optional<? extends java.util.List<String>> errors() {
        return errors;
    }

    /**
     * Date and time of object creation.
     */
    @JsonIgnore
    public OffsetDateTime objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given object.
     */
    @JsonIgnore
    public String objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the object.
     */
    @JsonIgnore
    public String objectOwner() {
        return objectOwner;
    }

    /**
     * Date and time of last object update.
     */
    @JsonIgnore
    public OffsetDateTime objectUpdated() {
        return objectUpdated;
    }

    /**
     * Indicates the status of the manifest.
     */
    @JsonIgnore
    public ManifestStatus status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of carrier account
     */
    public Manifest withCarrierAccount(String carrierAccount) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        this.carrierAccount = carrierAccount;
        return this;
    }

    /**
     * All shipments to be submitted on this day will be closed out. 
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    public Manifest withShipmentDate(String shipmentDate) {
        Utils.checkNotNull(shipmentDate, "shipmentDate");
        this.shipmentDate = shipmentDate;
        return this;
    }

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    public Manifest withTransactions(java.util.List<String> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = Optional.ofNullable(transactions);
        return this;
    }

    /**
     * IDs transactions to use. If you set this to null or not send this parameter, 
     * Shippo will automatically assign all applicable transactions.
     */
    public Manifest withTransactions(Optional<? extends java.util.List<String>> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = transactions;
        return this;
    }

    /**
     * ID of the Address object that should be used as pickup address for the scan form. 
     * The USPS will validate this address before creating the scan form.
     */
    public Manifest withAddressFrom(String addressFrom) {
        Utils.checkNotNull(addressFrom, "addressFrom");
        this.addressFrom = addressFrom;
        return this;
    }

    /**
     * An array containing the URLs to all returned manifest documents.
     */
    public Manifest withDocuments(java.util.List<String> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    /**
     * An array of codes and messages describing the error that occurred if any.
     */
    public Manifest withErrors(java.util.List<String> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }

    /**
     * An array of codes and messages describing the error that occurred if any.
     */
    public Manifest withErrors(Optional<? extends java.util.List<String>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    /**
     * Date and time of object creation.
     */
    public Manifest withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given object.
     */
    public Manifest withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the object.
     */
    public Manifest withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Date and time of last object update.
     */
    public Manifest withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * Indicates the status of the manifest.
     */
    public Manifest withStatus(ManifestStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Manifest other = (Manifest) o;
        return 
            java.util.Objects.deepEquals(this.carrierAccount, other.carrierAccount) &&
            java.util.Objects.deepEquals(this.shipmentDate, other.shipmentDate) &&
            java.util.Objects.deepEquals(this.transactions, other.transactions) &&
            java.util.Objects.deepEquals(this.addressFrom, other.addressFrom) &&
            java.util.Objects.deepEquals(this.documents, other.documents) &&
            java.util.Objects.deepEquals(this.errors, other.errors) &&
            java.util.Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            java.util.Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            carrierAccount,
            shipmentDate,
            transactions,
            addressFrom,
            documents,
            errors,
            objectCreated,
            objectId,
            objectOwner,
            objectUpdated,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Manifest.class,
                "carrierAccount", carrierAccount,
                "shipmentDate", shipmentDate,
                "transactions", transactions,
                "addressFrom", addressFrom,
                "documents", documents,
                "errors", errors,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectUpdated", objectUpdated,
                "status", status);
    }
    
    public final static class Builder {
 
        private String carrierAccount;
 
        private String shipmentDate;
 
        private Optional<? extends java.util.List<String>> transactions = Optional.empty();
 
        private String addressFrom;
 
        private java.util.List<String> documents;
 
        private Optional<? extends java.util.List<String>> errors = Optional.empty();
 
        private OffsetDateTime objectCreated;
 
        private String objectId;
 
        private String objectOwner;
 
        private OffsetDateTime objectUpdated;
 
        private ManifestStatus status;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of carrier account
         */
        public Builder carrierAccount(String carrierAccount) {
            Utils.checkNotNull(carrierAccount, "carrierAccount");
            this.carrierAccount = carrierAccount;
            return this;
        }

        /**
         * All shipments to be submitted on this day will be closed out. 
         * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
         */
        public Builder shipmentDate(String shipmentDate) {
            Utils.checkNotNull(shipmentDate, "shipmentDate");
            this.shipmentDate = shipmentDate;
            return this;
        }

        /**
         * IDs transactions to use. If you set this to null or not send this parameter, 
         * Shippo will automatically assign all applicable transactions.
         */
        public Builder transactions(java.util.List<String> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = Optional.ofNullable(transactions);
            return this;
        }

        /**
         * IDs transactions to use. If you set this to null or not send this parameter, 
         * Shippo will automatically assign all applicable transactions.
         */
        public Builder transactions(Optional<? extends java.util.List<String>> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = transactions;
            return this;
        }

        /**
         * ID of the Address object that should be used as pickup address for the scan form. 
         * The USPS will validate this address before creating the scan form.
         */
        public Builder addressFrom(String addressFrom) {
            Utils.checkNotNull(addressFrom, "addressFrom");
            this.addressFrom = addressFrom;
            return this;
        }

        /**
         * An array containing the URLs to all returned manifest documents.
         */
        public Builder documents(java.util.List<String> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }

        /**
         * An array of codes and messages describing the error that occurred if any.
         */
        public Builder errors(java.util.List<String> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * An array of codes and messages describing the error that occurred if any.
         */
        public Builder errors(Optional<? extends java.util.List<String>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }

        /**
         * Date and time of object creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Date and time of last object update.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * Indicates the status of the manifest.
         */
        public Builder status(ManifestStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public Manifest build() {
            return new Manifest(
                carrierAccount,
                shipmentDate,
                transactions,
                addressFrom,
                documents,
                errors,
                objectCreated,
                objectId,
                objectOwner,
                objectUpdated,
                status);
        }
    }
}

