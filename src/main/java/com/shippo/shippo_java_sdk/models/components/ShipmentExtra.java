/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * ShipmentExtra - An object holding optional extra services to be requested.
 */

public class ShipmentExtra {

    /**
     * Specify an ancillary service endorsement to provide the USPS with instructions on how to handle undeliverable-as-addressed pieces (DHL eCommerce only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ancillary_endorsement")
    private Optional<? extends AncillaryEndorsement> ancillaryEndorsement;

    /**
     * Request `true` to give carrier permission to leave the parcel in a safe place if no one answers the 
     * door (where supported). When set to `false`, if no one is available to receive the item, the parcel 
     * will not be left (*surcharges may be applicable).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authority_to_leave")
    private Optional<? extends Boolean> authorityToLeave;

    /**
     * Indicates that a shipment contains Alcohol (Fedex and UPS only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alcohol")
    private Optional<? extends Alcohol> alcohol;

    /**
     * Specify billing details (UPS, FedEx, and DHL Germany only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing")
    private Optional<? extends Billing> billing;

    /**
     * Bypasses address validation (USPS, UPS, &amp; LaserShip only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bypass_address_validation")
    private Optional<? extends Boolean> bypassAddressValidation;

    /**
     * Request carbon offsets by passing true (UPS only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carbon_neutral")
    private Optional<? extends Boolean> carbonNeutral;

    /**
     * Identifies the carrier injection site.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier_hub_id")
    private Optional<? extends String> carrierHubId;

    /**
     * Travel time in hours from fulfillment center to carrier injection site.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier_hub_travel_time")
    private Optional<? extends Long> carrierHubTravelTime;

    /**
     * Specify collection on delivery details (UPS only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("COD")
    private Optional<? extends Cod> cod;

    /**
     * Specify container type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container_type")
    private Optional<? extends String> containerType;

    /**
     * Carrier arrival time to pickup packages from the fulfillment center. 
     * UTC format: `%Y-%m-%dT%H:%M:%SZ`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("critical_pull_time")
    private Optional<? extends String> criticalPullTime;

    /**
     * Specify customer branch (Lasership only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_branch")
    private Optional<? extends String> customerBranch;

    /**
     * Specify the reference field on the label (FedEx only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_reference")
    private Optional<? extends CustomerReference> customerReference;

    /**
     * Dangerous Goods Code (DHL eCommerce only). See &lt;a href="https://api-legacy.dhlecs.com/docs/v2/appendix.html#dangerous-goods"&gt;Category Codes&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dangerous_goods_code")
    private Optional<? extends DangerousGoodsCode> dangerousGoodsCode;

    /**
     * Container for specifying the presence of dangerous materials. This is specific to USPS, and if any contents
     * are provided, only certain USPS service levels will be eligible. For more information, see our
     * &lt;a href="https://docs.goshippo.com/docs/shipments/hazmat/"&gt;guide on hazardous or dangerous materials shipping&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dangerous_goods")
    private Optional<? extends DangerousGoodsObject> dangerousGoods;

    /**
     * Specify delivery instructions. Up to 500 characters. (FedEx and OnTrac only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_instructions")
    private Optional<? extends String> deliveryInstructions;

    /**
     * Specify the department number field on the label (FedEx only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dept_number")
    private Optional<? extends DepartmentNumber> deptNumber;

    /**
     * Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dry_ice")
    private Optional<? extends DryIce> dryIce;

    /**
     * The fulfilment center where the package originates from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fulfillment_center")
    private Optional<? extends String> fulfillmentCenter;

    /**
     * To add 3rd party insurance powered by &lt;a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/"&gt;XCover&lt;/a&gt;, specify &lt;br&gt; `amount`, `content`, and `currency`. &lt;br&gt; Alternatively, you can choose carrier provided insurance by additionally specifying `provider` (UPS, FedEx and OnTrac only). &lt;br&gt;&lt;br&gt; If you do not want to add insurance to you shipment, do not set these parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insurance")
    private Optional<? extends Insurance> insurance;

    /**
     * Specify the invoice number field on the label (FedEx only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_number")
    private Optional<? extends InvoiceNumber> invoiceNumber;

    /**
     * This field specifies if it is a scan-based return shipment. See the &lt;a href="https://docs.goshippo.com/docs/shipments/returns/"&gt;Create a return shipment&lt;/a&gt; section for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_return")
    private Optional<? extends Boolean> isReturn;

    /**
     * Specify Lasership Attributes (Lasership only). Multiple options accepted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lasership_attrs")
    private Optional<? extends LasershipAttrs> lasershipAttrs;

    /**
     * Declared value (Lasership only). Defaults to `50.00`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lasership_declared_value")
    private Optional<? extends String> lasershipDeclaredValue;

    /**
     * Specify the PO number field on the label (FedEx only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    private Optional<? extends PoNumber> poNumber;

    /**
     * Required for DHL Germany Paket Sameday. Designates a desired timeframe for delivery. Format is `HHMMHHMM`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_delivery_timeframe")
    private Optional<? extends PreferredDeliveryTimeframe> preferredDeliveryTimeframe;

    /**
     * Add premium service to a shipment (DHL Germany international shipments only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("premium")
    private Optional<? extends Boolean> premium;

    /**
     * Request a QR code for a given transaction when creating a shipping label (USPS domestic and Evri UK only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("qr_code_requested")
    private Optional<? extends Boolean> qrCodeRequested;

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_1")
    private Optional<? extends String> reference1;

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters. For DHL eCommerce, this field can be used for billing reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference_2")
    private Optional<? extends String> reference2;

    /**
     * Returns retail rates instead of account-based rates (UPS and FedEx only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_retail_rates")
    private Optional<? extends Boolean> requestRetailRates;

    /**
     * Request additional return option for return shipments (UPS only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_service_type")
    private Optional<? extends ReturnServiceType> returnServiceType;

    /**
     * Specify the RMA number field on the label (FedEx only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rma_number")
    private Optional<? extends RmaNumber> rmaNumber;

    /**
     * Marks shipment as to be delivered on a Saturday.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("saturday_delivery")
    private Optional<? extends Boolean> saturdayDelivery;

    /**
     * Request standard or adult signature confirmation. You can alternatively request Certified Mail (USPS only) 
     * or Indirect signature (FedEx only) or Carrier Confirmation (Deutsche Post only).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signature_confirmation")
    private Optional<? extends SignatureConfirmation> signatureConfirmation;

    @JsonCreator
    public ShipmentExtra(
            @JsonProperty("ancillary_endorsement") Optional<? extends AncillaryEndorsement> ancillaryEndorsement,
            @JsonProperty("authority_to_leave") Optional<? extends Boolean> authorityToLeave,
            @JsonProperty("alcohol") Optional<? extends Alcohol> alcohol,
            @JsonProperty("billing") Optional<? extends Billing> billing,
            @JsonProperty("bypass_address_validation") Optional<? extends Boolean> bypassAddressValidation,
            @JsonProperty("carbon_neutral") Optional<? extends Boolean> carbonNeutral,
            @JsonProperty("carrier_hub_id") Optional<? extends String> carrierHubId,
            @JsonProperty("carrier_hub_travel_time") Optional<? extends Long> carrierHubTravelTime,
            @JsonProperty("COD") Optional<? extends Cod> cod,
            @JsonProperty("container_type") Optional<? extends String> containerType,
            @JsonProperty("critical_pull_time") Optional<? extends String> criticalPullTime,
            @JsonProperty("customer_branch") Optional<? extends String> customerBranch,
            @JsonProperty("customer_reference") Optional<? extends CustomerReference> customerReference,
            @JsonProperty("dangerous_goods_code") Optional<? extends DangerousGoodsCode> dangerousGoodsCode,
            @JsonProperty("dangerous_goods") Optional<? extends DangerousGoodsObject> dangerousGoods,
            @JsonProperty("delivery_instructions") Optional<? extends String> deliveryInstructions,
            @JsonProperty("dept_number") Optional<? extends DepartmentNumber> deptNumber,
            @JsonProperty("dry_ice") Optional<? extends DryIce> dryIce,
            @JsonProperty("fulfillment_center") Optional<? extends String> fulfillmentCenter,
            @JsonProperty("insurance") Optional<? extends Insurance> insurance,
            @JsonProperty("invoice_number") Optional<? extends InvoiceNumber> invoiceNumber,
            @JsonProperty("is_return") Optional<? extends Boolean> isReturn,
            @JsonProperty("lasership_attrs") Optional<? extends LasershipAttrs> lasershipAttrs,
            @JsonProperty("lasership_declared_value") Optional<? extends String> lasershipDeclaredValue,
            @JsonProperty("po_number") Optional<? extends PoNumber> poNumber,
            @JsonProperty("preferred_delivery_timeframe") Optional<? extends PreferredDeliveryTimeframe> preferredDeliveryTimeframe,
            @JsonProperty("premium") Optional<? extends Boolean> premium,
            @JsonProperty("qr_code_requested") Optional<? extends Boolean> qrCodeRequested,
            @JsonProperty("reference_1") Optional<? extends String> reference1,
            @JsonProperty("reference_2") Optional<? extends String> reference2,
            @JsonProperty("request_retail_rates") Optional<? extends Boolean> requestRetailRates,
            @JsonProperty("return_service_type") Optional<? extends ReturnServiceType> returnServiceType,
            @JsonProperty("rma_number") Optional<? extends RmaNumber> rmaNumber,
            @JsonProperty("saturday_delivery") Optional<? extends Boolean> saturdayDelivery,
            @JsonProperty("signature_confirmation") Optional<? extends SignatureConfirmation> signatureConfirmation) {
        Utils.checkNotNull(ancillaryEndorsement, "ancillaryEndorsement");
        Utils.checkNotNull(authorityToLeave, "authorityToLeave");
        Utils.checkNotNull(alcohol, "alcohol");
        Utils.checkNotNull(billing, "billing");
        Utils.checkNotNull(bypassAddressValidation, "bypassAddressValidation");
        Utils.checkNotNull(carbonNeutral, "carbonNeutral");
        Utils.checkNotNull(carrierHubId, "carrierHubId");
        Utils.checkNotNull(carrierHubTravelTime, "carrierHubTravelTime");
        Utils.checkNotNull(cod, "cod");
        Utils.checkNotNull(containerType, "containerType");
        Utils.checkNotNull(criticalPullTime, "criticalPullTime");
        Utils.checkNotNull(customerBranch, "customerBranch");
        Utils.checkNotNull(customerReference, "customerReference");
        Utils.checkNotNull(dangerousGoodsCode, "dangerousGoodsCode");
        Utils.checkNotNull(dangerousGoods, "dangerousGoods");
        Utils.checkNotNull(deliveryInstructions, "deliveryInstructions");
        Utils.checkNotNull(deptNumber, "deptNumber");
        Utils.checkNotNull(dryIce, "dryIce");
        Utils.checkNotNull(fulfillmentCenter, "fulfillmentCenter");
        Utils.checkNotNull(insurance, "insurance");
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        Utils.checkNotNull(isReturn, "isReturn");
        Utils.checkNotNull(lasershipAttrs, "lasershipAttrs");
        Utils.checkNotNull(lasershipDeclaredValue, "lasershipDeclaredValue");
        Utils.checkNotNull(poNumber, "poNumber");
        Utils.checkNotNull(preferredDeliveryTimeframe, "preferredDeliveryTimeframe");
        Utils.checkNotNull(premium, "premium");
        Utils.checkNotNull(qrCodeRequested, "qrCodeRequested");
        Utils.checkNotNull(reference1, "reference1");
        Utils.checkNotNull(reference2, "reference2");
        Utils.checkNotNull(requestRetailRates, "requestRetailRates");
        Utils.checkNotNull(returnServiceType, "returnServiceType");
        Utils.checkNotNull(rmaNumber, "rmaNumber");
        Utils.checkNotNull(saturdayDelivery, "saturdayDelivery");
        Utils.checkNotNull(signatureConfirmation, "signatureConfirmation");
        this.ancillaryEndorsement = ancillaryEndorsement;
        this.authorityToLeave = authorityToLeave;
        this.alcohol = alcohol;
        this.billing = billing;
        this.bypassAddressValidation = bypassAddressValidation;
        this.carbonNeutral = carbonNeutral;
        this.carrierHubId = carrierHubId;
        this.carrierHubTravelTime = carrierHubTravelTime;
        this.cod = cod;
        this.containerType = containerType;
        this.criticalPullTime = criticalPullTime;
        this.customerBranch = customerBranch;
        this.customerReference = customerReference;
        this.dangerousGoodsCode = dangerousGoodsCode;
        this.dangerousGoods = dangerousGoods;
        this.deliveryInstructions = deliveryInstructions;
        this.deptNumber = deptNumber;
        this.dryIce = dryIce;
        this.fulfillmentCenter = fulfillmentCenter;
        this.insurance = insurance;
        this.invoiceNumber = invoiceNumber;
        this.isReturn = isReturn;
        this.lasershipAttrs = lasershipAttrs;
        this.lasershipDeclaredValue = lasershipDeclaredValue;
        this.poNumber = poNumber;
        this.preferredDeliveryTimeframe = preferredDeliveryTimeframe;
        this.premium = premium;
        this.qrCodeRequested = qrCodeRequested;
        this.reference1 = reference1;
        this.reference2 = reference2;
        this.requestRetailRates = requestRetailRates;
        this.returnServiceType = returnServiceType;
        this.rmaNumber = rmaNumber;
        this.saturdayDelivery = saturdayDelivery;
        this.signatureConfirmation = signatureConfirmation;
    }
    
    public ShipmentExtra() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Specify an ancillary service endorsement to provide the USPS with instructions on how to handle undeliverable-as-addressed pieces (DHL eCommerce only).
     */
    @JsonIgnore
    public Optional<? extends AncillaryEndorsement> ancillaryEndorsement() {
        return ancillaryEndorsement;
    }

    /**
     * Request `true` to give carrier permission to leave the parcel in a safe place if no one answers the 
     * door (where supported). When set to `false`, if no one is available to receive the item, the parcel 
     * will not be left (*surcharges may be applicable).
     */
    @JsonIgnore
    public Optional<? extends Boolean> authorityToLeave() {
        return authorityToLeave;
    }

    /**
     * Indicates that a shipment contains Alcohol (Fedex and UPS only).
     */
    @JsonIgnore
    public Optional<? extends Alcohol> alcohol() {
        return alcohol;
    }

    /**
     * Specify billing details (UPS, FedEx, and DHL Germany only).
     */
    @JsonIgnore
    public Optional<? extends Billing> billing() {
        return billing;
    }

    /**
     * Bypasses address validation (USPS, UPS, &amp; LaserShip only).
     */
    @JsonIgnore
    public Optional<? extends Boolean> bypassAddressValidation() {
        return bypassAddressValidation;
    }

    /**
     * Request carbon offsets by passing true (UPS only).
     */
    @JsonIgnore
    public Optional<? extends Boolean> carbonNeutral() {
        return carbonNeutral;
    }

    /**
     * Identifies the carrier injection site.
     */
    @JsonIgnore
    public Optional<? extends String> carrierHubId() {
        return carrierHubId;
    }

    /**
     * Travel time in hours from fulfillment center to carrier injection site.
     */
    @JsonIgnore
    public Optional<? extends Long> carrierHubTravelTime() {
        return carrierHubTravelTime;
    }

    /**
     * Specify collection on delivery details (UPS only).
     */
    @JsonIgnore
    public Optional<? extends Cod> cod() {
        return cod;
    }

    /**
     * Specify container type.
     */
    @JsonIgnore
    public Optional<? extends String> containerType() {
        return containerType;
    }

    /**
     * Carrier arrival time to pickup packages from the fulfillment center. 
     * UTC format: `%Y-%m-%dT%H:%M:%SZ`
     */
    @JsonIgnore
    public Optional<? extends String> criticalPullTime() {
        return criticalPullTime;
    }

    /**
     * Specify customer branch (Lasership only).
     */
    @JsonIgnore
    public Optional<? extends String> customerBranch() {
        return customerBranch;
    }

    /**
     * Specify the reference field on the label (FedEx only).
     */
    @JsonIgnore
    public Optional<? extends CustomerReference> customerReference() {
        return customerReference;
    }

    /**
     * Dangerous Goods Code (DHL eCommerce only). See &lt;a href="https://api-legacy.dhlecs.com/docs/v2/appendix.html#dangerous-goods"&gt;Category Codes&lt;/a&gt;
     */
    @JsonIgnore
    public Optional<? extends DangerousGoodsCode> dangerousGoodsCode() {
        return dangerousGoodsCode;
    }

    /**
     * Container for specifying the presence of dangerous materials. This is specific to USPS, and if any contents
     * are provided, only certain USPS service levels will be eligible. For more information, see our
     * &lt;a href="https://docs.goshippo.com/docs/shipments/hazmat/"&gt;guide on hazardous or dangerous materials shipping&lt;/a&gt;.
     */
    @JsonIgnore
    public Optional<? extends DangerousGoodsObject> dangerousGoods() {
        return dangerousGoods;
    }

    /**
     * Specify delivery instructions. Up to 500 characters. (FedEx and OnTrac only).
     */
    @JsonIgnore
    public Optional<? extends String> deliveryInstructions() {
        return deliveryInstructions;
    }

    /**
     * Specify the department number field on the label (FedEx only).
     */
    @JsonIgnore
    public Optional<? extends DepartmentNumber> deptNumber() {
        return deptNumber;
    }

    /**
     * Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
     */
    @JsonIgnore
    public Optional<? extends DryIce> dryIce() {
        return dryIce;
    }

    /**
     * The fulfilment center where the package originates from.
     */
    @JsonIgnore
    public Optional<? extends String> fulfillmentCenter() {
        return fulfillmentCenter;
    }

    /**
     * To add 3rd party insurance powered by &lt;a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/"&gt;XCover&lt;/a&gt;, specify &lt;br&gt; `amount`, `content`, and `currency`. &lt;br&gt; Alternatively, you can choose carrier provided insurance by additionally specifying `provider` (UPS, FedEx and OnTrac only). &lt;br&gt;&lt;br&gt; If you do not want to add insurance to you shipment, do not set these parameters.
     */
    @JsonIgnore
    public Optional<? extends Insurance> insurance() {
        return insurance;
    }

    /**
     * Specify the invoice number field on the label (FedEx only).
     */
    @JsonIgnore
    public Optional<? extends InvoiceNumber> invoiceNumber() {
        return invoiceNumber;
    }

    /**
     * This field specifies if it is a scan-based return shipment. See the &lt;a href="https://docs.goshippo.com/docs/shipments/returns/"&gt;Create a return shipment&lt;/a&gt; section for more details.
     */
    @JsonIgnore
    public Optional<? extends Boolean> isReturn() {
        return isReturn;
    }

    /**
     * Specify Lasership Attributes (Lasership only). Multiple options accepted.
     */
    @JsonIgnore
    public Optional<? extends LasershipAttrs> lasershipAttrs() {
        return lasershipAttrs;
    }

    /**
     * Declared value (Lasership only). Defaults to `50.00`.
     */
    @JsonIgnore
    public Optional<? extends String> lasershipDeclaredValue() {
        return lasershipDeclaredValue;
    }

    /**
     * Specify the PO number field on the label (FedEx only).
     */
    @JsonIgnore
    public Optional<? extends PoNumber> poNumber() {
        return poNumber;
    }

    /**
     * Required for DHL Germany Paket Sameday. Designates a desired timeframe for delivery. Format is `HHMMHHMM`
     */
    @JsonIgnore
    public Optional<? extends PreferredDeliveryTimeframe> preferredDeliveryTimeframe() {
        return preferredDeliveryTimeframe;
    }

    /**
     * Add premium service to a shipment (DHL Germany international shipments only).
     */
    @JsonIgnore
    public Optional<? extends Boolean> premium() {
        return premium;
    }

    /**
     * Request a QR code for a given transaction when creating a shipping label (USPS domestic and Evri UK only).
     */
    @JsonIgnore
    public Optional<? extends Boolean> qrCodeRequested() {
        return qrCodeRequested;
    }

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters.
     */
    @JsonIgnore
    public Optional<? extends String> reference1() {
        return reference1;
    }

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters. For DHL eCommerce, this field can be used for billing reference.
     */
    @JsonIgnore
    public Optional<? extends String> reference2() {
        return reference2;
    }

    /**
     * Returns retail rates instead of account-based rates (UPS and FedEx only).
     */
    @JsonIgnore
    public Optional<? extends Boolean> requestRetailRates() {
        return requestRetailRates;
    }

    /**
     * Request additional return option for return shipments (UPS only).
     */
    @JsonIgnore
    public Optional<? extends ReturnServiceType> returnServiceType() {
        return returnServiceType;
    }

    /**
     * Specify the RMA number field on the label (FedEx only).
     */
    @JsonIgnore
    public Optional<? extends RmaNumber> rmaNumber() {
        return rmaNumber;
    }

    /**
     * Marks shipment as to be delivered on a Saturday.
     */
    @JsonIgnore
    public Optional<? extends Boolean> saturdayDelivery() {
        return saturdayDelivery;
    }

    /**
     * Request standard or adult signature confirmation. You can alternatively request Certified Mail (USPS only) 
     * or Indirect signature (FedEx only) or Carrier Confirmation (Deutsche Post only).
     */
    @JsonIgnore
    public Optional<? extends SignatureConfirmation> signatureConfirmation() {
        return signatureConfirmation;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Specify an ancillary service endorsement to provide the USPS with instructions on how to handle undeliverable-as-addressed pieces (DHL eCommerce only).
     */
    public ShipmentExtra withAncillaryEndorsement(AncillaryEndorsement ancillaryEndorsement) {
        Utils.checkNotNull(ancillaryEndorsement, "ancillaryEndorsement");
        this.ancillaryEndorsement = Optional.ofNullable(ancillaryEndorsement);
        return this;
    }

    /**
     * Specify an ancillary service endorsement to provide the USPS with instructions on how to handle undeliverable-as-addressed pieces (DHL eCommerce only).
     */
    public ShipmentExtra withAncillaryEndorsement(Optional<? extends AncillaryEndorsement> ancillaryEndorsement) {
        Utils.checkNotNull(ancillaryEndorsement, "ancillaryEndorsement");
        this.ancillaryEndorsement = ancillaryEndorsement;
        return this;
    }

    /**
     * Request `true` to give carrier permission to leave the parcel in a safe place if no one answers the 
     * door (where supported). When set to `false`, if no one is available to receive the item, the parcel 
     * will not be left (*surcharges may be applicable).
     */
    public ShipmentExtra withAuthorityToLeave(boolean authorityToLeave) {
        Utils.checkNotNull(authorityToLeave, "authorityToLeave");
        this.authorityToLeave = Optional.ofNullable(authorityToLeave);
        return this;
    }

    /**
     * Request `true` to give carrier permission to leave the parcel in a safe place if no one answers the 
     * door (where supported). When set to `false`, if no one is available to receive the item, the parcel 
     * will not be left (*surcharges may be applicable).
     */
    public ShipmentExtra withAuthorityToLeave(Optional<? extends Boolean> authorityToLeave) {
        Utils.checkNotNull(authorityToLeave, "authorityToLeave");
        this.authorityToLeave = authorityToLeave;
        return this;
    }

    /**
     * Indicates that a shipment contains Alcohol (Fedex and UPS only).
     */
    public ShipmentExtra withAlcohol(Alcohol alcohol) {
        Utils.checkNotNull(alcohol, "alcohol");
        this.alcohol = Optional.ofNullable(alcohol);
        return this;
    }

    /**
     * Indicates that a shipment contains Alcohol (Fedex and UPS only).
     */
    public ShipmentExtra withAlcohol(Optional<? extends Alcohol> alcohol) {
        Utils.checkNotNull(alcohol, "alcohol");
        this.alcohol = alcohol;
        return this;
    }

    /**
     * Specify billing details (UPS, FedEx, and DHL Germany only).
     */
    public ShipmentExtra withBilling(Billing billing) {
        Utils.checkNotNull(billing, "billing");
        this.billing = Optional.ofNullable(billing);
        return this;
    }

    /**
     * Specify billing details (UPS, FedEx, and DHL Germany only).
     */
    public ShipmentExtra withBilling(Optional<? extends Billing> billing) {
        Utils.checkNotNull(billing, "billing");
        this.billing = billing;
        return this;
    }

    /**
     * Bypasses address validation (USPS, UPS, &amp; LaserShip only).
     */
    public ShipmentExtra withBypassAddressValidation(boolean bypassAddressValidation) {
        Utils.checkNotNull(bypassAddressValidation, "bypassAddressValidation");
        this.bypassAddressValidation = Optional.ofNullable(bypassAddressValidation);
        return this;
    }

    /**
     * Bypasses address validation (USPS, UPS, &amp; LaserShip only).
     */
    public ShipmentExtra withBypassAddressValidation(Optional<? extends Boolean> bypassAddressValidation) {
        Utils.checkNotNull(bypassAddressValidation, "bypassAddressValidation");
        this.bypassAddressValidation = bypassAddressValidation;
        return this;
    }

    /**
     * Request carbon offsets by passing true (UPS only).
     */
    public ShipmentExtra withCarbonNeutral(boolean carbonNeutral) {
        Utils.checkNotNull(carbonNeutral, "carbonNeutral");
        this.carbonNeutral = Optional.ofNullable(carbonNeutral);
        return this;
    }

    /**
     * Request carbon offsets by passing true (UPS only).
     */
    public ShipmentExtra withCarbonNeutral(Optional<? extends Boolean> carbonNeutral) {
        Utils.checkNotNull(carbonNeutral, "carbonNeutral");
        this.carbonNeutral = carbonNeutral;
        return this;
    }

    /**
     * Identifies the carrier injection site.
     */
    public ShipmentExtra withCarrierHubId(String carrierHubId) {
        Utils.checkNotNull(carrierHubId, "carrierHubId");
        this.carrierHubId = Optional.ofNullable(carrierHubId);
        return this;
    }

    /**
     * Identifies the carrier injection site.
     */
    public ShipmentExtra withCarrierHubId(Optional<? extends String> carrierHubId) {
        Utils.checkNotNull(carrierHubId, "carrierHubId");
        this.carrierHubId = carrierHubId;
        return this;
    }

    /**
     * Travel time in hours from fulfillment center to carrier injection site.
     */
    public ShipmentExtra withCarrierHubTravelTime(long carrierHubTravelTime) {
        Utils.checkNotNull(carrierHubTravelTime, "carrierHubTravelTime");
        this.carrierHubTravelTime = Optional.ofNullable(carrierHubTravelTime);
        return this;
    }

    /**
     * Travel time in hours from fulfillment center to carrier injection site.
     */
    public ShipmentExtra withCarrierHubTravelTime(Optional<? extends Long> carrierHubTravelTime) {
        Utils.checkNotNull(carrierHubTravelTime, "carrierHubTravelTime");
        this.carrierHubTravelTime = carrierHubTravelTime;
        return this;
    }

    /**
     * Specify collection on delivery details (UPS only).
     */
    public ShipmentExtra withCod(Cod cod) {
        Utils.checkNotNull(cod, "cod");
        this.cod = Optional.ofNullable(cod);
        return this;
    }

    /**
     * Specify collection on delivery details (UPS only).
     */
    public ShipmentExtra withCod(Optional<? extends Cod> cod) {
        Utils.checkNotNull(cod, "cod");
        this.cod = cod;
        return this;
    }

    /**
     * Specify container type.
     */
    public ShipmentExtra withContainerType(String containerType) {
        Utils.checkNotNull(containerType, "containerType");
        this.containerType = Optional.ofNullable(containerType);
        return this;
    }

    /**
     * Specify container type.
     */
    public ShipmentExtra withContainerType(Optional<? extends String> containerType) {
        Utils.checkNotNull(containerType, "containerType");
        this.containerType = containerType;
        return this;
    }

    /**
     * Carrier arrival time to pickup packages from the fulfillment center. 
     * UTC format: `%Y-%m-%dT%H:%M:%SZ`
     */
    public ShipmentExtra withCriticalPullTime(String criticalPullTime) {
        Utils.checkNotNull(criticalPullTime, "criticalPullTime");
        this.criticalPullTime = Optional.ofNullable(criticalPullTime);
        return this;
    }

    /**
     * Carrier arrival time to pickup packages from the fulfillment center. 
     * UTC format: `%Y-%m-%dT%H:%M:%SZ`
     */
    public ShipmentExtra withCriticalPullTime(Optional<? extends String> criticalPullTime) {
        Utils.checkNotNull(criticalPullTime, "criticalPullTime");
        this.criticalPullTime = criticalPullTime;
        return this;
    }

    /**
     * Specify customer branch (Lasership only).
     */
    public ShipmentExtra withCustomerBranch(String customerBranch) {
        Utils.checkNotNull(customerBranch, "customerBranch");
        this.customerBranch = Optional.ofNullable(customerBranch);
        return this;
    }

    /**
     * Specify customer branch (Lasership only).
     */
    public ShipmentExtra withCustomerBranch(Optional<? extends String> customerBranch) {
        Utils.checkNotNull(customerBranch, "customerBranch");
        this.customerBranch = customerBranch;
        return this;
    }

    /**
     * Specify the reference field on the label (FedEx only).
     */
    public ShipmentExtra withCustomerReference(CustomerReference customerReference) {
        Utils.checkNotNull(customerReference, "customerReference");
        this.customerReference = Optional.ofNullable(customerReference);
        return this;
    }

    /**
     * Specify the reference field on the label (FedEx only).
     */
    public ShipmentExtra withCustomerReference(Optional<? extends CustomerReference> customerReference) {
        Utils.checkNotNull(customerReference, "customerReference");
        this.customerReference = customerReference;
        return this;
    }

    /**
     * Dangerous Goods Code (DHL eCommerce only). See &lt;a href="https://api-legacy.dhlecs.com/docs/v2/appendix.html#dangerous-goods"&gt;Category Codes&lt;/a&gt;
     */
    public ShipmentExtra withDangerousGoodsCode(DangerousGoodsCode dangerousGoodsCode) {
        Utils.checkNotNull(dangerousGoodsCode, "dangerousGoodsCode");
        this.dangerousGoodsCode = Optional.ofNullable(dangerousGoodsCode);
        return this;
    }

    /**
     * Dangerous Goods Code (DHL eCommerce only). See &lt;a href="https://api-legacy.dhlecs.com/docs/v2/appendix.html#dangerous-goods"&gt;Category Codes&lt;/a&gt;
     */
    public ShipmentExtra withDangerousGoodsCode(Optional<? extends DangerousGoodsCode> dangerousGoodsCode) {
        Utils.checkNotNull(dangerousGoodsCode, "dangerousGoodsCode");
        this.dangerousGoodsCode = dangerousGoodsCode;
        return this;
    }

    /**
     * Container for specifying the presence of dangerous materials. This is specific to USPS, and if any contents
     * are provided, only certain USPS service levels will be eligible. For more information, see our
     * &lt;a href="https://docs.goshippo.com/docs/shipments/hazmat/"&gt;guide on hazardous or dangerous materials shipping&lt;/a&gt;.
     */
    public ShipmentExtra withDangerousGoods(DangerousGoodsObject dangerousGoods) {
        Utils.checkNotNull(dangerousGoods, "dangerousGoods");
        this.dangerousGoods = Optional.ofNullable(dangerousGoods);
        return this;
    }

    /**
     * Container for specifying the presence of dangerous materials. This is specific to USPS, and if any contents
     * are provided, only certain USPS service levels will be eligible. For more information, see our
     * &lt;a href="https://docs.goshippo.com/docs/shipments/hazmat/"&gt;guide on hazardous or dangerous materials shipping&lt;/a&gt;.
     */
    public ShipmentExtra withDangerousGoods(Optional<? extends DangerousGoodsObject> dangerousGoods) {
        Utils.checkNotNull(dangerousGoods, "dangerousGoods");
        this.dangerousGoods = dangerousGoods;
        return this;
    }

    /**
     * Specify delivery instructions. Up to 500 characters. (FedEx and OnTrac only).
     */
    public ShipmentExtra withDeliveryInstructions(String deliveryInstructions) {
        Utils.checkNotNull(deliveryInstructions, "deliveryInstructions");
        this.deliveryInstructions = Optional.ofNullable(deliveryInstructions);
        return this;
    }

    /**
     * Specify delivery instructions. Up to 500 characters. (FedEx and OnTrac only).
     */
    public ShipmentExtra withDeliveryInstructions(Optional<? extends String> deliveryInstructions) {
        Utils.checkNotNull(deliveryInstructions, "deliveryInstructions");
        this.deliveryInstructions = deliveryInstructions;
        return this;
    }

    /**
     * Specify the department number field on the label (FedEx only).
     */
    public ShipmentExtra withDeptNumber(DepartmentNumber deptNumber) {
        Utils.checkNotNull(deptNumber, "deptNumber");
        this.deptNumber = Optional.ofNullable(deptNumber);
        return this;
    }

    /**
     * Specify the department number field on the label (FedEx only).
     */
    public ShipmentExtra withDeptNumber(Optional<? extends DepartmentNumber> deptNumber) {
        Utils.checkNotNull(deptNumber, "deptNumber");
        this.deptNumber = deptNumber;
        return this;
    }

    /**
     * Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
     */
    public ShipmentExtra withDryIce(DryIce dryIce) {
        Utils.checkNotNull(dryIce, "dryIce");
        this.dryIce = Optional.ofNullable(dryIce);
        return this;
    }

    /**
     * Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
     */
    public ShipmentExtra withDryIce(Optional<? extends DryIce> dryIce) {
        Utils.checkNotNull(dryIce, "dryIce");
        this.dryIce = dryIce;
        return this;
    }

    /**
     * The fulfilment center where the package originates from.
     */
    public ShipmentExtra withFulfillmentCenter(String fulfillmentCenter) {
        Utils.checkNotNull(fulfillmentCenter, "fulfillmentCenter");
        this.fulfillmentCenter = Optional.ofNullable(fulfillmentCenter);
        return this;
    }

    /**
     * The fulfilment center where the package originates from.
     */
    public ShipmentExtra withFulfillmentCenter(Optional<? extends String> fulfillmentCenter) {
        Utils.checkNotNull(fulfillmentCenter, "fulfillmentCenter");
        this.fulfillmentCenter = fulfillmentCenter;
        return this;
    }

    /**
     * To add 3rd party insurance powered by &lt;a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/"&gt;XCover&lt;/a&gt;, specify &lt;br&gt; `amount`, `content`, and `currency`. &lt;br&gt; Alternatively, you can choose carrier provided insurance by additionally specifying `provider` (UPS, FedEx and OnTrac only). &lt;br&gt;&lt;br&gt; If you do not want to add insurance to you shipment, do not set these parameters.
     */
    public ShipmentExtra withInsurance(Insurance insurance) {
        Utils.checkNotNull(insurance, "insurance");
        this.insurance = Optional.ofNullable(insurance);
        return this;
    }

    /**
     * To add 3rd party insurance powered by &lt;a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/"&gt;XCover&lt;/a&gt;, specify &lt;br&gt; `amount`, `content`, and `currency`. &lt;br&gt; Alternatively, you can choose carrier provided insurance by additionally specifying `provider` (UPS, FedEx and OnTrac only). &lt;br&gt;&lt;br&gt; If you do not want to add insurance to you shipment, do not set these parameters.
     */
    public ShipmentExtra withInsurance(Optional<? extends Insurance> insurance) {
        Utils.checkNotNull(insurance, "insurance");
        this.insurance = insurance;
        return this;
    }

    /**
     * Specify the invoice number field on the label (FedEx only).
     */
    public ShipmentExtra withInvoiceNumber(InvoiceNumber invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = Optional.ofNullable(invoiceNumber);
        return this;
    }

    /**
     * Specify the invoice number field on the label (FedEx only).
     */
    public ShipmentExtra withInvoiceNumber(Optional<? extends InvoiceNumber> invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = invoiceNumber;
        return this;
    }

    /**
     * This field specifies if it is a scan-based return shipment. See the &lt;a href="https://docs.goshippo.com/docs/shipments/returns/"&gt;Create a return shipment&lt;/a&gt; section for more details.
     */
    public ShipmentExtra withIsReturn(boolean isReturn) {
        Utils.checkNotNull(isReturn, "isReturn");
        this.isReturn = Optional.ofNullable(isReturn);
        return this;
    }

    /**
     * This field specifies if it is a scan-based return shipment. See the &lt;a href="https://docs.goshippo.com/docs/shipments/returns/"&gt;Create a return shipment&lt;/a&gt; section for more details.
     */
    public ShipmentExtra withIsReturn(Optional<? extends Boolean> isReturn) {
        Utils.checkNotNull(isReturn, "isReturn");
        this.isReturn = isReturn;
        return this;
    }

    /**
     * Specify Lasership Attributes (Lasership only). Multiple options accepted.
     */
    public ShipmentExtra withLasershipAttrs(LasershipAttrs lasershipAttrs) {
        Utils.checkNotNull(lasershipAttrs, "lasershipAttrs");
        this.lasershipAttrs = Optional.ofNullable(lasershipAttrs);
        return this;
    }

    /**
     * Specify Lasership Attributes (Lasership only). Multiple options accepted.
     */
    public ShipmentExtra withLasershipAttrs(Optional<? extends LasershipAttrs> lasershipAttrs) {
        Utils.checkNotNull(lasershipAttrs, "lasershipAttrs");
        this.lasershipAttrs = lasershipAttrs;
        return this;
    }

    /**
     * Declared value (Lasership only). Defaults to `50.00`.
     */
    public ShipmentExtra withLasershipDeclaredValue(String lasershipDeclaredValue) {
        Utils.checkNotNull(lasershipDeclaredValue, "lasershipDeclaredValue");
        this.lasershipDeclaredValue = Optional.ofNullable(lasershipDeclaredValue);
        return this;
    }

    /**
     * Declared value (Lasership only). Defaults to `50.00`.
     */
    public ShipmentExtra withLasershipDeclaredValue(Optional<? extends String> lasershipDeclaredValue) {
        Utils.checkNotNull(lasershipDeclaredValue, "lasershipDeclaredValue");
        this.lasershipDeclaredValue = lasershipDeclaredValue;
        return this;
    }

    /**
     * Specify the PO number field on the label (FedEx only).
     */
    public ShipmentExtra withPoNumber(PoNumber poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = Optional.ofNullable(poNumber);
        return this;
    }

    /**
     * Specify the PO number field on the label (FedEx only).
     */
    public ShipmentExtra withPoNumber(Optional<? extends PoNumber> poNumber) {
        Utils.checkNotNull(poNumber, "poNumber");
        this.poNumber = poNumber;
        return this;
    }

    /**
     * Required for DHL Germany Paket Sameday. Designates a desired timeframe for delivery. Format is `HHMMHHMM`
     */
    public ShipmentExtra withPreferredDeliveryTimeframe(PreferredDeliveryTimeframe preferredDeliveryTimeframe) {
        Utils.checkNotNull(preferredDeliveryTimeframe, "preferredDeliveryTimeframe");
        this.preferredDeliveryTimeframe = Optional.ofNullable(preferredDeliveryTimeframe);
        return this;
    }

    /**
     * Required for DHL Germany Paket Sameday. Designates a desired timeframe for delivery. Format is `HHMMHHMM`
     */
    public ShipmentExtra withPreferredDeliveryTimeframe(Optional<? extends PreferredDeliveryTimeframe> preferredDeliveryTimeframe) {
        Utils.checkNotNull(preferredDeliveryTimeframe, "preferredDeliveryTimeframe");
        this.preferredDeliveryTimeframe = preferredDeliveryTimeframe;
        return this;
    }

    /**
     * Add premium service to a shipment (DHL Germany international shipments only).
     */
    public ShipmentExtra withPremium(boolean premium) {
        Utils.checkNotNull(premium, "premium");
        this.premium = Optional.ofNullable(premium);
        return this;
    }

    /**
     * Add premium service to a shipment (DHL Germany international shipments only).
     */
    public ShipmentExtra withPremium(Optional<? extends Boolean> premium) {
        Utils.checkNotNull(premium, "premium");
        this.premium = premium;
        return this;
    }

    /**
     * Request a QR code for a given transaction when creating a shipping label (USPS domestic and Evri UK only).
     */
    public ShipmentExtra withQrCodeRequested(boolean qrCodeRequested) {
        Utils.checkNotNull(qrCodeRequested, "qrCodeRequested");
        this.qrCodeRequested = Optional.ofNullable(qrCodeRequested);
        return this;
    }

    /**
     * Request a QR code for a given transaction when creating a shipping label (USPS domestic and Evri UK only).
     */
    public ShipmentExtra withQrCodeRequested(Optional<? extends Boolean> qrCodeRequested) {
        Utils.checkNotNull(qrCodeRequested, "qrCodeRequested");
        this.qrCodeRequested = qrCodeRequested;
        return this;
    }

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters.
     */
    public ShipmentExtra withReference1(String reference1) {
        Utils.checkNotNull(reference1, "reference1");
        this.reference1 = Optional.ofNullable(reference1);
        return this;
    }

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters.
     */
    public ShipmentExtra withReference1(Optional<? extends String> reference1) {
        Utils.checkNotNull(reference1, "reference1");
        this.reference1 = reference1;
        return this;
    }

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters. For DHL eCommerce, this field can be used for billing reference.
     */
    public ShipmentExtra withReference2(String reference2) {
        Utils.checkNotNull(reference2, "reference2");
        this.reference2 = Optional.ofNullable(reference2);
        return this;
    }

    /**
     * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters. For DHL eCommerce, this field can be used for billing reference.
     */
    public ShipmentExtra withReference2(Optional<? extends String> reference2) {
        Utils.checkNotNull(reference2, "reference2");
        this.reference2 = reference2;
        return this;
    }

    /**
     * Returns retail rates instead of account-based rates (UPS and FedEx only).
     */
    public ShipmentExtra withRequestRetailRates(boolean requestRetailRates) {
        Utils.checkNotNull(requestRetailRates, "requestRetailRates");
        this.requestRetailRates = Optional.ofNullable(requestRetailRates);
        return this;
    }

    /**
     * Returns retail rates instead of account-based rates (UPS and FedEx only).
     */
    public ShipmentExtra withRequestRetailRates(Optional<? extends Boolean> requestRetailRates) {
        Utils.checkNotNull(requestRetailRates, "requestRetailRates");
        this.requestRetailRates = requestRetailRates;
        return this;
    }

    /**
     * Request additional return option for return shipments (UPS only).
     */
    public ShipmentExtra withReturnServiceType(ReturnServiceType returnServiceType) {
        Utils.checkNotNull(returnServiceType, "returnServiceType");
        this.returnServiceType = Optional.ofNullable(returnServiceType);
        return this;
    }

    /**
     * Request additional return option for return shipments (UPS only).
     */
    public ShipmentExtra withReturnServiceType(Optional<? extends ReturnServiceType> returnServiceType) {
        Utils.checkNotNull(returnServiceType, "returnServiceType");
        this.returnServiceType = returnServiceType;
        return this;
    }

    /**
     * Specify the RMA number field on the label (FedEx only).
     */
    public ShipmentExtra withRmaNumber(RmaNumber rmaNumber) {
        Utils.checkNotNull(rmaNumber, "rmaNumber");
        this.rmaNumber = Optional.ofNullable(rmaNumber);
        return this;
    }

    /**
     * Specify the RMA number field on the label (FedEx only).
     */
    public ShipmentExtra withRmaNumber(Optional<? extends RmaNumber> rmaNumber) {
        Utils.checkNotNull(rmaNumber, "rmaNumber");
        this.rmaNumber = rmaNumber;
        return this;
    }

    /**
     * Marks shipment as to be delivered on a Saturday.
     */
    public ShipmentExtra withSaturdayDelivery(boolean saturdayDelivery) {
        Utils.checkNotNull(saturdayDelivery, "saturdayDelivery");
        this.saturdayDelivery = Optional.ofNullable(saturdayDelivery);
        return this;
    }

    /**
     * Marks shipment as to be delivered on a Saturday.
     */
    public ShipmentExtra withSaturdayDelivery(Optional<? extends Boolean> saturdayDelivery) {
        Utils.checkNotNull(saturdayDelivery, "saturdayDelivery");
        this.saturdayDelivery = saturdayDelivery;
        return this;
    }

    /**
     * Request standard or adult signature confirmation. You can alternatively request Certified Mail (USPS only) 
     * or Indirect signature (FedEx only) or Carrier Confirmation (Deutsche Post only).
     */
    public ShipmentExtra withSignatureConfirmation(SignatureConfirmation signatureConfirmation) {
        Utils.checkNotNull(signatureConfirmation, "signatureConfirmation");
        this.signatureConfirmation = Optional.ofNullable(signatureConfirmation);
        return this;
    }

    /**
     * Request standard or adult signature confirmation. You can alternatively request Certified Mail (USPS only) 
     * or Indirect signature (FedEx only) or Carrier Confirmation (Deutsche Post only).
     */
    public ShipmentExtra withSignatureConfirmation(Optional<? extends SignatureConfirmation> signatureConfirmation) {
        Utils.checkNotNull(signatureConfirmation, "signatureConfirmation");
        this.signatureConfirmation = signatureConfirmation;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShipmentExtra other = (ShipmentExtra) o;
        return 
            java.util.Objects.deepEquals(this.ancillaryEndorsement, other.ancillaryEndorsement) &&
            java.util.Objects.deepEquals(this.authorityToLeave, other.authorityToLeave) &&
            java.util.Objects.deepEquals(this.alcohol, other.alcohol) &&
            java.util.Objects.deepEquals(this.billing, other.billing) &&
            java.util.Objects.deepEquals(this.bypassAddressValidation, other.bypassAddressValidation) &&
            java.util.Objects.deepEquals(this.carbonNeutral, other.carbonNeutral) &&
            java.util.Objects.deepEquals(this.carrierHubId, other.carrierHubId) &&
            java.util.Objects.deepEquals(this.carrierHubTravelTime, other.carrierHubTravelTime) &&
            java.util.Objects.deepEquals(this.cod, other.cod) &&
            java.util.Objects.deepEquals(this.containerType, other.containerType) &&
            java.util.Objects.deepEquals(this.criticalPullTime, other.criticalPullTime) &&
            java.util.Objects.deepEquals(this.customerBranch, other.customerBranch) &&
            java.util.Objects.deepEquals(this.customerReference, other.customerReference) &&
            java.util.Objects.deepEquals(this.dangerousGoodsCode, other.dangerousGoodsCode) &&
            java.util.Objects.deepEquals(this.dangerousGoods, other.dangerousGoods) &&
            java.util.Objects.deepEquals(this.deliveryInstructions, other.deliveryInstructions) &&
            java.util.Objects.deepEquals(this.deptNumber, other.deptNumber) &&
            java.util.Objects.deepEquals(this.dryIce, other.dryIce) &&
            java.util.Objects.deepEquals(this.fulfillmentCenter, other.fulfillmentCenter) &&
            java.util.Objects.deepEquals(this.insurance, other.insurance) &&
            java.util.Objects.deepEquals(this.invoiceNumber, other.invoiceNumber) &&
            java.util.Objects.deepEquals(this.isReturn, other.isReturn) &&
            java.util.Objects.deepEquals(this.lasershipAttrs, other.lasershipAttrs) &&
            java.util.Objects.deepEquals(this.lasershipDeclaredValue, other.lasershipDeclaredValue) &&
            java.util.Objects.deepEquals(this.poNumber, other.poNumber) &&
            java.util.Objects.deepEquals(this.preferredDeliveryTimeframe, other.preferredDeliveryTimeframe) &&
            java.util.Objects.deepEquals(this.premium, other.premium) &&
            java.util.Objects.deepEquals(this.qrCodeRequested, other.qrCodeRequested) &&
            java.util.Objects.deepEquals(this.reference1, other.reference1) &&
            java.util.Objects.deepEquals(this.reference2, other.reference2) &&
            java.util.Objects.deepEquals(this.requestRetailRates, other.requestRetailRates) &&
            java.util.Objects.deepEquals(this.returnServiceType, other.returnServiceType) &&
            java.util.Objects.deepEquals(this.rmaNumber, other.rmaNumber) &&
            java.util.Objects.deepEquals(this.saturdayDelivery, other.saturdayDelivery) &&
            java.util.Objects.deepEquals(this.signatureConfirmation, other.signatureConfirmation);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ancillaryEndorsement,
            authorityToLeave,
            alcohol,
            billing,
            bypassAddressValidation,
            carbonNeutral,
            carrierHubId,
            carrierHubTravelTime,
            cod,
            containerType,
            criticalPullTime,
            customerBranch,
            customerReference,
            dangerousGoodsCode,
            dangerousGoods,
            deliveryInstructions,
            deptNumber,
            dryIce,
            fulfillmentCenter,
            insurance,
            invoiceNumber,
            isReturn,
            lasershipAttrs,
            lasershipDeclaredValue,
            poNumber,
            preferredDeliveryTimeframe,
            premium,
            qrCodeRequested,
            reference1,
            reference2,
            requestRetailRates,
            returnServiceType,
            rmaNumber,
            saturdayDelivery,
            signatureConfirmation);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShipmentExtra.class,
                "ancillaryEndorsement", ancillaryEndorsement,
                "authorityToLeave", authorityToLeave,
                "alcohol", alcohol,
                "billing", billing,
                "bypassAddressValidation", bypassAddressValidation,
                "carbonNeutral", carbonNeutral,
                "carrierHubId", carrierHubId,
                "carrierHubTravelTime", carrierHubTravelTime,
                "cod", cod,
                "containerType", containerType,
                "criticalPullTime", criticalPullTime,
                "customerBranch", customerBranch,
                "customerReference", customerReference,
                "dangerousGoodsCode", dangerousGoodsCode,
                "dangerousGoods", dangerousGoods,
                "deliveryInstructions", deliveryInstructions,
                "deptNumber", deptNumber,
                "dryIce", dryIce,
                "fulfillmentCenter", fulfillmentCenter,
                "insurance", insurance,
                "invoiceNumber", invoiceNumber,
                "isReturn", isReturn,
                "lasershipAttrs", lasershipAttrs,
                "lasershipDeclaredValue", lasershipDeclaredValue,
                "poNumber", poNumber,
                "preferredDeliveryTimeframe", preferredDeliveryTimeframe,
                "premium", premium,
                "qrCodeRequested", qrCodeRequested,
                "reference1", reference1,
                "reference2", reference2,
                "requestRetailRates", requestRetailRates,
                "returnServiceType", returnServiceType,
                "rmaNumber", rmaNumber,
                "saturdayDelivery", saturdayDelivery,
                "signatureConfirmation", signatureConfirmation);
    }
    
    public final static class Builder {
 
        private Optional<? extends AncillaryEndorsement> ancillaryEndorsement = Optional.empty();
 
        private Optional<? extends Boolean> authorityToLeave = Optional.empty();
 
        private Optional<? extends Alcohol> alcohol = Optional.empty();
 
        private Optional<? extends Billing> billing = Optional.empty();
 
        private Optional<? extends Boolean> bypassAddressValidation = Optional.empty();
 
        private Optional<? extends Boolean> carbonNeutral = Optional.empty();
 
        private Optional<? extends String> carrierHubId = Optional.empty();
 
        private Optional<? extends Long> carrierHubTravelTime = Optional.empty();
 
        private Optional<? extends Cod> cod = Optional.empty();
 
        private Optional<? extends String> containerType = Optional.empty();
 
        private Optional<? extends String> criticalPullTime = Optional.empty();
 
        private Optional<? extends String> customerBranch = Optional.empty();
 
        private Optional<? extends CustomerReference> customerReference = Optional.empty();
 
        private Optional<? extends DangerousGoodsCode> dangerousGoodsCode = Optional.empty();
 
        private Optional<? extends DangerousGoodsObject> dangerousGoods = Optional.empty();
 
        private Optional<? extends String> deliveryInstructions = Optional.empty();
 
        private Optional<? extends DepartmentNumber> deptNumber = Optional.empty();
 
        private Optional<? extends DryIce> dryIce = Optional.empty();
 
        private Optional<? extends String> fulfillmentCenter = Optional.empty();
 
        private Optional<? extends Insurance> insurance = Optional.empty();
 
        private Optional<? extends InvoiceNumber> invoiceNumber = Optional.empty();
 
        private Optional<? extends Boolean> isReturn = Optional.empty();
 
        private Optional<? extends LasershipAttrs> lasershipAttrs = Optional.empty();
 
        private Optional<? extends String> lasershipDeclaredValue = Optional.empty();
 
        private Optional<? extends PoNumber> poNumber = Optional.empty();
 
        private Optional<? extends PreferredDeliveryTimeframe> preferredDeliveryTimeframe = Optional.empty();
 
        private Optional<? extends Boolean> premium = Optional.empty();
 
        private Optional<? extends Boolean> qrCodeRequested = Optional.empty();
 
        private Optional<? extends String> reference1 = Optional.empty();
 
        private Optional<? extends String> reference2 = Optional.empty();
 
        private Optional<? extends Boolean> requestRetailRates = Optional.empty();
 
        private Optional<? extends ReturnServiceType> returnServiceType = Optional.empty();
 
        private Optional<? extends RmaNumber> rmaNumber = Optional.empty();
 
        private Optional<? extends Boolean> saturdayDelivery = Optional.empty();
 
        private Optional<? extends SignatureConfirmation> signatureConfirmation = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Specify an ancillary service endorsement to provide the USPS with instructions on how to handle undeliverable-as-addressed pieces (DHL eCommerce only).
         */
        public Builder ancillaryEndorsement(AncillaryEndorsement ancillaryEndorsement) {
            Utils.checkNotNull(ancillaryEndorsement, "ancillaryEndorsement");
            this.ancillaryEndorsement = Optional.ofNullable(ancillaryEndorsement);
            return this;
        }

        /**
         * Specify an ancillary service endorsement to provide the USPS with instructions on how to handle undeliverable-as-addressed pieces (DHL eCommerce only).
         */
        public Builder ancillaryEndorsement(Optional<? extends AncillaryEndorsement> ancillaryEndorsement) {
            Utils.checkNotNull(ancillaryEndorsement, "ancillaryEndorsement");
            this.ancillaryEndorsement = ancillaryEndorsement;
            return this;
        }

        /**
         * Request `true` to give carrier permission to leave the parcel in a safe place if no one answers the 
         * door (where supported). When set to `false`, if no one is available to receive the item, the parcel 
         * will not be left (*surcharges may be applicable).
         */
        public Builder authorityToLeave(boolean authorityToLeave) {
            Utils.checkNotNull(authorityToLeave, "authorityToLeave");
            this.authorityToLeave = Optional.ofNullable(authorityToLeave);
            return this;
        }

        /**
         * Request `true` to give carrier permission to leave the parcel in a safe place if no one answers the 
         * door (where supported). When set to `false`, if no one is available to receive the item, the parcel 
         * will not be left (*surcharges may be applicable).
         */
        public Builder authorityToLeave(Optional<? extends Boolean> authorityToLeave) {
            Utils.checkNotNull(authorityToLeave, "authorityToLeave");
            this.authorityToLeave = authorityToLeave;
            return this;
        }

        /**
         * Indicates that a shipment contains Alcohol (Fedex and UPS only).
         */
        public Builder alcohol(Alcohol alcohol) {
            Utils.checkNotNull(alcohol, "alcohol");
            this.alcohol = Optional.ofNullable(alcohol);
            return this;
        }

        /**
         * Indicates that a shipment contains Alcohol (Fedex and UPS only).
         */
        public Builder alcohol(Optional<? extends Alcohol> alcohol) {
            Utils.checkNotNull(alcohol, "alcohol");
            this.alcohol = alcohol;
            return this;
        }

        /**
         * Specify billing details (UPS, FedEx, and DHL Germany only).
         */
        public Builder billing(Billing billing) {
            Utils.checkNotNull(billing, "billing");
            this.billing = Optional.ofNullable(billing);
            return this;
        }

        /**
         * Specify billing details (UPS, FedEx, and DHL Germany only).
         */
        public Builder billing(Optional<? extends Billing> billing) {
            Utils.checkNotNull(billing, "billing");
            this.billing = billing;
            return this;
        }

        /**
         * Bypasses address validation (USPS, UPS, &amp; LaserShip only).
         */
        public Builder bypassAddressValidation(boolean bypassAddressValidation) {
            Utils.checkNotNull(bypassAddressValidation, "bypassAddressValidation");
            this.bypassAddressValidation = Optional.ofNullable(bypassAddressValidation);
            return this;
        }

        /**
         * Bypasses address validation (USPS, UPS, &amp; LaserShip only).
         */
        public Builder bypassAddressValidation(Optional<? extends Boolean> bypassAddressValidation) {
            Utils.checkNotNull(bypassAddressValidation, "bypassAddressValidation");
            this.bypassAddressValidation = bypassAddressValidation;
            return this;
        }

        /**
         * Request carbon offsets by passing true (UPS only).
         */
        public Builder carbonNeutral(boolean carbonNeutral) {
            Utils.checkNotNull(carbonNeutral, "carbonNeutral");
            this.carbonNeutral = Optional.ofNullable(carbonNeutral);
            return this;
        }

        /**
         * Request carbon offsets by passing true (UPS only).
         */
        public Builder carbonNeutral(Optional<? extends Boolean> carbonNeutral) {
            Utils.checkNotNull(carbonNeutral, "carbonNeutral");
            this.carbonNeutral = carbonNeutral;
            return this;
        }

        /**
         * Identifies the carrier injection site.
         */
        public Builder carrierHubId(String carrierHubId) {
            Utils.checkNotNull(carrierHubId, "carrierHubId");
            this.carrierHubId = Optional.ofNullable(carrierHubId);
            return this;
        }

        /**
         * Identifies the carrier injection site.
         */
        public Builder carrierHubId(Optional<? extends String> carrierHubId) {
            Utils.checkNotNull(carrierHubId, "carrierHubId");
            this.carrierHubId = carrierHubId;
            return this;
        }

        /**
         * Travel time in hours from fulfillment center to carrier injection site.
         */
        public Builder carrierHubTravelTime(long carrierHubTravelTime) {
            Utils.checkNotNull(carrierHubTravelTime, "carrierHubTravelTime");
            this.carrierHubTravelTime = Optional.ofNullable(carrierHubTravelTime);
            return this;
        }

        /**
         * Travel time in hours from fulfillment center to carrier injection site.
         */
        public Builder carrierHubTravelTime(Optional<? extends Long> carrierHubTravelTime) {
            Utils.checkNotNull(carrierHubTravelTime, "carrierHubTravelTime");
            this.carrierHubTravelTime = carrierHubTravelTime;
            return this;
        }

        /**
         * Specify collection on delivery details (UPS only).
         */
        public Builder cod(Cod cod) {
            Utils.checkNotNull(cod, "cod");
            this.cod = Optional.ofNullable(cod);
            return this;
        }

        /**
         * Specify collection on delivery details (UPS only).
         */
        public Builder cod(Optional<? extends Cod> cod) {
            Utils.checkNotNull(cod, "cod");
            this.cod = cod;
            return this;
        }

        /**
         * Specify container type.
         */
        public Builder containerType(String containerType) {
            Utils.checkNotNull(containerType, "containerType");
            this.containerType = Optional.ofNullable(containerType);
            return this;
        }

        /**
         * Specify container type.
         */
        public Builder containerType(Optional<? extends String> containerType) {
            Utils.checkNotNull(containerType, "containerType");
            this.containerType = containerType;
            return this;
        }

        /**
         * Carrier arrival time to pickup packages from the fulfillment center. 
         * UTC format: `%Y-%m-%dT%H:%M:%SZ`
         */
        public Builder criticalPullTime(String criticalPullTime) {
            Utils.checkNotNull(criticalPullTime, "criticalPullTime");
            this.criticalPullTime = Optional.ofNullable(criticalPullTime);
            return this;
        }

        /**
         * Carrier arrival time to pickup packages from the fulfillment center. 
         * UTC format: `%Y-%m-%dT%H:%M:%SZ`
         */
        public Builder criticalPullTime(Optional<? extends String> criticalPullTime) {
            Utils.checkNotNull(criticalPullTime, "criticalPullTime");
            this.criticalPullTime = criticalPullTime;
            return this;
        }

        /**
         * Specify customer branch (Lasership only).
         */
        public Builder customerBranch(String customerBranch) {
            Utils.checkNotNull(customerBranch, "customerBranch");
            this.customerBranch = Optional.ofNullable(customerBranch);
            return this;
        }

        /**
         * Specify customer branch (Lasership only).
         */
        public Builder customerBranch(Optional<? extends String> customerBranch) {
            Utils.checkNotNull(customerBranch, "customerBranch");
            this.customerBranch = customerBranch;
            return this;
        }

        /**
         * Specify the reference field on the label (FedEx only).
         */
        public Builder customerReference(CustomerReference customerReference) {
            Utils.checkNotNull(customerReference, "customerReference");
            this.customerReference = Optional.ofNullable(customerReference);
            return this;
        }

        /**
         * Specify the reference field on the label (FedEx only).
         */
        public Builder customerReference(Optional<? extends CustomerReference> customerReference) {
            Utils.checkNotNull(customerReference, "customerReference");
            this.customerReference = customerReference;
            return this;
        }

        /**
         * Dangerous Goods Code (DHL eCommerce only). See &lt;a href="https://api-legacy.dhlecs.com/docs/v2/appendix.html#dangerous-goods"&gt;Category Codes&lt;/a&gt;
         */
        public Builder dangerousGoodsCode(DangerousGoodsCode dangerousGoodsCode) {
            Utils.checkNotNull(dangerousGoodsCode, "dangerousGoodsCode");
            this.dangerousGoodsCode = Optional.ofNullable(dangerousGoodsCode);
            return this;
        }

        /**
         * Dangerous Goods Code (DHL eCommerce only). See &lt;a href="https://api-legacy.dhlecs.com/docs/v2/appendix.html#dangerous-goods"&gt;Category Codes&lt;/a&gt;
         */
        public Builder dangerousGoodsCode(Optional<? extends DangerousGoodsCode> dangerousGoodsCode) {
            Utils.checkNotNull(dangerousGoodsCode, "dangerousGoodsCode");
            this.dangerousGoodsCode = dangerousGoodsCode;
            return this;
        }

        /**
         * Container for specifying the presence of dangerous materials. This is specific to USPS, and if any contents
         * are provided, only certain USPS service levels will be eligible. For more information, see our
         * &lt;a href="https://docs.goshippo.com/docs/shipments/hazmat/"&gt;guide on hazardous or dangerous materials shipping&lt;/a&gt;.
         */
        public Builder dangerousGoods(DangerousGoodsObject dangerousGoods) {
            Utils.checkNotNull(dangerousGoods, "dangerousGoods");
            this.dangerousGoods = Optional.ofNullable(dangerousGoods);
            return this;
        }

        /**
         * Container for specifying the presence of dangerous materials. This is specific to USPS, and if any contents
         * are provided, only certain USPS service levels will be eligible. For more information, see our
         * &lt;a href="https://docs.goshippo.com/docs/shipments/hazmat/"&gt;guide on hazardous or dangerous materials shipping&lt;/a&gt;.
         */
        public Builder dangerousGoods(Optional<? extends DangerousGoodsObject> dangerousGoods) {
            Utils.checkNotNull(dangerousGoods, "dangerousGoods");
            this.dangerousGoods = dangerousGoods;
            return this;
        }

        /**
         * Specify delivery instructions. Up to 500 characters. (FedEx and OnTrac only).
         */
        public Builder deliveryInstructions(String deliveryInstructions) {
            Utils.checkNotNull(deliveryInstructions, "deliveryInstructions");
            this.deliveryInstructions = Optional.ofNullable(deliveryInstructions);
            return this;
        }

        /**
         * Specify delivery instructions. Up to 500 characters. (FedEx and OnTrac only).
         */
        public Builder deliveryInstructions(Optional<? extends String> deliveryInstructions) {
            Utils.checkNotNull(deliveryInstructions, "deliveryInstructions");
            this.deliveryInstructions = deliveryInstructions;
            return this;
        }

        /**
         * Specify the department number field on the label (FedEx only).
         */
        public Builder deptNumber(DepartmentNumber deptNumber) {
            Utils.checkNotNull(deptNumber, "deptNumber");
            this.deptNumber = Optional.ofNullable(deptNumber);
            return this;
        }

        /**
         * Specify the department number field on the label (FedEx only).
         */
        public Builder deptNumber(Optional<? extends DepartmentNumber> deptNumber) {
            Utils.checkNotNull(deptNumber, "deptNumber");
            this.deptNumber = deptNumber;
            return this;
        }

        /**
         * Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
         */
        public Builder dryIce(DryIce dryIce) {
            Utils.checkNotNull(dryIce, "dryIce");
            this.dryIce = Optional.ofNullable(dryIce);
            return this;
        }

        /**
         * Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
         */
        public Builder dryIce(Optional<? extends DryIce> dryIce) {
            Utils.checkNotNull(dryIce, "dryIce");
            this.dryIce = dryIce;
            return this;
        }

        /**
         * The fulfilment center where the package originates from.
         */
        public Builder fulfillmentCenter(String fulfillmentCenter) {
            Utils.checkNotNull(fulfillmentCenter, "fulfillmentCenter");
            this.fulfillmentCenter = Optional.ofNullable(fulfillmentCenter);
            return this;
        }

        /**
         * The fulfilment center where the package originates from.
         */
        public Builder fulfillmentCenter(Optional<? extends String> fulfillmentCenter) {
            Utils.checkNotNull(fulfillmentCenter, "fulfillmentCenter");
            this.fulfillmentCenter = fulfillmentCenter;
            return this;
        }

        /**
         * To add 3rd party insurance powered by &lt;a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/"&gt;XCover&lt;/a&gt;, specify &lt;br&gt; `amount`, `content`, and `currency`. &lt;br&gt; Alternatively, you can choose carrier provided insurance by additionally specifying `provider` (UPS, FedEx and OnTrac only). &lt;br&gt;&lt;br&gt; If you do not want to add insurance to you shipment, do not set these parameters.
         */
        public Builder insurance(Insurance insurance) {
            Utils.checkNotNull(insurance, "insurance");
            this.insurance = Optional.ofNullable(insurance);
            return this;
        }

        /**
         * To add 3rd party insurance powered by &lt;a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/"&gt;XCover&lt;/a&gt;, specify &lt;br&gt; `amount`, `content`, and `currency`. &lt;br&gt; Alternatively, you can choose carrier provided insurance by additionally specifying `provider` (UPS, FedEx and OnTrac only). &lt;br&gt;&lt;br&gt; If you do not want to add insurance to you shipment, do not set these parameters.
         */
        public Builder insurance(Optional<? extends Insurance> insurance) {
            Utils.checkNotNull(insurance, "insurance");
            this.insurance = insurance;
            return this;
        }

        /**
         * Specify the invoice number field on the label (FedEx only).
         */
        public Builder invoiceNumber(InvoiceNumber invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        /**
         * Specify the invoice number field on the label (FedEx only).
         */
        public Builder invoiceNumber(Optional<? extends InvoiceNumber> invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * This field specifies if it is a scan-based return shipment. See the &lt;a href="https://docs.goshippo.com/docs/shipments/returns/"&gt;Create a return shipment&lt;/a&gt; section for more details.
         */
        public Builder isReturn(boolean isReturn) {
            Utils.checkNotNull(isReturn, "isReturn");
            this.isReturn = Optional.ofNullable(isReturn);
            return this;
        }

        /**
         * This field specifies if it is a scan-based return shipment. See the &lt;a href="https://docs.goshippo.com/docs/shipments/returns/"&gt;Create a return shipment&lt;/a&gt; section for more details.
         */
        public Builder isReturn(Optional<? extends Boolean> isReturn) {
            Utils.checkNotNull(isReturn, "isReturn");
            this.isReturn = isReturn;
            return this;
        }

        /**
         * Specify Lasership Attributes (Lasership only). Multiple options accepted.
         */
        public Builder lasershipAttrs(LasershipAttrs lasershipAttrs) {
            Utils.checkNotNull(lasershipAttrs, "lasershipAttrs");
            this.lasershipAttrs = Optional.ofNullable(lasershipAttrs);
            return this;
        }

        /**
         * Specify Lasership Attributes (Lasership only). Multiple options accepted.
         */
        public Builder lasershipAttrs(Optional<? extends LasershipAttrs> lasershipAttrs) {
            Utils.checkNotNull(lasershipAttrs, "lasershipAttrs");
            this.lasershipAttrs = lasershipAttrs;
            return this;
        }

        /**
         * Declared value (Lasership only). Defaults to `50.00`.
         */
        public Builder lasershipDeclaredValue(String lasershipDeclaredValue) {
            Utils.checkNotNull(lasershipDeclaredValue, "lasershipDeclaredValue");
            this.lasershipDeclaredValue = Optional.ofNullable(lasershipDeclaredValue);
            return this;
        }

        /**
         * Declared value (Lasership only). Defaults to `50.00`.
         */
        public Builder lasershipDeclaredValue(Optional<? extends String> lasershipDeclaredValue) {
            Utils.checkNotNull(lasershipDeclaredValue, "lasershipDeclaredValue");
            this.lasershipDeclaredValue = lasershipDeclaredValue;
            return this;
        }

        /**
         * Specify the PO number field on the label (FedEx only).
         */
        public Builder poNumber(PoNumber poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = Optional.ofNullable(poNumber);
            return this;
        }

        /**
         * Specify the PO number field on the label (FedEx only).
         */
        public Builder poNumber(Optional<? extends PoNumber> poNumber) {
            Utils.checkNotNull(poNumber, "poNumber");
            this.poNumber = poNumber;
            return this;
        }

        /**
         * Required for DHL Germany Paket Sameday. Designates a desired timeframe for delivery. Format is `HHMMHHMM`
         */
        public Builder preferredDeliveryTimeframe(PreferredDeliveryTimeframe preferredDeliveryTimeframe) {
            Utils.checkNotNull(preferredDeliveryTimeframe, "preferredDeliveryTimeframe");
            this.preferredDeliveryTimeframe = Optional.ofNullable(preferredDeliveryTimeframe);
            return this;
        }

        /**
         * Required for DHL Germany Paket Sameday. Designates a desired timeframe for delivery. Format is `HHMMHHMM`
         */
        public Builder preferredDeliveryTimeframe(Optional<? extends PreferredDeliveryTimeframe> preferredDeliveryTimeframe) {
            Utils.checkNotNull(preferredDeliveryTimeframe, "preferredDeliveryTimeframe");
            this.preferredDeliveryTimeframe = preferredDeliveryTimeframe;
            return this;
        }

        /**
         * Add premium service to a shipment (DHL Germany international shipments only).
         */
        public Builder premium(boolean premium) {
            Utils.checkNotNull(premium, "premium");
            this.premium = Optional.ofNullable(premium);
            return this;
        }

        /**
         * Add premium service to a shipment (DHL Germany international shipments only).
         */
        public Builder premium(Optional<? extends Boolean> premium) {
            Utils.checkNotNull(premium, "premium");
            this.premium = premium;
            return this;
        }

        /**
         * Request a QR code for a given transaction when creating a shipping label (USPS domestic and Evri UK only).
         */
        public Builder qrCodeRequested(boolean qrCodeRequested) {
            Utils.checkNotNull(qrCodeRequested, "qrCodeRequested");
            this.qrCodeRequested = Optional.ofNullable(qrCodeRequested);
            return this;
        }

        /**
         * Request a QR code for a given transaction when creating a shipping label (USPS domestic and Evri UK only).
         */
        public Builder qrCodeRequested(Optional<? extends Boolean> qrCodeRequested) {
            Utils.checkNotNull(qrCodeRequested, "qrCodeRequested");
            this.qrCodeRequested = qrCodeRequested;
            return this;
        }

        /**
         * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters.
         */
        public Builder reference1(String reference1) {
            Utils.checkNotNull(reference1, "reference1");
            this.reference1 = Optional.ofNullable(reference1);
            return this;
        }

        /**
         * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters.
         */
        public Builder reference1(Optional<? extends String> reference1) {
            Utils.checkNotNull(reference1, "reference1");
            this.reference1 = reference1;
            return this;
        }

        /**
         * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters. For DHL eCommerce, this field can be used for billing reference.
         */
        public Builder reference2(String reference2) {
            Utils.checkNotNull(reference2, "reference2");
            this.reference2 = Optional.ofNullable(reference2);
            return this;
        }

        /**
         * Optional text to be printed on the shipping label if supported by carrier. Up to 50 characters. For DHL eCommerce, this field can be used for billing reference.
         */
        public Builder reference2(Optional<? extends String> reference2) {
            Utils.checkNotNull(reference2, "reference2");
            this.reference2 = reference2;
            return this;
        }

        /**
         * Returns retail rates instead of account-based rates (UPS and FedEx only).
         */
        public Builder requestRetailRates(boolean requestRetailRates) {
            Utils.checkNotNull(requestRetailRates, "requestRetailRates");
            this.requestRetailRates = Optional.ofNullable(requestRetailRates);
            return this;
        }

        /**
         * Returns retail rates instead of account-based rates (UPS and FedEx only).
         */
        public Builder requestRetailRates(Optional<? extends Boolean> requestRetailRates) {
            Utils.checkNotNull(requestRetailRates, "requestRetailRates");
            this.requestRetailRates = requestRetailRates;
            return this;
        }

        /**
         * Request additional return option for return shipments (UPS only).
         */
        public Builder returnServiceType(ReturnServiceType returnServiceType) {
            Utils.checkNotNull(returnServiceType, "returnServiceType");
            this.returnServiceType = Optional.ofNullable(returnServiceType);
            return this;
        }

        /**
         * Request additional return option for return shipments (UPS only).
         */
        public Builder returnServiceType(Optional<? extends ReturnServiceType> returnServiceType) {
            Utils.checkNotNull(returnServiceType, "returnServiceType");
            this.returnServiceType = returnServiceType;
            return this;
        }

        /**
         * Specify the RMA number field on the label (FedEx only).
         */
        public Builder rmaNumber(RmaNumber rmaNumber) {
            Utils.checkNotNull(rmaNumber, "rmaNumber");
            this.rmaNumber = Optional.ofNullable(rmaNumber);
            return this;
        }

        /**
         * Specify the RMA number field on the label (FedEx only).
         */
        public Builder rmaNumber(Optional<? extends RmaNumber> rmaNumber) {
            Utils.checkNotNull(rmaNumber, "rmaNumber");
            this.rmaNumber = rmaNumber;
            return this;
        }

        /**
         * Marks shipment as to be delivered on a Saturday.
         */
        public Builder saturdayDelivery(boolean saturdayDelivery) {
            Utils.checkNotNull(saturdayDelivery, "saturdayDelivery");
            this.saturdayDelivery = Optional.ofNullable(saturdayDelivery);
            return this;
        }

        /**
         * Marks shipment as to be delivered on a Saturday.
         */
        public Builder saturdayDelivery(Optional<? extends Boolean> saturdayDelivery) {
            Utils.checkNotNull(saturdayDelivery, "saturdayDelivery");
            this.saturdayDelivery = saturdayDelivery;
            return this;
        }

        /**
         * Request standard or adult signature confirmation. You can alternatively request Certified Mail (USPS only) 
         * or Indirect signature (FedEx only) or Carrier Confirmation (Deutsche Post only).
         */
        public Builder signatureConfirmation(SignatureConfirmation signatureConfirmation) {
            Utils.checkNotNull(signatureConfirmation, "signatureConfirmation");
            this.signatureConfirmation = Optional.ofNullable(signatureConfirmation);
            return this;
        }

        /**
         * Request standard or adult signature confirmation. You can alternatively request Certified Mail (USPS only) 
         * or Indirect signature (FedEx only) or Carrier Confirmation (Deutsche Post only).
         */
        public Builder signatureConfirmation(Optional<? extends SignatureConfirmation> signatureConfirmation) {
            Utils.checkNotNull(signatureConfirmation, "signatureConfirmation");
            this.signatureConfirmation = signatureConfirmation;
            return this;
        }
        
        public ShipmentExtra build() {
            return new ShipmentExtra(
                ancillaryEndorsement,
                authorityToLeave,
                alcohol,
                billing,
                bypassAddressValidation,
                carbonNeutral,
                carrierHubId,
                carrierHubTravelTime,
                cod,
                containerType,
                criticalPullTime,
                customerBranch,
                customerReference,
                dangerousGoodsCode,
                dangerousGoods,
                deliveryInstructions,
                deptNumber,
                dryIce,
                fulfillmentCenter,
                insurance,
                invoiceNumber,
                isReturn,
                lasershipAttrs,
                lasershipDeclaredValue,
                poNumber,
                preferredDeliveryTimeframe,
                premium,
                qrCodeRequested,
                reference1,
                reference2,
                requestRetailRates,
                returnServiceType,
                rmaNumber,
                saturdayDelivery,
                signatureConfirmation);
        }
    }
}

