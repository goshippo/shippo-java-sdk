/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class LineItemBase {

    /**
     * Currency of the &lt;code&gt;total_price&lt;/code&gt; amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * Country the item was manufactured in. In the Shippo dashboard, this value will be used ot pre-fill the customs declaration when creating a label for this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacture_country")
    private Optional<? extends String> manufactureCountry;

    /**
     * The date and time this item needs to be delivered by, i.e. by when the carrier delivers it to the buyer. 
     * This value is used by some platforms such as eBay to measure a seller's shipping time and performance. 
     * It will be displayed in the Shippo dashboard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_delivery_time")
    private Optional<? extends OffsetDateTime> maxDeliveryTime;

    /**
     * The date and time this item needs to be fulfilled by, i.e. by when the shipping label needs to be 
     * created and handed over to the carrier. This value is used by some platforms such as eBay to measure 
     * a seller's handling time and performance. It will be displayed in the Shippo dashboard.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_ship_time")
    private Optional<? extends OffsetDateTime> maxShipTime;

    /**
     * The quantity of this item in this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<? extends Long> quantity;

    /**
     * The stock keeping unit value of this item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<? extends String> sku;

    /**
     * Title of the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    /**
     * Total price paid by the buyer for this item (or these items, if quantity &gt; 1).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_price")
    private Optional<? extends String> totalPrice;

    /**
     * A variant is a specific variation of an item (e.g. `size M` or `color blue`). 
     * Variants might be exposed as a separate resource in the future too. 
     * Currently the variant title is a free text field describing the variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variant_title")
    private Optional<? extends String> variantTitle;

    /**
     * Total weight of this/these item(s). Instead of specifying the weight of all items, 
     * you can also set the &lt;code&gt;total_weight&lt;/code&gt; value of the order object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private Optional<? extends String> weight;

    /**
     * The unit used for weight.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    private Optional<? extends WeightUnitEnum> weightUnit;

    @JsonCreator
    public LineItemBase(
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("manufacture_country") Optional<? extends String> manufactureCountry,
            @JsonProperty("max_delivery_time") Optional<? extends OffsetDateTime> maxDeliveryTime,
            @JsonProperty("max_ship_time") Optional<? extends OffsetDateTime> maxShipTime,
            @JsonProperty("quantity") Optional<? extends Long> quantity,
            @JsonProperty("sku") Optional<? extends String> sku,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("total_price") Optional<? extends String> totalPrice,
            @JsonProperty("variant_title") Optional<? extends String> variantTitle,
            @JsonProperty("weight") Optional<? extends String> weight,
            @JsonProperty("weight_unit") Optional<? extends WeightUnitEnum> weightUnit) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(manufactureCountry, "manufactureCountry");
        Utils.checkNotNull(maxDeliveryTime, "maxDeliveryTime");
        Utils.checkNotNull(maxShipTime, "maxShipTime");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(totalPrice, "totalPrice");
        Utils.checkNotNull(variantTitle, "variantTitle");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.currency = currency;
        this.manufactureCountry = manufactureCountry;
        this.maxDeliveryTime = maxDeliveryTime;
        this.maxShipTime = maxShipTime;
        this.quantity = quantity;
        this.sku = sku;
        this.title = title;
        this.totalPrice = totalPrice;
        this.variantTitle = variantTitle;
        this.weight = weight;
        this.weightUnit = weightUnit;
    }
    
    public LineItemBase() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Currency of the &lt;code&gt;total_price&lt;/code&gt; amount.
     */
    @JsonIgnore
    public Optional<? extends String> currency() {
        return currency;
    }

    /**
     * Country the item was manufactured in. In the Shippo dashboard, this value will be used ot pre-fill the customs declaration when creating a label for this order.
     */
    @JsonIgnore
    public Optional<? extends String> manufactureCountry() {
        return manufactureCountry;
    }

    /**
     * The date and time this item needs to be delivered by, i.e. by when the carrier delivers it to the buyer. 
     * This value is used by some platforms such as eBay to measure a seller's shipping time and performance. 
     * It will be displayed in the Shippo dashboard.
     */
    @JsonIgnore
    public Optional<? extends OffsetDateTime> maxDeliveryTime() {
        return maxDeliveryTime;
    }

    /**
     * The date and time this item needs to be fulfilled by, i.e. by when the shipping label needs to be 
     * created and handed over to the carrier. This value is used by some platforms such as eBay to measure 
     * a seller's handling time and performance. It will be displayed in the Shippo dashboard.
     */
    @JsonIgnore
    public Optional<? extends OffsetDateTime> maxShipTime() {
        return maxShipTime;
    }

    /**
     * The quantity of this item in this order.
     */
    @JsonIgnore
    public Optional<? extends Long> quantity() {
        return quantity;
    }

    /**
     * The stock keeping unit value of this item.
     */
    @JsonIgnore
    public Optional<? extends String> sku() {
        return sku;
    }

    /**
     * Title of the line item.
     */
    @JsonIgnore
    public Optional<? extends String> title() {
        return title;
    }

    /**
     * Total price paid by the buyer for this item (or these items, if quantity &gt; 1).
     */
    @JsonIgnore
    public Optional<? extends String> totalPrice() {
        return totalPrice;
    }

    /**
     * A variant is a specific variation of an item (e.g. `size M` or `color blue`). 
     * Variants might be exposed as a separate resource in the future too. 
     * Currently the variant title is a free text field describing the variant.
     */
    @JsonIgnore
    public Optional<? extends String> variantTitle() {
        return variantTitle;
    }

    /**
     * Total weight of this/these item(s). Instead of specifying the weight of all items, 
     * you can also set the &lt;code&gt;total_weight&lt;/code&gt; value of the order object.
     */
    @JsonIgnore
    public Optional<? extends String> weight() {
        return weight;
    }

    /**
     * The unit used for weight.
     */
    @JsonIgnore
    public Optional<? extends WeightUnitEnum> weightUnit() {
        return weightUnit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Currency of the &lt;code&gt;total_price&lt;/code&gt; amount.
     */
    public LineItemBase withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * Currency of the &lt;code&gt;total_price&lt;/code&gt; amount.
     */
    public LineItemBase withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Country the item was manufactured in. In the Shippo dashboard, this value will be used ot pre-fill the customs declaration when creating a label for this order.
     */
    public LineItemBase withManufactureCountry(String manufactureCountry) {
        Utils.checkNotNull(manufactureCountry, "manufactureCountry");
        this.manufactureCountry = Optional.ofNullable(manufactureCountry);
        return this;
    }

    /**
     * Country the item was manufactured in. In the Shippo dashboard, this value will be used ot pre-fill the customs declaration when creating a label for this order.
     */
    public LineItemBase withManufactureCountry(Optional<? extends String> manufactureCountry) {
        Utils.checkNotNull(manufactureCountry, "manufactureCountry");
        this.manufactureCountry = manufactureCountry;
        return this;
    }

    /**
     * The date and time this item needs to be delivered by, i.e. by when the carrier delivers it to the buyer. 
     * This value is used by some platforms such as eBay to measure a seller's shipping time and performance. 
     * It will be displayed in the Shippo dashboard.
     */
    public LineItemBase withMaxDeliveryTime(OffsetDateTime maxDeliveryTime) {
        Utils.checkNotNull(maxDeliveryTime, "maxDeliveryTime");
        this.maxDeliveryTime = Optional.ofNullable(maxDeliveryTime);
        return this;
    }

    /**
     * The date and time this item needs to be delivered by, i.e. by when the carrier delivers it to the buyer. 
     * This value is used by some platforms such as eBay to measure a seller's shipping time and performance. 
     * It will be displayed in the Shippo dashboard.
     */
    public LineItemBase withMaxDeliveryTime(Optional<? extends OffsetDateTime> maxDeliveryTime) {
        Utils.checkNotNull(maxDeliveryTime, "maxDeliveryTime");
        this.maxDeliveryTime = maxDeliveryTime;
        return this;
    }

    /**
     * The date and time this item needs to be fulfilled by, i.e. by when the shipping label needs to be 
     * created and handed over to the carrier. This value is used by some platforms such as eBay to measure 
     * a seller's handling time and performance. It will be displayed in the Shippo dashboard.
     */
    public LineItemBase withMaxShipTime(OffsetDateTime maxShipTime) {
        Utils.checkNotNull(maxShipTime, "maxShipTime");
        this.maxShipTime = Optional.ofNullable(maxShipTime);
        return this;
    }

    /**
     * The date and time this item needs to be fulfilled by, i.e. by when the shipping label needs to be 
     * created and handed over to the carrier. This value is used by some platforms such as eBay to measure 
     * a seller's handling time and performance. It will be displayed in the Shippo dashboard.
     */
    public LineItemBase withMaxShipTime(Optional<? extends OffsetDateTime> maxShipTime) {
        Utils.checkNotNull(maxShipTime, "maxShipTime");
        this.maxShipTime = maxShipTime;
        return this;
    }

    /**
     * The quantity of this item in this order.
     */
    public LineItemBase withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }

    /**
     * The quantity of this item in this order.
     */
    public LineItemBase withQuantity(Optional<? extends Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * The stock keeping unit value of this item.
     */
    public LineItemBase withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    /**
     * The stock keeping unit value of this item.
     */
    public LineItemBase withSku(Optional<? extends String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    /**
     * Title of the line item.
     */
    public LineItemBase withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Title of the line item.
     */
    public LineItemBase withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Total price paid by the buyer for this item (or these items, if quantity &gt; 1).
     */
    public LineItemBase withTotalPrice(String totalPrice) {
        Utils.checkNotNull(totalPrice, "totalPrice");
        this.totalPrice = Optional.ofNullable(totalPrice);
        return this;
    }

    /**
     * Total price paid by the buyer for this item (or these items, if quantity &gt; 1).
     */
    public LineItemBase withTotalPrice(Optional<? extends String> totalPrice) {
        Utils.checkNotNull(totalPrice, "totalPrice");
        this.totalPrice = totalPrice;
        return this;
    }

    /**
     * A variant is a specific variation of an item (e.g. `size M` or `color blue`). 
     * Variants might be exposed as a separate resource in the future too. 
     * Currently the variant title is a free text field describing the variant.
     */
    public LineItemBase withVariantTitle(String variantTitle) {
        Utils.checkNotNull(variantTitle, "variantTitle");
        this.variantTitle = Optional.ofNullable(variantTitle);
        return this;
    }

    /**
     * A variant is a specific variation of an item (e.g. `size M` or `color blue`). 
     * Variants might be exposed as a separate resource in the future too. 
     * Currently the variant title is a free text field describing the variant.
     */
    public LineItemBase withVariantTitle(Optional<? extends String> variantTitle) {
        Utils.checkNotNull(variantTitle, "variantTitle");
        this.variantTitle = variantTitle;
        return this;
    }

    /**
     * Total weight of this/these item(s). Instead of specifying the weight of all items, 
     * you can also set the &lt;code&gt;total_weight&lt;/code&gt; value of the order object.
     */
    public LineItemBase withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = Optional.ofNullable(weight);
        return this;
    }

    /**
     * Total weight of this/these item(s). Instead of specifying the weight of all items, 
     * you can also set the &lt;code&gt;total_weight&lt;/code&gt; value of the order object.
     */
    public LineItemBase withWeight(Optional<? extends String> weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * The unit used for weight.
     */
    public LineItemBase withWeightUnit(WeightUnitEnum weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = Optional.ofNullable(weightUnit);
        return this;
    }

    /**
     * The unit used for weight.
     */
    public LineItemBase withWeightUnit(Optional<? extends WeightUnitEnum> weightUnit) {
        Utils.checkNotNull(weightUnit, "weightUnit");
        this.weightUnit = weightUnit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LineItemBase other = (LineItemBase) o;
        return 
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.manufactureCountry, other.manufactureCountry) &&
            java.util.Objects.deepEquals(this.maxDeliveryTime, other.maxDeliveryTime) &&
            java.util.Objects.deepEquals(this.maxShipTime, other.maxShipTime) &&
            java.util.Objects.deepEquals(this.quantity, other.quantity) &&
            java.util.Objects.deepEquals(this.sku, other.sku) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.totalPrice, other.totalPrice) &&
            java.util.Objects.deepEquals(this.variantTitle, other.variantTitle) &&
            java.util.Objects.deepEquals(this.weight, other.weight) &&
            java.util.Objects.deepEquals(this.weightUnit, other.weightUnit);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            currency,
            manufactureCountry,
            maxDeliveryTime,
            maxShipTime,
            quantity,
            sku,
            title,
            totalPrice,
            variantTitle,
            weight,
            weightUnit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LineItemBase.class,
                "currency", currency,
                "manufactureCountry", manufactureCountry,
                "maxDeliveryTime", maxDeliveryTime,
                "maxShipTime", maxShipTime,
                "quantity", quantity,
                "sku", sku,
                "title", title,
                "totalPrice", totalPrice,
                "variantTitle", variantTitle,
                "weight", weight,
                "weightUnit", weightUnit);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends String> manufactureCountry = Optional.empty();
 
        private Optional<? extends OffsetDateTime> maxDeliveryTime = Optional.empty();
 
        private Optional<? extends OffsetDateTime> maxShipTime = Optional.empty();
 
        private Optional<? extends Long> quantity = Optional.empty();
 
        private Optional<? extends String> sku = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> totalPrice = Optional.empty();
 
        private Optional<? extends String> variantTitle = Optional.empty();
 
        private Optional<? extends String> weight = Optional.empty();
 
        private Optional<? extends WeightUnitEnum> weightUnit = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Currency of the &lt;code&gt;total_price&lt;/code&gt; amount.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * Currency of the &lt;code&gt;total_price&lt;/code&gt; amount.
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Country the item was manufactured in. In the Shippo dashboard, this value will be used ot pre-fill the customs declaration when creating a label for this order.
         */
        public Builder manufactureCountry(String manufactureCountry) {
            Utils.checkNotNull(manufactureCountry, "manufactureCountry");
            this.manufactureCountry = Optional.ofNullable(manufactureCountry);
            return this;
        }

        /**
         * Country the item was manufactured in. In the Shippo dashboard, this value will be used ot pre-fill the customs declaration when creating a label for this order.
         */
        public Builder manufactureCountry(Optional<? extends String> manufactureCountry) {
            Utils.checkNotNull(manufactureCountry, "manufactureCountry");
            this.manufactureCountry = manufactureCountry;
            return this;
        }

        /**
         * The date and time this item needs to be delivered by, i.e. by when the carrier delivers it to the buyer. 
         * This value is used by some platforms such as eBay to measure a seller's shipping time and performance. 
         * It will be displayed in the Shippo dashboard.
         */
        public Builder maxDeliveryTime(OffsetDateTime maxDeliveryTime) {
            Utils.checkNotNull(maxDeliveryTime, "maxDeliveryTime");
            this.maxDeliveryTime = Optional.ofNullable(maxDeliveryTime);
            return this;
        }

        /**
         * The date and time this item needs to be delivered by, i.e. by when the carrier delivers it to the buyer. 
         * This value is used by some platforms such as eBay to measure a seller's shipping time and performance. 
         * It will be displayed in the Shippo dashboard.
         */
        public Builder maxDeliveryTime(Optional<? extends OffsetDateTime> maxDeliveryTime) {
            Utils.checkNotNull(maxDeliveryTime, "maxDeliveryTime");
            this.maxDeliveryTime = maxDeliveryTime;
            return this;
        }

        /**
         * The date and time this item needs to be fulfilled by, i.e. by when the shipping label needs to be 
         * created and handed over to the carrier. This value is used by some platforms such as eBay to measure 
         * a seller's handling time and performance. It will be displayed in the Shippo dashboard.
         */
        public Builder maxShipTime(OffsetDateTime maxShipTime) {
            Utils.checkNotNull(maxShipTime, "maxShipTime");
            this.maxShipTime = Optional.ofNullable(maxShipTime);
            return this;
        }

        /**
         * The date and time this item needs to be fulfilled by, i.e. by when the shipping label needs to be 
         * created and handed over to the carrier. This value is used by some platforms such as eBay to measure 
         * a seller's handling time and performance. It will be displayed in the Shippo dashboard.
         */
        public Builder maxShipTime(Optional<? extends OffsetDateTime> maxShipTime) {
            Utils.checkNotNull(maxShipTime, "maxShipTime");
            this.maxShipTime = maxShipTime;
            return this;
        }

        /**
         * The quantity of this item in this order.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        /**
         * The quantity of this item in this order.
         */
        public Builder quantity(Optional<? extends Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * The stock keeping unit value of this item.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        /**
         * The stock keeping unit value of this item.
         */
        public Builder sku(Optional<? extends String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        /**
         * Title of the line item.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Title of the line item.
         */
        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Total price paid by the buyer for this item (or these items, if quantity &gt; 1).
         */
        public Builder totalPrice(String totalPrice) {
            Utils.checkNotNull(totalPrice, "totalPrice");
            this.totalPrice = Optional.ofNullable(totalPrice);
            return this;
        }

        /**
         * Total price paid by the buyer for this item (or these items, if quantity &gt; 1).
         */
        public Builder totalPrice(Optional<? extends String> totalPrice) {
            Utils.checkNotNull(totalPrice, "totalPrice");
            this.totalPrice = totalPrice;
            return this;
        }

        /**
         * A variant is a specific variation of an item (e.g. `size M` or `color blue`). 
         * Variants might be exposed as a separate resource in the future too. 
         * Currently the variant title is a free text field describing the variant.
         */
        public Builder variantTitle(String variantTitle) {
            Utils.checkNotNull(variantTitle, "variantTitle");
            this.variantTitle = Optional.ofNullable(variantTitle);
            return this;
        }

        /**
         * A variant is a specific variation of an item (e.g. `size M` or `color blue`). 
         * Variants might be exposed as a separate resource in the future too. 
         * Currently the variant title is a free text field describing the variant.
         */
        public Builder variantTitle(Optional<? extends String> variantTitle) {
            Utils.checkNotNull(variantTitle, "variantTitle");
            this.variantTitle = variantTitle;
            return this;
        }

        /**
         * Total weight of this/these item(s). Instead of specifying the weight of all items, 
         * you can also set the &lt;code&gt;total_weight&lt;/code&gt; value of the order object.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = Optional.ofNullable(weight);
            return this;
        }

        /**
         * Total weight of this/these item(s). Instead of specifying the weight of all items, 
         * you can also set the &lt;code&gt;total_weight&lt;/code&gt; value of the order object.
         */
        public Builder weight(Optional<? extends String> weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder weightUnit(WeightUnitEnum weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = Optional.ofNullable(weightUnit);
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder weightUnit(Optional<? extends WeightUnitEnum> weightUnit) {
            Utils.checkNotNull(weightUnit, "weightUnit");
            this.weightUnit = weightUnit;
            return this;
        }
        
        public LineItemBase build() {
            return new LineItemBase(
                currency,
                manufactureCountry,
                maxDeliveryTime,
                maxShipTime,
                quantity,
                sku,
                title,
                totalPrice,
                variantTitle,
                weight,
                weightUnit);
        }
    }
}

