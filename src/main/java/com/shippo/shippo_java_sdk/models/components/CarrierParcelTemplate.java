/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CarrierParcelTemplate {

    /**
     * The name of the carrier that provides this parcel template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier")
    private Optional<? extends String> carrier;

    /**
     * The measure unit used for length, width and height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distance_unit")
    private Optional<? extends DistanceUnitEnum> distanceUnit;

    /**
     * The height of the package, in units specified by the distance_unit attribute
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<? extends String> height;

    /**
     * True if the carrier parcel template allows custom dimensions, such as USPS Softpack.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_variable_dimensions")
    private Optional<? extends String> isVariableDimensions;

    /**
     * The length of the package, in units specified by the distance_unit attribute
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    private Optional<? extends String> length;

    /**
     * The name of the carrier parcel template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * The unique string representation of the carrier parcel template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    private Optional<? extends String> token;

    /**
     * The width of the package, in units specified by the distance_unit attribute
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<? extends String> width;

    @JsonCreator
    public CarrierParcelTemplate(
            @JsonProperty("carrier") Optional<? extends String> carrier,
            @JsonProperty("distance_unit") Optional<? extends DistanceUnitEnum> distanceUnit,
            @JsonProperty("height") Optional<? extends String> height,
            @JsonProperty("is_variable_dimensions") Optional<? extends String> isVariableDimensions,
            @JsonProperty("length") Optional<? extends String> length,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("token") Optional<? extends String> token,
            @JsonProperty("width") Optional<? extends String> width) {
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(isVariableDimensions, "isVariableDimensions");
        Utils.checkNotNull(length, "length");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(width, "width");
        this.carrier = carrier;
        this.distanceUnit = distanceUnit;
        this.height = height;
        this.isVariableDimensions = isVariableDimensions;
        this.length = length;
        this.name = name;
        this.token = token;
        this.width = width;
    }
    
    public CarrierParcelTemplate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the carrier that provides this parcel template
     */
    @JsonIgnore
    public Optional<? extends String> carrier() {
        return carrier;
    }

    /**
     * The measure unit used for length, width and height.
     */
    @JsonIgnore
    public Optional<? extends DistanceUnitEnum> distanceUnit() {
        return distanceUnit;
    }

    /**
     * The height of the package, in units specified by the distance_unit attribute
     */
    @JsonIgnore
    public Optional<? extends String> height() {
        return height;
    }

    /**
     * True if the carrier parcel template allows custom dimensions, such as USPS Softpack.
     */
    @JsonIgnore
    public Optional<? extends String> isVariableDimensions() {
        return isVariableDimensions;
    }

    /**
     * The length of the package, in units specified by the distance_unit attribute
     */
    @JsonIgnore
    public Optional<? extends String> length() {
        return length;
    }

    /**
     * The name of the carrier parcel template
     */
    @JsonIgnore
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * The unique string representation of the carrier parcel template
     */
    @JsonIgnore
    public Optional<? extends String> token() {
        return token;
    }

    /**
     * The width of the package, in units specified by the distance_unit attribute
     */
    @JsonIgnore
    public Optional<? extends String> width() {
        return width;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the carrier that provides this parcel template
     */
    public CarrierParcelTemplate withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = Optional.ofNullable(carrier);
        return this;
    }

    /**
     * The name of the carrier that provides this parcel template
     */
    public CarrierParcelTemplate withCarrier(Optional<? extends String> carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    /**
     * The measure unit used for length, width and height.
     */
    public CarrierParcelTemplate withDistanceUnit(DistanceUnitEnum distanceUnit) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        this.distanceUnit = Optional.ofNullable(distanceUnit);
        return this;
    }

    /**
     * The measure unit used for length, width and height.
     */
    public CarrierParcelTemplate withDistanceUnit(Optional<? extends DistanceUnitEnum> distanceUnit) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        this.distanceUnit = distanceUnit;
        return this;
    }

    /**
     * The height of the package, in units specified by the distance_unit attribute
     */
    public CarrierParcelTemplate withHeight(String height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    /**
     * The height of the package, in units specified by the distance_unit attribute
     */
    public CarrierParcelTemplate withHeight(Optional<? extends String> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * True if the carrier parcel template allows custom dimensions, such as USPS Softpack.
     */
    public CarrierParcelTemplate withIsVariableDimensions(String isVariableDimensions) {
        Utils.checkNotNull(isVariableDimensions, "isVariableDimensions");
        this.isVariableDimensions = Optional.ofNullable(isVariableDimensions);
        return this;
    }

    /**
     * True if the carrier parcel template allows custom dimensions, such as USPS Softpack.
     */
    public CarrierParcelTemplate withIsVariableDimensions(Optional<? extends String> isVariableDimensions) {
        Utils.checkNotNull(isVariableDimensions, "isVariableDimensions");
        this.isVariableDimensions = isVariableDimensions;
        return this;
    }

    /**
     * The length of the package, in units specified by the distance_unit attribute
     */
    public CarrierParcelTemplate withLength(String length) {
        Utils.checkNotNull(length, "length");
        this.length = Optional.ofNullable(length);
        return this;
    }

    /**
     * The length of the package, in units specified by the distance_unit attribute
     */
    public CarrierParcelTemplate withLength(Optional<? extends String> length) {
        Utils.checkNotNull(length, "length");
        this.length = length;
        return this;
    }

    /**
     * The name of the carrier parcel template
     */
    public CarrierParcelTemplate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the carrier parcel template
     */
    public CarrierParcelTemplate withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The unique string representation of the carrier parcel template
     */
    public CarrierParcelTemplate withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = Optional.ofNullable(token);
        return this;
    }

    /**
     * The unique string representation of the carrier parcel template
     */
    public CarrierParcelTemplate withToken(Optional<? extends String> token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * The width of the package, in units specified by the distance_unit attribute
     */
    public CarrierParcelTemplate withWidth(String width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    /**
     * The width of the package, in units specified by the distance_unit attribute
     */
    public CarrierParcelTemplate withWidth(Optional<? extends String> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CarrierParcelTemplate other = (CarrierParcelTemplate) o;
        return 
            java.util.Objects.deepEquals(this.carrier, other.carrier) &&
            java.util.Objects.deepEquals(this.distanceUnit, other.distanceUnit) &&
            java.util.Objects.deepEquals(this.height, other.height) &&
            java.util.Objects.deepEquals(this.isVariableDimensions, other.isVariableDimensions) &&
            java.util.Objects.deepEquals(this.length, other.length) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.token, other.token) &&
            java.util.Objects.deepEquals(this.width, other.width);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            carrier,
            distanceUnit,
            height,
            isVariableDimensions,
            length,
            name,
            token,
            width);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CarrierParcelTemplate.class,
                "carrier", carrier,
                "distanceUnit", distanceUnit,
                "height", height,
                "isVariableDimensions", isVariableDimensions,
                "length", length,
                "name", name,
                "token", token,
                "width", width);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> carrier = Optional.empty();
 
        private Optional<? extends DistanceUnitEnum> distanceUnit = Optional.empty();
 
        private Optional<? extends String> height = Optional.empty();
 
        private Optional<? extends String> isVariableDimensions = Optional.empty();
 
        private Optional<? extends String> length = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> token = Optional.empty();
 
        private Optional<? extends String> width = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the carrier that provides this parcel template
         */
        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = Optional.ofNullable(carrier);
            return this;
        }

        /**
         * The name of the carrier that provides this parcel template
         */
        public Builder carrier(Optional<? extends String> carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        /**
         * The measure unit used for length, width and height.
         */
        public Builder distanceUnit(DistanceUnitEnum distanceUnit) {
            Utils.checkNotNull(distanceUnit, "distanceUnit");
            this.distanceUnit = Optional.ofNullable(distanceUnit);
            return this;
        }

        /**
         * The measure unit used for length, width and height.
         */
        public Builder distanceUnit(Optional<? extends DistanceUnitEnum> distanceUnit) {
            Utils.checkNotNull(distanceUnit, "distanceUnit");
            this.distanceUnit = distanceUnit;
            return this;
        }

        /**
         * The height of the package, in units specified by the distance_unit attribute
         */
        public Builder height(String height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        /**
         * The height of the package, in units specified by the distance_unit attribute
         */
        public Builder height(Optional<? extends String> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * True if the carrier parcel template allows custom dimensions, such as USPS Softpack.
         */
        public Builder isVariableDimensions(String isVariableDimensions) {
            Utils.checkNotNull(isVariableDimensions, "isVariableDimensions");
            this.isVariableDimensions = Optional.ofNullable(isVariableDimensions);
            return this;
        }

        /**
         * True if the carrier parcel template allows custom dimensions, such as USPS Softpack.
         */
        public Builder isVariableDimensions(Optional<? extends String> isVariableDimensions) {
            Utils.checkNotNull(isVariableDimensions, "isVariableDimensions");
            this.isVariableDimensions = isVariableDimensions;
            return this;
        }

        /**
         * The length of the package, in units specified by the distance_unit attribute
         */
        public Builder length(String length) {
            Utils.checkNotNull(length, "length");
            this.length = Optional.ofNullable(length);
            return this;
        }

        /**
         * The length of the package, in units specified by the distance_unit attribute
         */
        public Builder length(Optional<? extends String> length) {
            Utils.checkNotNull(length, "length");
            this.length = length;
            return this;
        }

        /**
         * The name of the carrier parcel template
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the carrier parcel template
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The unique string representation of the carrier parcel template
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = Optional.ofNullable(token);
            return this;
        }

        /**
         * The unique string representation of the carrier parcel template
         */
        public Builder token(Optional<? extends String> token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }

        /**
         * The width of the package, in units specified by the distance_unit attribute
         */
        public Builder width(String width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        /**
         * The width of the package, in units specified by the distance_unit attribute
         */
        public Builder width(Optional<? extends String> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }
        
        public CarrierParcelTemplate build() {
            return new CarrierParcelTemplate(
                carrier,
                distanceUnit,
                height,
                isVariableDimensions,
                length,
                name,
                token,
                width);
        }
    }
}

