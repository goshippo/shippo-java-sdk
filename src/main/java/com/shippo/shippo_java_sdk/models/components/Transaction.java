/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;


public class Transaction {

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commercial_invoice_url")
    private Optional<? extends String> commercialInvoiceUrl;

    /**
     * The estimated time of arrival according to the carrier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eta")
    private Optional<? extends String> eta;

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label_file_type")
    private Optional<? extends LabelFileTypeEnum> labelFileType;

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label_url")
    private Optional<? extends String> labelUrl;

    /**
     * An array containing elements of the following schema:&lt;br&gt;
     * `code` (string): an identifier for the corresponding message (not always available)&lt;br&gt;
     * `message` (string): a publishable message containing further information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends java.util.List<TransactionMessages>> messages;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    /**
     * Date and time of Transaction creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<? extends OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given Transaction object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<? extends String> objectId;

    /**
     * Username of the user who created the Transaction object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<? extends String> objectOwner;

    /**
     * Indicates the validity of the enclosing object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_state")
    private Optional<? extends ObjectStateEnum> objectState;

    /**
     * Date and time of last Transaction update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<? extends OffsetDateTime> objectUpdated;

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("qr_code_url")
    private Optional<? extends String> qrCodeUrl;

    /**
     * Indicates the status of the Transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TransactionStatusEnum> status;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<? extends Boolean> test;

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_number")
    private Optional<? extends String> trackingNumber;

    /**
     * Indicates the high level status of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_status")
    private Optional<? extends TrackingStatusEnum> trackingStatus;

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking_url_provider")
    private Optional<? extends String> trackingUrlProvider;

    /**
     * ID of the Rate object for which a Label has to be obtained. 
     * Please note that only rates that are not older than 7 days can be purchased in order to ensure up-to-date pricing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private Optional<? extends String> rate;

    @JsonCreator
    public Transaction(
            @JsonProperty("commercial_invoice_url") Optional<? extends String> commercialInvoiceUrl,
            @JsonProperty("eta") Optional<? extends String> eta,
            @JsonProperty("label_file_type") Optional<? extends LabelFileTypeEnum> labelFileType,
            @JsonProperty("label_url") Optional<? extends String> labelUrl,
            @JsonProperty("messages") Optional<? extends java.util.List<TransactionMessages>> messages,
            @JsonProperty("metadata") Optional<? extends String> metadata,
            @JsonProperty("object_created") Optional<? extends OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<? extends String> objectId,
            @JsonProperty("object_owner") Optional<? extends String> objectOwner,
            @JsonProperty("object_state") Optional<? extends ObjectStateEnum> objectState,
            @JsonProperty("object_updated") Optional<? extends OffsetDateTime> objectUpdated,
            @JsonProperty("qr_code_url") Optional<? extends String> qrCodeUrl,
            @JsonProperty("status") Optional<? extends TransactionStatusEnum> status,
            @JsonProperty("test") Optional<? extends Boolean> test,
            @JsonProperty("tracking_number") Optional<? extends String> trackingNumber,
            @JsonProperty("tracking_status") Optional<? extends TrackingStatusEnum> trackingStatus,
            @JsonProperty("tracking_url_provider") Optional<? extends String> trackingUrlProvider,
            @JsonProperty("rate") Optional<? extends String> rate) {
        Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
        Utils.checkNotNull(eta, "eta");
        Utils.checkNotNull(labelFileType, "labelFileType");
        Utils.checkNotNull(labelUrl, "labelUrl");
        Utils.checkNotNull(messages, "messages");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectState, "objectState");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(test, "test");
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        Utils.checkNotNull(trackingStatus, "trackingStatus");
        Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
        Utils.checkNotNull(rate, "rate");
        this.commercialInvoiceUrl = commercialInvoiceUrl;
        this.eta = eta;
        this.labelFileType = labelFileType;
        this.labelUrl = labelUrl;
        this.messages = messages;
        this.metadata = metadata;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectState = objectState;
        this.objectUpdated = objectUpdated;
        this.qrCodeUrl = qrCodeUrl;
        this.status = status;
        this.test = test;
        this.trackingNumber = trackingNumber;
        this.trackingStatus = trackingStatus;
        this.trackingUrlProvider = trackingUrlProvider;
        this.rate = rate;
    }
    
    public Transaction() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    @JsonIgnore
    public Optional<? extends String> commercialInvoiceUrl() {
        return commercialInvoiceUrl;
    }

    /**
     * The estimated time of arrival according to the carrier.
     */
    @JsonIgnore
    public Optional<? extends String> eta() {
        return eta;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    @JsonIgnore
    public Optional<? extends LabelFileTypeEnum> labelFileType() {
        return labelFileType;
    }

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    @JsonIgnore
    public Optional<? extends String> labelUrl() {
        return labelUrl;
    }

    /**
     * An array containing elements of the following schema:&lt;br&gt;
     * `code` (string): an identifier for the corresponding message (not always available)&lt;br&gt;
     * `message` (string): a publishable message containing further information.
     */
    @JsonIgnore
    public Optional<? extends java.util.List<TransactionMessages>> messages() {
        return messages;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    @JsonIgnore
    public Optional<? extends String> metadata() {
        return metadata;
    }

    /**
     * Date and time of Transaction creation.
     */
    @JsonIgnore
    public Optional<? extends OffsetDateTime> objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given Transaction object.
     */
    @JsonIgnore
    public Optional<? extends String> objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the Transaction object.
     */
    @JsonIgnore
    public Optional<? extends String> objectOwner() {
        return objectOwner;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    @JsonIgnore
    public Optional<? extends ObjectStateEnum> objectState() {
        return objectState;
    }

    /**
     * Date and time of last Transaction update.
     */
    @JsonIgnore
    public Optional<? extends OffsetDateTime> objectUpdated() {
        return objectUpdated;
    }

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    @JsonIgnore
    public Optional<? extends String> qrCodeUrl() {
        return qrCodeUrl;
    }

    /**
     * Indicates the status of the Transaction.
     */
    @JsonIgnore
    public Optional<? extends TransactionStatusEnum> status() {
        return status;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonIgnore
    public Optional<? extends Boolean> test() {
        return test;
    }

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    @JsonIgnore
    public Optional<? extends String> trackingNumber() {
        return trackingNumber;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    @JsonIgnore
    public Optional<? extends TrackingStatusEnum> trackingStatus() {
        return trackingStatus;
    }

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    @JsonIgnore
    public Optional<? extends String> trackingUrlProvider() {
        return trackingUrlProvider;
    }

    /**
     * ID of the Rate object for which a Label has to be obtained. 
     * Please note that only rates that are not older than 7 days can be purchased in order to ensure up-to-date pricing.
     */
    @JsonIgnore
    public Optional<? extends String> rate() {
        return rate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    public Transaction withCommercialInvoiceUrl(String commercialInvoiceUrl) {
        Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
        this.commercialInvoiceUrl = Optional.ofNullable(commercialInvoiceUrl);
        return this;
    }

    /**
     * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
     * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
     */
    public Transaction withCommercialInvoiceUrl(Optional<? extends String> commercialInvoiceUrl) {
        Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
        this.commercialInvoiceUrl = commercialInvoiceUrl;
        return this;
    }

    /**
     * The estimated time of arrival according to the carrier.
     */
    public Transaction withEta(String eta) {
        Utils.checkNotNull(eta, "eta");
        this.eta = Optional.ofNullable(eta);
        return this;
    }

    /**
     * The estimated time of arrival according to the carrier.
     */
    public Transaction withEta(Optional<? extends String> eta) {
        Utils.checkNotNull(eta, "eta");
        this.eta = eta;
        return this;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    public Transaction withLabelFileType(LabelFileTypeEnum labelFileType) {
        Utils.checkNotNull(labelFileType, "labelFileType");
        this.labelFileType = Optional.ofNullable(labelFileType);
        return this;
    }

    /**
     * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
     * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
     */
    public Transaction withLabelFileType(Optional<? extends LabelFileTypeEnum> labelFileType) {
        Utils.checkNotNull(labelFileType, "labelFileType");
        this.labelFileType = labelFileType;
        return this;
    }

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    public Transaction withLabelUrl(String labelUrl) {
        Utils.checkNotNull(labelUrl, "labelUrl");
        this.labelUrl = Optional.ofNullable(labelUrl);
        return this;
    }

    /**
     * A URL pointing directly to the label in the format you've set in your settings. 
     * A value will only be returned if the Transactions has been processed successfully.
     */
    public Transaction withLabelUrl(Optional<? extends String> labelUrl) {
        Utils.checkNotNull(labelUrl, "labelUrl");
        this.labelUrl = labelUrl;
        return this;
    }

    /**
     * An array containing elements of the following schema:&lt;br&gt;
     * `code` (string): an identifier for the corresponding message (not always available)&lt;br&gt;
     * `message` (string): a publishable message containing further information.
     */
    public Transaction withMessages(java.util.List<TransactionMessages> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    /**
     * An array containing elements of the following schema:&lt;br&gt;
     * `code` (string): an identifier for the corresponding message (not always available)&lt;br&gt;
     * `message` (string): a publishable message containing further information.
     */
    public Transaction withMessages(Optional<? extends java.util.List<TransactionMessages>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    public Transaction withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to 
     * attach to the object.
     */
    public Transaction withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Date and time of Transaction creation.
     */
    public Transaction withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of Transaction creation.
     */
    public Transaction withObjectCreated(Optional<? extends OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given Transaction object.
     */
    public Transaction withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given Transaction object.
     */
    public Transaction withObjectId(Optional<? extends String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the Transaction object.
     */
    public Transaction withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the Transaction object.
     */
    public Transaction withObjectOwner(Optional<? extends String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    public Transaction withObjectState(ObjectStateEnum objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = Optional.ofNullable(objectState);
        return this;
    }

    /**
     * Indicates the validity of the enclosing object
     */
    public Transaction withObjectState(Optional<? extends ObjectStateEnum> objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = objectState;
        return this;
    }

    /**
     * Date and time of last Transaction update.
     */
    public Transaction withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last Transaction update.
     */
    public Transaction withObjectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    public Transaction withQrCodeUrl(String qrCodeUrl) {
        Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
        this.qrCodeUrl = Optional.ofNullable(qrCodeUrl);
        return this;
    }

    /**
     * A URL pointing directly to the QR code in PNG format. 
     * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
     */
    public Transaction withQrCodeUrl(Optional<? extends String> qrCodeUrl) {
        Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
        this.qrCodeUrl = qrCodeUrl;
        return this;
    }

    /**
     * Indicates the status of the Transaction.
     */
    public Transaction withStatus(TransactionStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Indicates the status of the Transaction.
     */
    public Transaction withStatus(Optional<? extends TransactionStatusEnum> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Transaction withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Transaction withTest(Optional<? extends Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    public Transaction withTrackingNumber(String trackingNumber) {
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        this.trackingNumber = Optional.ofNullable(trackingNumber);
        return this;
    }

    /**
     * The carrier-specific tracking number that can be used to track the Shipment. 
     * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
     */
    public Transaction withTrackingNumber(Optional<? extends String> trackingNumber) {
        Utils.checkNotNull(trackingNumber, "trackingNumber");
        this.trackingNumber = trackingNumber;
        return this;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    public Transaction withTrackingStatus(TrackingStatusEnum trackingStatus) {
        Utils.checkNotNull(trackingStatus, "trackingStatus");
        this.trackingStatus = Optional.ofNullable(trackingStatus);
        return this;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    public Transaction withTrackingStatus(Optional<? extends TrackingStatusEnum> trackingStatus) {
        Utils.checkNotNull(trackingStatus, "trackingStatus");
        this.trackingStatus = trackingStatus;
        return this;
    }

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    public Transaction withTrackingUrlProvider(String trackingUrlProvider) {
        Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
        this.trackingUrlProvider = Optional.ofNullable(trackingUrlProvider);
        return this;
    }

    /**
     * A link to track this item on the carrier-provided tracking website. 
     * A value will only be returned if tracking is available and the carrier provides such a service.
     */
    public Transaction withTrackingUrlProvider(Optional<? extends String> trackingUrlProvider) {
        Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
        this.trackingUrlProvider = trackingUrlProvider;
        return this;
    }

    /**
     * ID of the Rate object for which a Label has to be obtained. 
     * Please note that only rates that are not older than 7 days can be purchased in order to ensure up-to-date pricing.
     */
    public Transaction withRate(String rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = Optional.ofNullable(rate);
        return this;
    }

    /**
     * ID of the Rate object for which a Label has to be obtained. 
     * Please note that only rates that are not older than 7 days can be purchased in order to ensure up-to-date pricing.
     */
    public Transaction withRate(Optional<? extends String> rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transaction other = (Transaction) o;
        return 
            java.util.Objects.deepEquals(this.commercialInvoiceUrl, other.commercialInvoiceUrl) &&
            java.util.Objects.deepEquals(this.eta, other.eta) &&
            java.util.Objects.deepEquals(this.labelFileType, other.labelFileType) &&
            java.util.Objects.deepEquals(this.labelUrl, other.labelUrl) &&
            java.util.Objects.deepEquals(this.messages, other.messages) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            java.util.Objects.deepEquals(this.objectState, other.objectState) &&
            java.util.Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            java.util.Objects.deepEquals(this.qrCodeUrl, other.qrCodeUrl) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.test, other.test) &&
            java.util.Objects.deepEquals(this.trackingNumber, other.trackingNumber) &&
            java.util.Objects.deepEquals(this.trackingStatus, other.trackingStatus) &&
            java.util.Objects.deepEquals(this.trackingUrlProvider, other.trackingUrlProvider) &&
            java.util.Objects.deepEquals(this.rate, other.rate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            commercialInvoiceUrl,
            eta,
            labelFileType,
            labelUrl,
            messages,
            metadata,
            objectCreated,
            objectId,
            objectOwner,
            objectState,
            objectUpdated,
            qrCodeUrl,
            status,
            test,
            trackingNumber,
            trackingStatus,
            trackingUrlProvider,
            rate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Transaction.class,
                "commercialInvoiceUrl", commercialInvoiceUrl,
                "eta", eta,
                "labelFileType", labelFileType,
                "labelUrl", labelUrl,
                "messages", messages,
                "metadata", metadata,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectState", objectState,
                "objectUpdated", objectUpdated,
                "qrCodeUrl", qrCodeUrl,
                "status", status,
                "test", test,
                "trackingNumber", trackingNumber,
                "trackingStatus", trackingStatus,
                "trackingUrlProvider", trackingUrlProvider,
                "rate", rate);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> commercialInvoiceUrl = Optional.empty();
 
        private Optional<? extends String> eta = Optional.empty();
 
        private Optional<? extends LabelFileTypeEnum> labelFileType = Optional.empty();
 
        private Optional<? extends String> labelUrl = Optional.empty();
 
        private Optional<? extends java.util.List<TransactionMessages>> messages = Optional.empty();
 
        private Optional<? extends String> metadata = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<? extends String> objectId = Optional.empty();
 
        private Optional<? extends String> objectOwner = Optional.empty();
 
        private Optional<? extends ObjectStateEnum> objectState = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<? extends String> qrCodeUrl = Optional.empty();
 
        private Optional<? extends TransactionStatusEnum> status = Optional.empty();
 
        private Optional<? extends Boolean> test = Optional.empty();
 
        private Optional<? extends String> trackingNumber = Optional.empty();
 
        private Optional<? extends TrackingStatusEnum> trackingStatus = Optional.empty();
 
        private Optional<? extends String> trackingUrlProvider = Optional.empty();
 
        private Optional<? extends String> rate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
         * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
         */
        public Builder commercialInvoiceUrl(String commercialInvoiceUrl) {
            Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
            this.commercialInvoiceUrl = Optional.ofNullable(commercialInvoiceUrl);
            return this;
        }

        /**
         * A URL pointing to the commercial invoice as a 8.5x11 inch PDF file. 
         * A value will only be returned if the Transactions has been processed successfully and if the shipment is international.
         */
        public Builder commercialInvoiceUrl(Optional<? extends String> commercialInvoiceUrl) {
            Utils.checkNotNull(commercialInvoiceUrl, "commercialInvoiceUrl");
            this.commercialInvoiceUrl = commercialInvoiceUrl;
            return this;
        }

        /**
         * The estimated time of arrival according to the carrier.
         */
        public Builder eta(String eta) {
            Utils.checkNotNull(eta, "eta");
            this.eta = Optional.ofNullable(eta);
            return this;
        }

        /**
         * The estimated time of arrival according to the carrier.
         */
        public Builder eta(Optional<? extends String> eta) {
            Utils.checkNotNull(eta, "eta");
            this.eta = eta;
            return this;
        }

        /**
         * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
         * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
         */
        public Builder labelFileType(LabelFileTypeEnum labelFileType) {
            Utils.checkNotNull(labelFileType, "labelFileType");
            this.labelFileType = Optional.ofNullable(labelFileType);
            return this;
        }

        /**
         * Print format of the &lt;a href="https://docs.goshippo.com/docs/shipments/shippinglabelsizes/"&gt;label&lt;/a&gt;. If empty, will use the default format set from 
         * &lt;a href="https://apps.goshippo.com/settings/labels"&gt;the Shippo dashboard.&lt;/a&gt;
         */
        public Builder labelFileType(Optional<? extends LabelFileTypeEnum> labelFileType) {
            Utils.checkNotNull(labelFileType, "labelFileType");
            this.labelFileType = labelFileType;
            return this;
        }

        /**
         * A URL pointing directly to the label in the format you've set in your settings. 
         * A value will only be returned if the Transactions has been processed successfully.
         */
        public Builder labelUrl(String labelUrl) {
            Utils.checkNotNull(labelUrl, "labelUrl");
            this.labelUrl = Optional.ofNullable(labelUrl);
            return this;
        }

        /**
         * A URL pointing directly to the label in the format you've set in your settings. 
         * A value will only be returned if the Transactions has been processed successfully.
         */
        public Builder labelUrl(Optional<? extends String> labelUrl) {
            Utils.checkNotNull(labelUrl, "labelUrl");
            this.labelUrl = labelUrl;
            return this;
        }

        /**
         * An array containing elements of the following schema:&lt;br&gt;
         * `code` (string): an identifier for the corresponding message (not always available)&lt;br&gt;
         * `message` (string): a publishable message containing further information.
         */
        public Builder messages(java.util.List<TransactionMessages> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * An array containing elements of the following schema:&lt;br&gt;
         * `code` (string): an identifier for the corresponding message (not always available)&lt;br&gt;
         * `message` (string): a publishable message containing further information.
         */
        public Builder messages(Optional<? extends java.util.List<TransactionMessages>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to 
         * attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to 
         * attach to the object.
         */
        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Date and time of Transaction creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of Transaction creation.
         */
        public Builder objectCreated(Optional<? extends OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given Transaction object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given Transaction object.
         */
        public Builder objectId(Optional<? extends String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the Transaction object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the Transaction object.
         */
        public Builder objectOwner(Optional<? extends String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Indicates the validity of the enclosing object
         */
        public Builder objectState(ObjectStateEnum objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = Optional.ofNullable(objectState);
            return this;
        }

        /**
         * Indicates the validity of the enclosing object
         */
        public Builder objectState(Optional<? extends ObjectStateEnum> objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = objectState;
            return this;
        }

        /**
         * Date and time of last Transaction update.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last Transaction update.
         */
        public Builder objectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * A URL pointing directly to the QR code in PNG format. 
         * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
         */
        public Builder qrCodeUrl(String qrCodeUrl) {
            Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
            this.qrCodeUrl = Optional.ofNullable(qrCodeUrl);
            return this;
        }

        /**
         * A URL pointing directly to the QR code in PNG format. 
         * A value will only be returned if requested using qr_code_requested flag and the carrier provides such an option.
         */
        public Builder qrCodeUrl(Optional<? extends String> qrCodeUrl) {
            Utils.checkNotNull(qrCodeUrl, "qrCodeUrl");
            this.qrCodeUrl = qrCodeUrl;
            return this;
        }

        /**
         * Indicates the status of the Transaction.
         */
        public Builder status(TransactionStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Indicates the status of the Transaction.
         */
        public Builder status(Optional<? extends TransactionStatusEnum> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<? extends Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }

        /**
         * The carrier-specific tracking number that can be used to track the Shipment. 
         * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
         */
        public Builder trackingNumber(String trackingNumber) {
            Utils.checkNotNull(trackingNumber, "trackingNumber");
            this.trackingNumber = Optional.ofNullable(trackingNumber);
            return this;
        }

        /**
         * The carrier-specific tracking number that can be used to track the Shipment. 
         * A value will only be returned if the Rate is for a trackable Shipment and if the Transactions has been processed successfully.
         */
        public Builder trackingNumber(Optional<? extends String> trackingNumber) {
            Utils.checkNotNull(trackingNumber, "trackingNumber");
            this.trackingNumber = trackingNumber;
            return this;
        }

        /**
         * Indicates the high level status of the shipment.
         */
        public Builder trackingStatus(TrackingStatusEnum trackingStatus) {
            Utils.checkNotNull(trackingStatus, "trackingStatus");
            this.trackingStatus = Optional.ofNullable(trackingStatus);
            return this;
        }

        /**
         * Indicates the high level status of the shipment.
         */
        public Builder trackingStatus(Optional<? extends TrackingStatusEnum> trackingStatus) {
            Utils.checkNotNull(trackingStatus, "trackingStatus");
            this.trackingStatus = trackingStatus;
            return this;
        }

        /**
         * A link to track this item on the carrier-provided tracking website. 
         * A value will only be returned if tracking is available and the carrier provides such a service.
         */
        public Builder trackingUrlProvider(String trackingUrlProvider) {
            Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
            this.trackingUrlProvider = Optional.ofNullable(trackingUrlProvider);
            return this;
        }

        /**
         * A link to track this item on the carrier-provided tracking website. 
         * A value will only be returned if tracking is available and the carrier provides such a service.
         */
        public Builder trackingUrlProvider(Optional<? extends String> trackingUrlProvider) {
            Utils.checkNotNull(trackingUrlProvider, "trackingUrlProvider");
            this.trackingUrlProvider = trackingUrlProvider;
            return this;
        }

        /**
         * ID of the Rate object for which a Label has to be obtained. 
         * Please note that only rates that are not older than 7 days can be purchased in order to ensure up-to-date pricing.
         */
        public Builder rate(String rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = Optional.ofNullable(rate);
            return this;
        }

        /**
         * ID of the Rate object for which a Label has to be obtained. 
         * Please note that only rates that are not older than 7 days can be purchased in order to ensure up-to-date pricing.
         */
        public Builder rate(Optional<? extends String> rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }
        
        public Transaction build() {
            return new Transaction(
                commercialInvoiceUrl,
                eta,
                labelFileType,
                labelUrl,
                messages,
                metadata,
                objectCreated,
                objectId,
                objectOwner,
                objectState,
                objectUpdated,
                qrCodeUrl,
                status,
                test,
                trackingNumber,
                trackingStatus,
                trackingUrlProvider,
                rate);
        }
    }
}

