/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class AddressValidationResultsMessage {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends Code> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<? extends Source> source;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<? extends String> text;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonCreator
    public AddressValidationResultsMessage(
            @JsonProperty("code") Optional<? extends Code> code,
            @JsonProperty("source") Optional<? extends Source> source,
            @JsonProperty("text") Optional<? extends String> text,
            @JsonProperty("type") Optional<? extends String> type) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(type, "type");
        this.code = code;
        this.source = source;
        this.text = text;
        this.type = type;
    }
    
    public AddressValidationResultsMessage() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends Code> code() {
        return code;
    }

    @JsonIgnore
    public Optional<? extends Source> source() {
        return source;
    }

    @JsonIgnore
    public Optional<? extends String> text() {
        return text;
    }

    @JsonIgnore
    public Optional<? extends String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AddressValidationResultsMessage withCode(Code code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }

    public AddressValidationResultsMessage withCode(Optional<? extends Code> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public AddressValidationResultsMessage withSource(Source source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    public AddressValidationResultsMessage withSource(Optional<? extends Source> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public AddressValidationResultsMessage withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }

    public AddressValidationResultsMessage withText(Optional<? extends String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    public AddressValidationResultsMessage withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public AddressValidationResultsMessage withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddressValidationResultsMessage other = (AddressValidationResultsMessage) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.source, other.source) &&
            java.util.Objects.deepEquals(this.text, other.text) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            source,
            text,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddressValidationResultsMessage.class,
                "code", code,
                "source", source,
                "text", text,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends Code> code = Optional.empty();
 
        private Optional<? extends Source> source = Optional.empty();
 
        private Optional<? extends String> text = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder code(Code code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<? extends Code> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder source(Source source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Optional<? extends Source> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        public Builder text(Optional<? extends String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public AddressValidationResultsMessage build() {
            return new AddressValidationResultsMessage(
                code,
                source,
                text,
                type);
        }
    }
}

