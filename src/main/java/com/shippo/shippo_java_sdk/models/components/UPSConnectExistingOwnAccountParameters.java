/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * UPSConnectExistingOwnAccountParameters - An array of additional parameters for the account, such as e.g. password or token.
 * Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; page for the parameters per carrier.&lt;br&gt; 
 * To protect account information, this field will be masked in any API response.
 */

public class UPSConnectExistingOwnAccountParameters {

    /**
     * The UPS account number
     */
    @JsonProperty("account_number")
    private String accountNumber;

    /**
     * Only required if has_invoice is true. Country associated with the account that issued the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aia_country_iso2")
    private Optional<? extends String> aiaCountryIso2;

    @JsonProperty("billing_address_city")
    private String billingAddressCity;

    @JsonProperty("billing_address_country_iso2")
    private String billingAddressCountryIso2;

    @JsonProperty("billing_address_state")
    private String billingAddressState;

    @JsonProperty("billing_address_street1")
    private String billingAddressStreet1;

    /**
     * Empty string acceptable for billing_address_street2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address_street2")
    private Optional<? extends String> billingAddressStreet2;

    @JsonProperty("billing_address_zip")
    private String billingAddressZip;

    @JsonProperty("collec_country_iso2")
    private String collecCountryIso2;

    /**
     * Zip code of the collection/pickup address
     */
    @JsonProperty("collec_zip")
    private String collecZip;

    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    @JsonProperty("company")
    private String company;

    /**
     * Only required if has_invoice is true. 3-letter currency code associated with invoice_value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_code")
    private Optional<? extends String> currencyCode;

    @JsonProperty("email")
    private String email;

    @JsonProperty("full_name")
    private String fullName;

    /**
     * true if user has been issued a UPS invoice within the past 90 days for the US or Canada; and 45 days for any other countries. User can use data from any of the last 3 invoices
     */
    @JsonProperty("has_invoice")
    private boolean hasInvoice;

    /**
     * Only required if aia_country_iso2 is US and has_invoice is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_controlid")
    private Optional<? extends String> invoiceControlid;

    /**
     * Only required if has_invoice is true. Date the invoice was issued. yyyymmdd format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_date")
    private Optional<? extends String> invoiceDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_number")
    private Optional<? extends String> invoiceNumber;

    /**
     * Only required if has_invoice is true. Max 16 digits before decimal and 2 digits after decimal
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_value")
    private Optional<? extends String> invoiceValue;

    @JsonProperty("phone")
    private String phone;

    /**
     * User's title, e.g. including but not limited to Manager, Doctor, Artist, Engineer, Mr, Ms, Mrs, Mx
     */
    @JsonProperty("title")
    private String title;

    /**
     * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     */
    @JsonProperty("ups_agreements")
    private boolean upsAgreements;

    @JsonCreator
    public UPSConnectExistingOwnAccountParameters(
            @JsonProperty("account_number") String accountNumber,
            @JsonProperty("aia_country_iso2") Optional<? extends String> aiaCountryIso2,
            @JsonProperty("billing_address_city") String billingAddressCity,
            @JsonProperty("billing_address_country_iso2") String billingAddressCountryIso2,
            @JsonProperty("billing_address_state") String billingAddressState,
            @JsonProperty("billing_address_street1") String billingAddressStreet1,
            @JsonProperty("billing_address_street2") Optional<? extends String> billingAddressStreet2,
            @JsonProperty("billing_address_zip") String billingAddressZip,
            @JsonProperty("collec_country_iso2") String collecCountryIso2,
            @JsonProperty("collec_zip") String collecZip,
            @JsonProperty("company") String company,
            @JsonProperty("currency_code") Optional<? extends String> currencyCode,
            @JsonProperty("email") String email,
            @JsonProperty("full_name") String fullName,
            @JsonProperty("has_invoice") boolean hasInvoice,
            @JsonProperty("invoice_controlid") Optional<? extends String> invoiceControlid,
            @JsonProperty("invoice_date") Optional<? extends String> invoiceDate,
            @JsonProperty("invoice_number") Optional<? extends String> invoiceNumber,
            @JsonProperty("invoice_value") Optional<? extends String> invoiceValue,
            @JsonProperty("phone") String phone,
            @JsonProperty("title") String title,
            @JsonProperty("ups_agreements") boolean upsAgreements) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(aiaCountryIso2, "aiaCountryIso2");
        Utils.checkNotNull(billingAddressCity, "billingAddressCity");
        Utils.checkNotNull(billingAddressCountryIso2, "billingAddressCountryIso2");
        Utils.checkNotNull(billingAddressState, "billingAddressState");
        Utils.checkNotNull(billingAddressStreet1, "billingAddressStreet1");
        Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
        Utils.checkNotNull(billingAddressZip, "billingAddressZip");
        Utils.checkNotNull(collecCountryIso2, "collecCountryIso2");
        Utils.checkNotNull(collecZip, "collecZip");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(currencyCode, "currencyCode");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(fullName, "fullName");
        Utils.checkNotNull(hasInvoice, "hasInvoice");
        Utils.checkNotNull(invoiceControlid, "invoiceControlid");
        Utils.checkNotNull(invoiceDate, "invoiceDate");
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        Utils.checkNotNull(invoiceValue, "invoiceValue");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(upsAgreements, "upsAgreements");
        this.accountNumber = accountNumber;
        this.aiaCountryIso2 = aiaCountryIso2;
        this.billingAddressCity = billingAddressCity;
        this.billingAddressCountryIso2 = billingAddressCountryIso2;
        this.billingAddressState = billingAddressState;
        this.billingAddressStreet1 = billingAddressStreet1;
        this.billingAddressStreet2 = billingAddressStreet2;
        this.billingAddressZip = billingAddressZip;
        this.collecCountryIso2 = collecCountryIso2;
        this.collecZip = collecZip;
        this.company = company;
        this.currencyCode = currencyCode;
        this.email = email;
        this.fullName = fullName;
        this.hasInvoice = hasInvoice;
        this.invoiceControlid = invoiceControlid;
        this.invoiceDate = invoiceDate;
        this.invoiceNumber = invoiceNumber;
        this.invoiceValue = invoiceValue;
        this.phone = phone;
        this.title = title;
        this.upsAgreements = upsAgreements;
    }
    
    public UPSConnectExistingOwnAccountParameters(
            String accountNumber,
            String billingAddressCity,
            String billingAddressCountryIso2,
            String billingAddressState,
            String billingAddressStreet1,
            String billingAddressZip,
            String collecCountryIso2,
            String collecZip,
            String company,
            String email,
            String fullName,
            boolean hasInvoice,
            String phone,
            String title,
            boolean upsAgreements) {
        this(accountNumber, Optional.empty(), billingAddressCity, billingAddressCountryIso2, billingAddressState, billingAddressStreet1, Optional.empty(), billingAddressZip, collecCountryIso2, collecZip, company, Optional.empty(), email, fullName, hasInvoice, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), phone, title, upsAgreements);
    }

    /**
     * The UPS account number
     */
    @JsonIgnore
    public String accountNumber() {
        return accountNumber;
    }

    /**
     * Only required if has_invoice is true. Country associated with the account that issued the invoice
     */
    @JsonIgnore
    public Optional<? extends String> aiaCountryIso2() {
        return aiaCountryIso2;
    }

    @JsonIgnore
    public String billingAddressCity() {
        return billingAddressCity;
    }

    @JsonIgnore
    public String billingAddressCountryIso2() {
        return billingAddressCountryIso2;
    }

    @JsonIgnore
    public String billingAddressState() {
        return billingAddressState;
    }

    @JsonIgnore
    public String billingAddressStreet1() {
        return billingAddressStreet1;
    }

    /**
     * Empty string acceptable for billing_address_street2
     */
    @JsonIgnore
    public Optional<? extends String> billingAddressStreet2() {
        return billingAddressStreet2;
    }

    @JsonIgnore
    public String billingAddressZip() {
        return billingAddressZip;
    }

    @JsonIgnore
    public String collecCountryIso2() {
        return collecCountryIso2;
    }

    /**
     * Zip code of the collection/pickup address
     */
    @JsonIgnore
    public String collecZip() {
        return collecZip;
    }

    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    @JsonIgnore
    public String company() {
        return company;
    }

    /**
     * Only required if has_invoice is true. 3-letter currency code associated with invoice_value
     */
    @JsonIgnore
    public Optional<? extends String> currencyCode() {
        return currencyCode;
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    @JsonIgnore
    public String fullName() {
        return fullName;
    }

    /**
     * true if user has been issued a UPS invoice within the past 90 days for the US or Canada; and 45 days for any other countries. User can use data from any of the last 3 invoices
     */
    @JsonIgnore
    public boolean hasInvoice() {
        return hasInvoice;
    }

    /**
     * Only required if aia_country_iso2 is US and has_invoice is true.
     */
    @JsonIgnore
    public Optional<? extends String> invoiceControlid() {
        return invoiceControlid;
    }

    /**
     * Only required if has_invoice is true. Date the invoice was issued. yyyymmdd format
     */
    @JsonIgnore
    public Optional<? extends String> invoiceDate() {
        return invoiceDate;
    }

    @JsonIgnore
    public Optional<? extends String> invoiceNumber() {
        return invoiceNumber;
    }

    /**
     * Only required if has_invoice is true. Max 16 digits before decimal and 2 digits after decimal
     */
    @JsonIgnore
    public Optional<? extends String> invoiceValue() {
        return invoiceValue;
    }

    @JsonIgnore
    public String phone() {
        return phone;
    }

    /**
     * User's title, e.g. including but not limited to Manager, Doctor, Artist, Engineer, Mr, Ms, Mrs, Mx
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    /**
     * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     */
    @JsonIgnore
    public boolean upsAgreements() {
        return upsAgreements;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UPS account number
     */
    public UPSConnectExistingOwnAccountParameters withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * Only required if has_invoice is true. Country associated with the account that issued the invoice
     */
    public UPSConnectExistingOwnAccountParameters withAiaCountryIso2(String aiaCountryIso2) {
        Utils.checkNotNull(aiaCountryIso2, "aiaCountryIso2");
        this.aiaCountryIso2 = Optional.ofNullable(aiaCountryIso2);
        return this;
    }

    /**
     * Only required if has_invoice is true. Country associated with the account that issued the invoice
     */
    public UPSConnectExistingOwnAccountParameters withAiaCountryIso2(Optional<? extends String> aiaCountryIso2) {
        Utils.checkNotNull(aiaCountryIso2, "aiaCountryIso2");
        this.aiaCountryIso2 = aiaCountryIso2;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withBillingAddressCity(String billingAddressCity) {
        Utils.checkNotNull(billingAddressCity, "billingAddressCity");
        this.billingAddressCity = billingAddressCity;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withBillingAddressCountryIso2(String billingAddressCountryIso2) {
        Utils.checkNotNull(billingAddressCountryIso2, "billingAddressCountryIso2");
        this.billingAddressCountryIso2 = billingAddressCountryIso2;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withBillingAddressState(String billingAddressState) {
        Utils.checkNotNull(billingAddressState, "billingAddressState");
        this.billingAddressState = billingAddressState;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withBillingAddressStreet1(String billingAddressStreet1) {
        Utils.checkNotNull(billingAddressStreet1, "billingAddressStreet1");
        this.billingAddressStreet1 = billingAddressStreet1;
        return this;
    }

    /**
     * Empty string acceptable for billing_address_street2
     */
    public UPSConnectExistingOwnAccountParameters withBillingAddressStreet2(String billingAddressStreet2) {
        Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
        this.billingAddressStreet2 = Optional.ofNullable(billingAddressStreet2);
        return this;
    }

    /**
     * Empty string acceptable for billing_address_street2
     */
    public UPSConnectExistingOwnAccountParameters withBillingAddressStreet2(Optional<? extends String> billingAddressStreet2) {
        Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
        this.billingAddressStreet2 = billingAddressStreet2;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withBillingAddressZip(String billingAddressZip) {
        Utils.checkNotNull(billingAddressZip, "billingAddressZip");
        this.billingAddressZip = billingAddressZip;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withCollecCountryIso2(String collecCountryIso2) {
        Utils.checkNotNull(collecCountryIso2, "collecCountryIso2");
        this.collecCountryIso2 = collecCountryIso2;
        return this;
    }

    /**
     * Zip code of the collection/pickup address
     */
    public UPSConnectExistingOwnAccountParameters withCollecZip(String collecZip) {
        Utils.checkNotNull(collecZip, "collecZip");
        this.collecZip = collecZip;
        return this;
    }

    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    public UPSConnectExistingOwnAccountParameters withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * Only required if has_invoice is true. 3-letter currency code associated with invoice_value
     */
    public UPSConnectExistingOwnAccountParameters withCurrencyCode(String currencyCode) {
        Utils.checkNotNull(currencyCode, "currencyCode");
        this.currencyCode = Optional.ofNullable(currencyCode);
        return this;
    }

    /**
     * Only required if has_invoice is true. 3-letter currency code associated with invoice_value
     */
    public UPSConnectExistingOwnAccountParameters withCurrencyCode(Optional<? extends String> currencyCode) {
        Utils.checkNotNull(currencyCode, "currencyCode");
        this.currencyCode = currencyCode;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withFullName(String fullName) {
        Utils.checkNotNull(fullName, "fullName");
        this.fullName = fullName;
        return this;
    }

    /**
     * true if user has been issued a UPS invoice within the past 90 days for the US or Canada; and 45 days for any other countries. User can use data from any of the last 3 invoices
     */
    public UPSConnectExistingOwnAccountParameters withHasInvoice(boolean hasInvoice) {
        Utils.checkNotNull(hasInvoice, "hasInvoice");
        this.hasInvoice = hasInvoice;
        return this;
    }

    /**
     * Only required if aia_country_iso2 is US and has_invoice is true.
     */
    public UPSConnectExistingOwnAccountParameters withInvoiceControlid(String invoiceControlid) {
        Utils.checkNotNull(invoiceControlid, "invoiceControlid");
        this.invoiceControlid = Optional.ofNullable(invoiceControlid);
        return this;
    }

    /**
     * Only required if aia_country_iso2 is US and has_invoice is true.
     */
    public UPSConnectExistingOwnAccountParameters withInvoiceControlid(Optional<? extends String> invoiceControlid) {
        Utils.checkNotNull(invoiceControlid, "invoiceControlid");
        this.invoiceControlid = invoiceControlid;
        return this;
    }

    /**
     * Only required if has_invoice is true. Date the invoice was issued. yyyymmdd format
     */
    public UPSConnectExistingOwnAccountParameters withInvoiceDate(String invoiceDate) {
        Utils.checkNotNull(invoiceDate, "invoiceDate");
        this.invoiceDate = Optional.ofNullable(invoiceDate);
        return this;
    }

    /**
     * Only required if has_invoice is true. Date the invoice was issued. yyyymmdd format
     */
    public UPSConnectExistingOwnAccountParameters withInvoiceDate(Optional<? extends String> invoiceDate) {
        Utils.checkNotNull(invoiceDate, "invoiceDate");
        this.invoiceDate = invoiceDate;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withInvoiceNumber(String invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = Optional.ofNullable(invoiceNumber);
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withInvoiceNumber(Optional<? extends String> invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = invoiceNumber;
        return this;
    }

    /**
     * Only required if has_invoice is true. Max 16 digits before decimal and 2 digits after decimal
     */
    public UPSConnectExistingOwnAccountParameters withInvoiceValue(String invoiceValue) {
        Utils.checkNotNull(invoiceValue, "invoiceValue");
        this.invoiceValue = Optional.ofNullable(invoiceValue);
        return this;
    }

    /**
     * Only required if has_invoice is true. Max 16 digits before decimal and 2 digits after decimal
     */
    public UPSConnectExistingOwnAccountParameters withInvoiceValue(Optional<? extends String> invoiceValue) {
        Utils.checkNotNull(invoiceValue, "invoiceValue");
        this.invoiceValue = invoiceValue;
        return this;
    }

    public UPSConnectExistingOwnAccountParameters withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * User's title, e.g. including but not limited to Manager, Doctor, Artist, Engineer, Mr, Ms, Mrs, Mx
     */
    public UPSConnectExistingOwnAccountParameters withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     */
    public UPSConnectExistingOwnAccountParameters withUpsAgreements(boolean upsAgreements) {
        Utils.checkNotNull(upsAgreements, "upsAgreements");
        this.upsAgreements = upsAgreements;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UPSConnectExistingOwnAccountParameters other = (UPSConnectExistingOwnAccountParameters) o;
        return 
            java.util.Objects.deepEquals(this.accountNumber, other.accountNumber) &&
            java.util.Objects.deepEquals(this.aiaCountryIso2, other.aiaCountryIso2) &&
            java.util.Objects.deepEquals(this.billingAddressCity, other.billingAddressCity) &&
            java.util.Objects.deepEquals(this.billingAddressCountryIso2, other.billingAddressCountryIso2) &&
            java.util.Objects.deepEquals(this.billingAddressState, other.billingAddressState) &&
            java.util.Objects.deepEquals(this.billingAddressStreet1, other.billingAddressStreet1) &&
            java.util.Objects.deepEquals(this.billingAddressStreet2, other.billingAddressStreet2) &&
            java.util.Objects.deepEquals(this.billingAddressZip, other.billingAddressZip) &&
            java.util.Objects.deepEquals(this.collecCountryIso2, other.collecCountryIso2) &&
            java.util.Objects.deepEquals(this.collecZip, other.collecZip) &&
            java.util.Objects.deepEquals(this.company, other.company) &&
            java.util.Objects.deepEquals(this.currencyCode, other.currencyCode) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.fullName, other.fullName) &&
            java.util.Objects.deepEquals(this.hasInvoice, other.hasInvoice) &&
            java.util.Objects.deepEquals(this.invoiceControlid, other.invoiceControlid) &&
            java.util.Objects.deepEquals(this.invoiceDate, other.invoiceDate) &&
            java.util.Objects.deepEquals(this.invoiceNumber, other.invoiceNumber) &&
            java.util.Objects.deepEquals(this.invoiceValue, other.invoiceValue) &&
            java.util.Objects.deepEquals(this.phone, other.phone) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.upsAgreements, other.upsAgreements);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountNumber,
            aiaCountryIso2,
            billingAddressCity,
            billingAddressCountryIso2,
            billingAddressState,
            billingAddressStreet1,
            billingAddressStreet2,
            billingAddressZip,
            collecCountryIso2,
            collecZip,
            company,
            currencyCode,
            email,
            fullName,
            hasInvoice,
            invoiceControlid,
            invoiceDate,
            invoiceNumber,
            invoiceValue,
            phone,
            title,
            upsAgreements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UPSConnectExistingOwnAccountParameters.class,
                "accountNumber", accountNumber,
                "aiaCountryIso2", aiaCountryIso2,
                "billingAddressCity", billingAddressCity,
                "billingAddressCountryIso2", billingAddressCountryIso2,
                "billingAddressState", billingAddressState,
                "billingAddressStreet1", billingAddressStreet1,
                "billingAddressStreet2", billingAddressStreet2,
                "billingAddressZip", billingAddressZip,
                "collecCountryIso2", collecCountryIso2,
                "collecZip", collecZip,
                "company", company,
                "currencyCode", currencyCode,
                "email", email,
                "fullName", fullName,
                "hasInvoice", hasInvoice,
                "invoiceControlid", invoiceControlid,
                "invoiceDate", invoiceDate,
                "invoiceNumber", invoiceNumber,
                "invoiceValue", invoiceValue,
                "phone", phone,
                "title", title,
                "upsAgreements", upsAgreements);
    }
    
    public final static class Builder {
 
        private String accountNumber;
 
        private Optional<? extends String> aiaCountryIso2 = Optional.empty();
 
        private String billingAddressCity;
 
        private String billingAddressCountryIso2;
 
        private String billingAddressState;
 
        private String billingAddressStreet1;
 
        private Optional<? extends String> billingAddressStreet2 = Optional.empty();
 
        private String billingAddressZip;
 
        private String collecCountryIso2;
 
        private String collecZip;
 
        private String company;
 
        private Optional<? extends String> currencyCode = Optional.empty();
 
        private String email;
 
        private String fullName;
 
        private Boolean hasInvoice;
 
        private Optional<? extends String> invoiceControlid = Optional.empty();
 
        private Optional<? extends String> invoiceDate = Optional.empty();
 
        private Optional<? extends String> invoiceNumber = Optional.empty();
 
        private Optional<? extends String> invoiceValue = Optional.empty();
 
        private String phone;
 
        private String title;
 
        private Boolean upsAgreements;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UPS account number
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * Only required if has_invoice is true. Country associated with the account that issued the invoice
         */
        public Builder aiaCountryIso2(String aiaCountryIso2) {
            Utils.checkNotNull(aiaCountryIso2, "aiaCountryIso2");
            this.aiaCountryIso2 = Optional.ofNullable(aiaCountryIso2);
            return this;
        }

        /**
         * Only required if has_invoice is true. Country associated with the account that issued the invoice
         */
        public Builder aiaCountryIso2(Optional<? extends String> aiaCountryIso2) {
            Utils.checkNotNull(aiaCountryIso2, "aiaCountryIso2");
            this.aiaCountryIso2 = aiaCountryIso2;
            return this;
        }

        public Builder billingAddressCity(String billingAddressCity) {
            Utils.checkNotNull(billingAddressCity, "billingAddressCity");
            this.billingAddressCity = billingAddressCity;
            return this;
        }

        public Builder billingAddressCountryIso2(String billingAddressCountryIso2) {
            Utils.checkNotNull(billingAddressCountryIso2, "billingAddressCountryIso2");
            this.billingAddressCountryIso2 = billingAddressCountryIso2;
            return this;
        }

        public Builder billingAddressState(String billingAddressState) {
            Utils.checkNotNull(billingAddressState, "billingAddressState");
            this.billingAddressState = billingAddressState;
            return this;
        }

        public Builder billingAddressStreet1(String billingAddressStreet1) {
            Utils.checkNotNull(billingAddressStreet1, "billingAddressStreet1");
            this.billingAddressStreet1 = billingAddressStreet1;
            return this;
        }

        /**
         * Empty string acceptable for billing_address_street2
         */
        public Builder billingAddressStreet2(String billingAddressStreet2) {
            Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
            this.billingAddressStreet2 = Optional.ofNullable(billingAddressStreet2);
            return this;
        }

        /**
         * Empty string acceptable for billing_address_street2
         */
        public Builder billingAddressStreet2(Optional<? extends String> billingAddressStreet2) {
            Utils.checkNotNull(billingAddressStreet2, "billingAddressStreet2");
            this.billingAddressStreet2 = billingAddressStreet2;
            return this;
        }

        public Builder billingAddressZip(String billingAddressZip) {
            Utils.checkNotNull(billingAddressZip, "billingAddressZip");
            this.billingAddressZip = billingAddressZip;
            return this;
        }

        public Builder collecCountryIso2(String collecCountryIso2) {
            Utils.checkNotNull(collecCountryIso2, "collecCountryIso2");
            this.collecCountryIso2 = collecCountryIso2;
            return this;
        }

        /**
         * Zip code of the collection/pickup address
         */
        public Builder collecZip(String collecZip) {
            Utils.checkNotNull(collecZip, "collecZip");
            this.collecZip = collecZip;
            return this;
        }

        /**
         * Company name. Full name is acceptable in this field if the user has no company name
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * Only required if has_invoice is true. 3-letter currency code associated with invoice_value
         */
        public Builder currencyCode(String currencyCode) {
            Utils.checkNotNull(currencyCode, "currencyCode");
            this.currencyCode = Optional.ofNullable(currencyCode);
            return this;
        }

        /**
         * Only required if has_invoice is true. 3-letter currency code associated with invoice_value
         */
        public Builder currencyCode(Optional<? extends String> currencyCode) {
            Utils.checkNotNull(currencyCode, "currencyCode");
            this.currencyCode = currencyCode;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder fullName(String fullName) {
            Utils.checkNotNull(fullName, "fullName");
            this.fullName = fullName;
            return this;
        }

        /**
         * true if user has been issued a UPS invoice within the past 90 days for the US or Canada; and 45 days for any other countries. User can use data from any of the last 3 invoices
         */
        public Builder hasInvoice(boolean hasInvoice) {
            Utils.checkNotNull(hasInvoice, "hasInvoice");
            this.hasInvoice = hasInvoice;
            return this;
        }

        /**
         * Only required if aia_country_iso2 is US and has_invoice is true.
         */
        public Builder invoiceControlid(String invoiceControlid) {
            Utils.checkNotNull(invoiceControlid, "invoiceControlid");
            this.invoiceControlid = Optional.ofNullable(invoiceControlid);
            return this;
        }

        /**
         * Only required if aia_country_iso2 is US and has_invoice is true.
         */
        public Builder invoiceControlid(Optional<? extends String> invoiceControlid) {
            Utils.checkNotNull(invoiceControlid, "invoiceControlid");
            this.invoiceControlid = invoiceControlid;
            return this;
        }

        /**
         * Only required if has_invoice is true. Date the invoice was issued. yyyymmdd format
         */
        public Builder invoiceDate(String invoiceDate) {
            Utils.checkNotNull(invoiceDate, "invoiceDate");
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        /**
         * Only required if has_invoice is true. Date the invoice was issued. yyyymmdd format
         */
        public Builder invoiceDate(Optional<? extends String> invoiceDate) {
            Utils.checkNotNull(invoiceDate, "invoiceDate");
            this.invoiceDate = invoiceDate;
            return this;
        }

        public Builder invoiceNumber(String invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        public Builder invoiceNumber(Optional<? extends String> invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        /**
         * Only required if has_invoice is true. Max 16 digits before decimal and 2 digits after decimal
         */
        public Builder invoiceValue(String invoiceValue) {
            Utils.checkNotNull(invoiceValue, "invoiceValue");
            this.invoiceValue = Optional.ofNullable(invoiceValue);
            return this;
        }

        /**
         * Only required if has_invoice is true. Max 16 digits before decimal and 2 digits after decimal
         */
        public Builder invoiceValue(Optional<? extends String> invoiceValue) {
            Utils.checkNotNull(invoiceValue, "invoiceValue");
            this.invoiceValue = invoiceValue;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * User's title, e.g. including but not limited to Manager, Doctor, Artist, Engineer, Mr, Ms, Mrs, Mx
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
         */
        public Builder upsAgreements(boolean upsAgreements) {
            Utils.checkNotNull(upsAgreements, "upsAgreements");
            this.upsAgreements = upsAgreements;
            return this;
        }
        
        public UPSConnectExistingOwnAccountParameters build() {
            return new UPSConnectExistingOwnAccountParameters(
                accountNumber,
                aiaCountryIso2,
                billingAddressCity,
                billingAddressCountryIso2,
                billingAddressState,
                billingAddressStreet1,
                billingAddressStreet2,
                billingAddressZip,
                collecCountryIso2,
                collecZip,
                company,
                currencyCode,
                email,
                fullName,
                hasInvoice,
                invoiceControlid,
                invoiceDate,
                invoiceNumber,
                invoiceValue,
                phone,
                title,
                upsAgreements);
        }
    }
}

