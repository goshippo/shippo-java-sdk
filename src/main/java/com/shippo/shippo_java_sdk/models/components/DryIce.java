/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DryIce - Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
 */

public class DryIce {

    /**
     * Mandatory. Specifies that the package contains Dry Ice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contains_dry_ice")
    private Optional<? extends Boolean> containsDryIce;

    /**
     * Mandatory. Units must be in Kilograms. Cannot be greater than package weight.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private Optional<? extends String> weight;

    @JsonCreator
    public DryIce(
            @JsonProperty("contains_dry_ice") Optional<? extends Boolean> containsDryIce,
            @JsonProperty("weight") Optional<? extends String> weight) {
        Utils.checkNotNull(containsDryIce, "containsDryIce");
        Utils.checkNotNull(weight, "weight");
        this.containsDryIce = containsDryIce;
        this.weight = weight;
    }
    
    public DryIce() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Mandatory. Specifies that the package contains Dry Ice.
     */
    @JsonIgnore
    public Optional<? extends Boolean> containsDryIce() {
        return containsDryIce;
    }

    /**
     * Mandatory. Units must be in Kilograms. Cannot be greater than package weight.
     */
    @JsonIgnore
    public Optional<? extends String> weight() {
        return weight;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Mandatory. Specifies that the package contains Dry Ice.
     */
    public DryIce withContainsDryIce(boolean containsDryIce) {
        Utils.checkNotNull(containsDryIce, "containsDryIce");
        this.containsDryIce = Optional.ofNullable(containsDryIce);
        return this;
    }

    /**
     * Mandatory. Specifies that the package contains Dry Ice.
     */
    public DryIce withContainsDryIce(Optional<? extends Boolean> containsDryIce) {
        Utils.checkNotNull(containsDryIce, "containsDryIce");
        this.containsDryIce = containsDryIce;
        return this;
    }

    /**
     * Mandatory. Units must be in Kilograms. Cannot be greater than package weight.
     */
    public DryIce withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = Optional.ofNullable(weight);
        return this;
    }

    /**
     * Mandatory. Units must be in Kilograms. Cannot be greater than package weight.
     */
    public DryIce withWeight(Optional<? extends String> weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DryIce other = (DryIce) o;
        return 
            java.util.Objects.deepEquals(this.containsDryIce, other.containsDryIce) &&
            java.util.Objects.deepEquals(this.weight, other.weight);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            containsDryIce,
            weight);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DryIce.class,
                "containsDryIce", containsDryIce,
                "weight", weight);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> containsDryIce = Optional.empty();
 
        private Optional<? extends String> weight = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Mandatory. Specifies that the package contains Dry Ice.
         */
        public Builder containsDryIce(boolean containsDryIce) {
            Utils.checkNotNull(containsDryIce, "containsDryIce");
            this.containsDryIce = Optional.ofNullable(containsDryIce);
            return this;
        }

        /**
         * Mandatory. Specifies that the package contains Dry Ice.
         */
        public Builder containsDryIce(Optional<? extends Boolean> containsDryIce) {
            Utils.checkNotNull(containsDryIce, "containsDryIce");
            this.containsDryIce = containsDryIce;
            return this;
        }

        /**
         * Mandatory. Units must be in Kilograms. Cannot be greater than package weight.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = Optional.ofNullable(weight);
            return this;
        }

        /**
         * Mandatory. Units must be in Kilograms. Cannot be greater than package weight.
         */
        public Builder weight(Optional<? extends String> weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }
        
        public DryIce build() {
            return new DryIce(
                containsDryIce,
                weight);
        }
    }
}

