/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CustomsDeclarationCreateRequest {

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aes_itn")
    private Optional<? extends String> aesItn;

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("b13a_filing_option")
    private Optional<? extends CustomsDeclarationB13AFilingOptionEnum> b13aFilingOption;

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("b13a_number")
    private Optional<? extends String> b13aNumber;

    /**
     * Certificate reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificate")
    private Optional<? extends String> certificate;

    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    @JsonProperty("certify")
    private boolean certify;

    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all 
     * information provided.
     */
    @JsonProperty("certify_signer")
    private String certifySigner;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commercial_invoice")
    private Optional<? extends String> commercialInvoice;

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contents_explanation")
    private Optional<? extends String> contentsExplanation;

    /**
     * Type of goods of the shipment.
     */
    @JsonProperty("contents_type")
    private CustomsDeclarationContentsTypeEnum contentsType;

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disclaimer")
    private Optional<? extends String> disclaimer;

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eel_pfc")
    private Optional<? extends CustomsDeclarationEelPfcEnum> eelPfc;

    /**
     * Exporter reference of an export shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exporter_reference")
    private Optional<? extends String> exporterReference;

    /**
     * Importer reference of an import shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("importer_reference")
    private Optional<? extends String> importerReference;

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incoterm")
    private Optional<? extends CustomsDeclarationIncotermEnum> incoterm;

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_vat_collected")
    private Optional<? extends java.lang.Object> isVatCollected;

    /**
     * Invoice reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice")
    private Optional<? extends String> invoice;

    /**
     * License reference of the shipment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    private Optional<? extends String> license;

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    /**
     * Indicates how the carrier should proceed in case the shipment can't be delivered.
     */
    @JsonProperty("non_delivery_option")
    private CustomsDeclarationNonDeliveryOptionEnum nonDeliveryOption;

    /**
     * Additional notes to be included in the customs declaration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<? extends String> notes;

    /**
     * Object that represents the address of the importer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_importer")
    private Optional<? extends AddressImporter> addressImporter;

    @JsonProperty("items")
    private java.util.List<CustomsItemCreateRequest> items;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<? extends Boolean> test;

    @JsonCreator
    public CustomsDeclarationCreateRequest(
            @JsonProperty("aes_itn") Optional<? extends String> aesItn,
            @JsonProperty("b13a_filing_option") Optional<? extends CustomsDeclarationB13AFilingOptionEnum> b13aFilingOption,
            @JsonProperty("b13a_number") Optional<? extends String> b13aNumber,
            @JsonProperty("certificate") Optional<? extends String> certificate,
            @JsonProperty("certify") boolean certify,
            @JsonProperty("certify_signer") String certifySigner,
            @JsonProperty("commercial_invoice") Optional<? extends String> commercialInvoice,
            @JsonProperty("contents_explanation") Optional<? extends String> contentsExplanation,
            @JsonProperty("contents_type") CustomsDeclarationContentsTypeEnum contentsType,
            @JsonProperty("disclaimer") Optional<? extends String> disclaimer,
            @JsonProperty("eel_pfc") Optional<? extends CustomsDeclarationEelPfcEnum> eelPfc,
            @JsonProperty("exporter_reference") Optional<? extends String> exporterReference,
            @JsonProperty("importer_reference") Optional<? extends String> importerReference,
            @JsonProperty("incoterm") Optional<? extends CustomsDeclarationIncotermEnum> incoterm,
            @JsonProperty("is_vat_collected") Optional<? extends java.lang.Object> isVatCollected,
            @JsonProperty("invoice") Optional<? extends String> invoice,
            @JsonProperty("license") Optional<? extends String> license,
            @JsonProperty("metadata") Optional<? extends String> metadata,
            @JsonProperty("non_delivery_option") CustomsDeclarationNonDeliveryOptionEnum nonDeliveryOption,
            @JsonProperty("notes") Optional<? extends String> notes,
            @JsonProperty("address_importer") Optional<? extends AddressImporter> addressImporter,
            @JsonProperty("items") java.util.List<CustomsItemCreateRequest> items,
            @JsonProperty("test") Optional<? extends Boolean> test) {
        Utils.checkNotNull(aesItn, "aesItn");
        Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
        Utils.checkNotNull(b13aNumber, "b13aNumber");
        Utils.checkNotNull(certificate, "certificate");
        Utils.checkNotNull(certify, "certify");
        Utils.checkNotNull(certifySigner, "certifySigner");
        Utils.checkNotNull(commercialInvoice, "commercialInvoice");
        Utils.checkNotNull(contentsExplanation, "contentsExplanation");
        Utils.checkNotNull(contentsType, "contentsType");
        Utils.checkNotNull(disclaimer, "disclaimer");
        Utils.checkNotNull(eelPfc, "eelPfc");
        Utils.checkNotNull(exporterReference, "exporterReference");
        Utils.checkNotNull(importerReference, "importerReference");
        Utils.checkNotNull(incoterm, "incoterm");
        Utils.checkNotNull(isVatCollected, "isVatCollected");
        Utils.checkNotNull(invoice, "invoice");
        Utils.checkNotNull(license, "license");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(nonDeliveryOption, "nonDeliveryOption");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(addressImporter, "addressImporter");
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(test, "test");
        this.aesItn = aesItn;
        this.b13aFilingOption = b13aFilingOption;
        this.b13aNumber = b13aNumber;
        this.certificate = certificate;
        this.certify = certify;
        this.certifySigner = certifySigner;
        this.commercialInvoice = commercialInvoice;
        this.contentsExplanation = contentsExplanation;
        this.contentsType = contentsType;
        this.disclaimer = disclaimer;
        this.eelPfc = eelPfc;
        this.exporterReference = exporterReference;
        this.importerReference = importerReference;
        this.incoterm = incoterm;
        this.isVatCollected = isVatCollected;
        this.invoice = invoice;
        this.license = license;
        this.metadata = metadata;
        this.nonDeliveryOption = nonDeliveryOption;
        this.notes = notes;
        this.addressImporter = addressImporter;
        this.items = items;
        this.test = test;
    }
    
    public CustomsDeclarationCreateRequest(
            boolean certify,
            String certifySigner,
            CustomsDeclarationContentsTypeEnum contentsType,
            CustomsDeclarationNonDeliveryOptionEnum nonDeliveryOption,
            java.util.List<CustomsItemCreateRequest> items) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), certify, certifySigner, Optional.empty(), Optional.empty(), contentsType, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), nonDeliveryOption, Optional.empty(), Optional.empty(), items, Optional.empty());
    }

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    @JsonIgnore
    public Optional<? extends String> aesItn() {
        return aesItn;
    }

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     */
    @JsonIgnore
    public Optional<? extends CustomsDeclarationB13AFilingOptionEnum> b13aFilingOption() {
        return b13aFilingOption;
    }

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    @JsonIgnore
    public Optional<? extends String> b13aNumber() {
        return b13aNumber;
    }

    /**
     * Certificate reference of the shipment.
     */
    @JsonIgnore
    public Optional<? extends String> certificate() {
        return certificate;
    }

    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    @JsonIgnore
    public boolean certify() {
        return certify;
    }

    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all 
     * information provided.
     */
    @JsonIgnore
    public String certifySigner() {
        return certifySigner;
    }

    @JsonIgnore
    public Optional<? extends String> commercialInvoice() {
        return commercialInvoice;
    }

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    @JsonIgnore
    public Optional<? extends String> contentsExplanation() {
        return contentsExplanation;
    }

    /**
     * Type of goods of the shipment.
     */
    @JsonIgnore
    public CustomsDeclarationContentsTypeEnum contentsType() {
        return contentsType;
    }

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    @JsonIgnore
    public Optional<? extends String> disclaimer() {
        return disclaimer;
    }

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     */
    @JsonIgnore
    public Optional<? extends CustomsDeclarationEelPfcEnum> eelPfc() {
        return eelPfc;
    }

    /**
     * Exporter reference of an export shipment.
     */
    @JsonIgnore
    public Optional<? extends String> exporterReference() {
        return exporterReference;
    }

    /**
     * Importer reference of an import shipment.
     */
    @JsonIgnore
    public Optional<? extends String> importerReference() {
        return importerReference;
    }

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     */
    @JsonIgnore
    public Optional<? extends CustomsDeclarationIncotermEnum> incoterm() {
        return incoterm;
    }

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    @JsonIgnore
    public Optional<? extends java.lang.Object> isVatCollected() {
        return isVatCollected;
    }

    /**
     * Invoice reference of the shipment.
     */
    @JsonIgnore
    public Optional<? extends String> invoice() {
        return invoice;
    }

    /**
     * License reference of the shipment.
     */
    @JsonIgnore
    public Optional<? extends String> license() {
        return license;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    @JsonIgnore
    public Optional<? extends String> metadata() {
        return metadata;
    }

    /**
     * Indicates how the carrier should proceed in case the shipment can't be delivered.
     */
    @JsonIgnore
    public CustomsDeclarationNonDeliveryOptionEnum nonDeliveryOption() {
        return nonDeliveryOption;
    }

    /**
     * Additional notes to be included in the customs declaration.
     */
    @JsonIgnore
    public Optional<? extends String> notes() {
        return notes;
    }

    /**
     * Object that represents the address of the importer
     */
    @JsonIgnore
    public Optional<? extends AddressImporter> addressImporter() {
        return addressImporter;
    }

    @JsonIgnore
    public java.util.List<CustomsItemCreateRequest> items() {
        return items;
    }

    @JsonIgnore
    public Optional<? extends Boolean> test() {
        return test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withAesItn(String aesItn) {
        Utils.checkNotNull(aesItn, "aesItn");
        this.aesItn = Optional.ofNullable(aesItn);
        return this;
    }

    /**
     * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
     * AES / ITN reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withAesItn(Optional<? extends String> aesItn) {
        Utils.checkNotNull(aesItn, "aesItn");
        this.aesItn = aesItn;
        return this;
    }

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     */
    public CustomsDeclarationCreateRequest withB13aFilingOption(CustomsDeclarationB13AFilingOptionEnum b13aFilingOption) {
        Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
        this.b13aFilingOption = Optional.ofNullable(b13aFilingOption);
        return this;
    }

    /**
     * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
     * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
     */
    public CustomsDeclarationCreateRequest withB13aFilingOption(Optional<? extends CustomsDeclarationB13AFilingOptionEnum> b13aFilingOption) {
        Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
        this.b13aFilingOption = b13aFilingOption;
        return this;
    }

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    public CustomsDeclarationCreateRequest withB13aNumber(String b13aNumber) {
        Utils.checkNotNull(b13aNumber, "b13aNumber");
        this.b13aNumber = Optional.ofNullable(b13aNumber);
        return this;
    }

    /**
     * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
     * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    public CustomsDeclarationCreateRequest withB13aNumber(Optional<? extends String> b13aNumber) {
        Utils.checkNotNull(b13aNumber, "b13aNumber");
        this.b13aNumber = b13aNumber;
        return this;
    }

    /**
     * Certificate reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withCertificate(String certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = Optional.ofNullable(certificate);
        return this;
    }

    /**
     * Certificate reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withCertificate(Optional<? extends String> certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = certificate;
        return this;
    }

    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    public CustomsDeclarationCreateRequest withCertify(boolean certify) {
        Utils.checkNotNull(certify, "certify");
        this.certify = certify;
        return this;
    }

    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all 
     * information provided.
     */
    public CustomsDeclarationCreateRequest withCertifySigner(String certifySigner) {
        Utils.checkNotNull(certifySigner, "certifySigner");
        this.certifySigner = certifySigner;
        return this;
    }

    public CustomsDeclarationCreateRequest withCommercialInvoice(String commercialInvoice) {
        Utils.checkNotNull(commercialInvoice, "commercialInvoice");
        this.commercialInvoice = Optional.ofNullable(commercialInvoice);
        return this;
    }

    public CustomsDeclarationCreateRequest withCommercialInvoice(Optional<? extends String> commercialInvoice) {
        Utils.checkNotNull(commercialInvoice, "commercialInvoice");
        this.commercialInvoice = commercialInvoice;
        return this;
    }

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    public CustomsDeclarationCreateRequest withContentsExplanation(String contentsExplanation) {
        Utils.checkNotNull(contentsExplanation, "contentsExplanation");
        this.contentsExplanation = Optional.ofNullable(contentsExplanation);
        return this;
    }

    /**
     * **required if contents_type is `OTHER`**&lt;br&gt;
     * Explanation of the type of goods of the shipment.
     */
    public CustomsDeclarationCreateRequest withContentsExplanation(Optional<? extends String> contentsExplanation) {
        Utils.checkNotNull(contentsExplanation, "contentsExplanation");
        this.contentsExplanation = contentsExplanation;
        return this;
    }

    /**
     * Type of goods of the shipment.
     */
    public CustomsDeclarationCreateRequest withContentsType(CustomsDeclarationContentsTypeEnum contentsType) {
        Utils.checkNotNull(contentsType, "contentsType");
        this.contentsType = contentsType;
        return this;
    }

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    public CustomsDeclarationCreateRequest withDisclaimer(String disclaimer) {
        Utils.checkNotNull(disclaimer, "disclaimer");
        this.disclaimer = Optional.ofNullable(disclaimer);
        return this;
    }

    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    public CustomsDeclarationCreateRequest withDisclaimer(Optional<? extends String> disclaimer) {
        Utils.checkNotNull(disclaimer, "disclaimer");
        this.disclaimer = disclaimer;
        return this;
    }

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     */
    public CustomsDeclarationCreateRequest withEelPfc(CustomsDeclarationEelPfcEnum eelPfc) {
        Utils.checkNotNull(eelPfc, "eelPfc");
        this.eelPfc = Optional.ofNullable(eelPfc);
        return this;
    }

    /**
     * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
     * other shipments from the US, `NOEEI_30_37_a` is applicable.
     */
    public CustomsDeclarationCreateRequest withEelPfc(Optional<? extends CustomsDeclarationEelPfcEnum> eelPfc) {
        Utils.checkNotNull(eelPfc, "eelPfc");
        this.eelPfc = eelPfc;
        return this;
    }

    /**
     * Exporter reference of an export shipment.
     */
    public CustomsDeclarationCreateRequest withExporterReference(String exporterReference) {
        Utils.checkNotNull(exporterReference, "exporterReference");
        this.exporterReference = Optional.ofNullable(exporterReference);
        return this;
    }

    /**
     * Exporter reference of an export shipment.
     */
    public CustomsDeclarationCreateRequest withExporterReference(Optional<? extends String> exporterReference) {
        Utils.checkNotNull(exporterReference, "exporterReference");
        this.exporterReference = exporterReference;
        return this;
    }

    /**
     * Importer reference of an import shipment.
     */
    public CustomsDeclarationCreateRequest withImporterReference(String importerReference) {
        Utils.checkNotNull(importerReference, "importerReference");
        this.importerReference = Optional.ofNullable(importerReference);
        return this;
    }

    /**
     * Importer reference of an import shipment.
     */
    public CustomsDeclarationCreateRequest withImporterReference(Optional<? extends String> importerReference) {
        Utils.checkNotNull(importerReference, "importerReference");
        this.importerReference = importerReference;
        return this;
    }

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     */
    public CustomsDeclarationCreateRequest withIncoterm(CustomsDeclarationIncotermEnum incoterm) {
        Utils.checkNotNull(incoterm, "incoterm");
        this.incoterm = Optional.ofNullable(incoterm);
        return this;
    }

    /**
     * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
     * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
     * If expecting DAP for other carriers, please use DDU.
     */
    public CustomsDeclarationCreateRequest withIncoterm(Optional<? extends CustomsDeclarationIncotermEnum> incoterm) {
        Utils.checkNotNull(incoterm, "incoterm");
        this.incoterm = incoterm;
        return this;
    }

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    public CustomsDeclarationCreateRequest withIsVatCollected(java.lang.Object isVatCollected) {
        Utils.checkNotNull(isVatCollected, "isVatCollected");
        this.isVatCollected = Optional.ofNullable(isVatCollected);
        return this;
    }

    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    public CustomsDeclarationCreateRequest withIsVatCollected(Optional<? extends java.lang.Object> isVatCollected) {
        Utils.checkNotNull(isVatCollected, "isVatCollected");
        this.isVatCollected = isVatCollected;
        return this;
    }

    /**
     * Invoice reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withInvoice(String invoice) {
        Utils.checkNotNull(invoice, "invoice");
        this.invoice = Optional.ofNullable(invoice);
        return this;
    }

    /**
     * Invoice reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withInvoice(Optional<? extends String> invoice) {
        Utils.checkNotNull(invoice, "invoice");
        this.invoice = invoice;
        return this;
    }

    /**
     * License reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withLicense(String license) {
        Utils.checkNotNull(license, "license");
        this.license = Optional.ofNullable(license);
        return this;
    }

    /**
     * License reference of the shipment.
     */
    public CustomsDeclarationCreateRequest withLicense(Optional<? extends String> license) {
        Utils.checkNotNull(license, "license");
        this.license = license;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    public CustomsDeclarationCreateRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you 
     * want to attach to the object.
     */
    public CustomsDeclarationCreateRequest withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Indicates how the carrier should proceed in case the shipment can't be delivered.
     */
    public CustomsDeclarationCreateRequest withNonDeliveryOption(CustomsDeclarationNonDeliveryOptionEnum nonDeliveryOption) {
        Utils.checkNotNull(nonDeliveryOption, "nonDeliveryOption");
        this.nonDeliveryOption = nonDeliveryOption;
        return this;
    }

    /**
     * Additional notes to be included in the customs declaration.
     */
    public CustomsDeclarationCreateRequest withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }

    /**
     * Additional notes to be included in the customs declaration.
     */
    public CustomsDeclarationCreateRequest withNotes(Optional<? extends String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    /**
     * Object that represents the address of the importer
     */
    public CustomsDeclarationCreateRequest withAddressImporter(AddressImporter addressImporter) {
        Utils.checkNotNull(addressImporter, "addressImporter");
        this.addressImporter = Optional.ofNullable(addressImporter);
        return this;
    }

    /**
     * Object that represents the address of the importer
     */
    public CustomsDeclarationCreateRequest withAddressImporter(Optional<? extends AddressImporter> addressImporter) {
        Utils.checkNotNull(addressImporter, "addressImporter");
        this.addressImporter = addressImporter;
        return this;
    }

    public CustomsDeclarationCreateRequest withItems(java.util.List<CustomsItemCreateRequest> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    public CustomsDeclarationCreateRequest withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    public CustomsDeclarationCreateRequest withTest(Optional<? extends Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomsDeclarationCreateRequest other = (CustomsDeclarationCreateRequest) o;
        return 
            java.util.Objects.deepEquals(this.aesItn, other.aesItn) &&
            java.util.Objects.deepEquals(this.b13aFilingOption, other.b13aFilingOption) &&
            java.util.Objects.deepEquals(this.b13aNumber, other.b13aNumber) &&
            java.util.Objects.deepEquals(this.certificate, other.certificate) &&
            java.util.Objects.deepEquals(this.certify, other.certify) &&
            java.util.Objects.deepEquals(this.certifySigner, other.certifySigner) &&
            java.util.Objects.deepEquals(this.commercialInvoice, other.commercialInvoice) &&
            java.util.Objects.deepEquals(this.contentsExplanation, other.contentsExplanation) &&
            java.util.Objects.deepEquals(this.contentsType, other.contentsType) &&
            java.util.Objects.deepEquals(this.disclaimer, other.disclaimer) &&
            java.util.Objects.deepEquals(this.eelPfc, other.eelPfc) &&
            java.util.Objects.deepEquals(this.exporterReference, other.exporterReference) &&
            java.util.Objects.deepEquals(this.importerReference, other.importerReference) &&
            java.util.Objects.deepEquals(this.incoterm, other.incoterm) &&
            java.util.Objects.deepEquals(this.isVatCollected, other.isVatCollected) &&
            java.util.Objects.deepEquals(this.invoice, other.invoice) &&
            java.util.Objects.deepEquals(this.license, other.license) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.nonDeliveryOption, other.nonDeliveryOption) &&
            java.util.Objects.deepEquals(this.notes, other.notes) &&
            java.util.Objects.deepEquals(this.addressImporter, other.addressImporter) &&
            java.util.Objects.deepEquals(this.items, other.items) &&
            java.util.Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            aesItn,
            b13aFilingOption,
            b13aNumber,
            certificate,
            certify,
            certifySigner,
            commercialInvoice,
            contentsExplanation,
            contentsType,
            disclaimer,
            eelPfc,
            exporterReference,
            importerReference,
            incoterm,
            isVatCollected,
            invoice,
            license,
            metadata,
            nonDeliveryOption,
            notes,
            addressImporter,
            items,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomsDeclarationCreateRequest.class,
                "aesItn", aesItn,
                "b13aFilingOption", b13aFilingOption,
                "b13aNumber", b13aNumber,
                "certificate", certificate,
                "certify", certify,
                "certifySigner", certifySigner,
                "commercialInvoice", commercialInvoice,
                "contentsExplanation", contentsExplanation,
                "contentsType", contentsType,
                "disclaimer", disclaimer,
                "eelPfc", eelPfc,
                "exporterReference", exporterReference,
                "importerReference", importerReference,
                "incoterm", incoterm,
                "isVatCollected", isVatCollected,
                "invoice", invoice,
                "license", license,
                "metadata", metadata,
                "nonDeliveryOption", nonDeliveryOption,
                "notes", notes,
                "addressImporter", addressImporter,
                "items", items,
                "test", test);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> aesItn = Optional.empty();
 
        private Optional<? extends CustomsDeclarationB13AFilingOptionEnum> b13aFilingOption = Optional.empty();
 
        private Optional<? extends String> b13aNumber = Optional.empty();
 
        private Optional<? extends String> certificate = Optional.empty();
 
        private Boolean certify;
 
        private String certifySigner;
 
        private Optional<? extends String> commercialInvoice = Optional.empty();
 
        private Optional<? extends String> contentsExplanation = Optional.empty();
 
        private CustomsDeclarationContentsTypeEnum contentsType;
 
        private Optional<? extends String> disclaimer = Optional.empty();
 
        private Optional<? extends CustomsDeclarationEelPfcEnum> eelPfc = Optional.empty();
 
        private Optional<? extends String> exporterReference = Optional.empty();
 
        private Optional<? extends String> importerReference = Optional.empty();
 
        private Optional<? extends CustomsDeclarationIncotermEnum> incoterm = Optional.empty();
 
        private Optional<? extends java.lang.Object> isVatCollected = Optional.empty();
 
        private Optional<? extends String> invoice = Optional.empty();
 
        private Optional<? extends String> license = Optional.empty();
 
        private Optional<? extends String> metadata = Optional.empty();
 
        private CustomsDeclarationNonDeliveryOptionEnum nonDeliveryOption;
 
        private Optional<? extends String> notes = Optional.empty();
 
        private Optional<? extends AddressImporter> addressImporter = Optional.empty();
 
        private java.util.List<CustomsItemCreateRequest> items;
 
        private Optional<? extends Boolean> test = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
         * AES / ITN reference of the shipment.
         */
        public Builder aesItn(String aesItn) {
            Utils.checkNotNull(aesItn, "aesItn");
            this.aesItn = Optional.ofNullable(aesItn);
            return this;
        }

        /**
         * **required if eel_pfc is `AES_ITN`**&lt;br&gt;
         * AES / ITN reference of the shipment.
         */
        public Builder aesItn(Optional<? extends String> aesItn) {
            Utils.checkNotNull(aesItn, "aesItn");
            this.aesItn = aesItn;
            return this;
        }

        /**
         * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
         * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
         */
        public Builder b13aFilingOption(CustomsDeclarationB13AFilingOptionEnum b13aFilingOption) {
            Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
            this.b13aFilingOption = Optional.ofNullable(b13aFilingOption);
            return this;
        }

        /**
         * B13A Option details are obtained by filing a B13A Canada Export Declaration via the Canadian Export Reporting System (CERS). 
         * &lt;a href="https://www.cbsa-asfc.gc.ca/services/export/guide-eng.html" target="_blank" rel="noopener noreferrer"&gt; More information on reporting commercial exports from Canada. &lt;/a&gt;
         */
        public Builder b13aFilingOption(Optional<? extends CustomsDeclarationB13AFilingOptionEnum> b13aFilingOption) {
            Utils.checkNotNull(b13aFilingOption, "b13aFilingOption");
            this.b13aFilingOption = b13aFilingOption;
            return this;
        }

        /**
         * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
         * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
         * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
         * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
         */
        public Builder b13aNumber(String b13aNumber) {
            Utils.checkNotNull(b13aNumber, "b13aNumber");
            this.b13aNumber = Optional.ofNullable(b13aNumber);
            return this;
        }

        /**
         * **must be provided if and only if b13a_filing_option is provided**&lt;br&gt;
         * Represents:&lt;br&gt; the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;&lt;br&gt; 
         * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;&lt;br&gt; 
         * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
         */
        public Builder b13aNumber(Optional<? extends String> b13aNumber) {
            Utils.checkNotNull(b13aNumber, "b13aNumber");
            this.b13aNumber = b13aNumber;
            return this;
        }

        /**
         * Certificate reference of the shipment.
         */
        public Builder certificate(String certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = Optional.ofNullable(certificate);
            return this;
        }

        /**
         * Certificate reference of the shipment.
         */
        public Builder certificate(Optional<? extends String> certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = certificate;
            return this;
        }

        /**
         * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
         */
        public Builder certify(boolean certify) {
            Utils.checkNotNull(certify, "certify");
            this.certify = certify;
            return this;
        }

        /**
         * Name of the person who created the customs declaration and is responsible for the validity of all 
         * information provided.
         */
        public Builder certifySigner(String certifySigner) {
            Utils.checkNotNull(certifySigner, "certifySigner");
            this.certifySigner = certifySigner;
            return this;
        }

        public Builder commercialInvoice(String commercialInvoice) {
            Utils.checkNotNull(commercialInvoice, "commercialInvoice");
            this.commercialInvoice = Optional.ofNullable(commercialInvoice);
            return this;
        }

        public Builder commercialInvoice(Optional<? extends String> commercialInvoice) {
            Utils.checkNotNull(commercialInvoice, "commercialInvoice");
            this.commercialInvoice = commercialInvoice;
            return this;
        }

        /**
         * **required if contents_type is `OTHER`**&lt;br&gt;
         * Explanation of the type of goods of the shipment.
         */
        public Builder contentsExplanation(String contentsExplanation) {
            Utils.checkNotNull(contentsExplanation, "contentsExplanation");
            this.contentsExplanation = Optional.ofNullable(contentsExplanation);
            return this;
        }

        /**
         * **required if contents_type is `OTHER`**&lt;br&gt;
         * Explanation of the type of goods of the shipment.
         */
        public Builder contentsExplanation(Optional<? extends String> contentsExplanation) {
            Utils.checkNotNull(contentsExplanation, "contentsExplanation");
            this.contentsExplanation = contentsExplanation;
            return this;
        }

        /**
         * Type of goods of the shipment.
         */
        public Builder contentsType(CustomsDeclarationContentsTypeEnum contentsType) {
            Utils.checkNotNull(contentsType, "contentsType");
            this.contentsType = contentsType;
            return this;
        }

        /**
         * Disclaimer for the shipment and customs information that have been provided.
         */
        public Builder disclaimer(String disclaimer) {
            Utils.checkNotNull(disclaimer, "disclaimer");
            this.disclaimer = Optional.ofNullable(disclaimer);
            return this;
        }

        /**
         * Disclaimer for the shipment and customs information that have been provided.
         */
        public Builder disclaimer(Optional<? extends String> disclaimer) {
            Utils.checkNotNull(disclaimer, "disclaimer");
            this.disclaimer = disclaimer;
            return this;
        }

        /**
         * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
         * other shipments from the US, `NOEEI_30_37_a` is applicable.
         */
        public Builder eelPfc(CustomsDeclarationEelPfcEnum eelPfc) {
            Utils.checkNotNull(eelPfc, "eelPfc");
            this.eelPfc = Optional.ofNullable(eelPfc);
            return this;
        }

        /**
         * EEL / PFC type of the shipment. For most shipments from the US to CA, `NOEEI_30_36` is applicable; for most 
         * other shipments from the US, `NOEEI_30_37_a` is applicable.
         */
        public Builder eelPfc(Optional<? extends CustomsDeclarationEelPfcEnum> eelPfc) {
            Utils.checkNotNull(eelPfc, "eelPfc");
            this.eelPfc = eelPfc;
            return this;
        }

        /**
         * Exporter reference of an export shipment.
         */
        public Builder exporterReference(String exporterReference) {
            Utils.checkNotNull(exporterReference, "exporterReference");
            this.exporterReference = Optional.ofNullable(exporterReference);
            return this;
        }

        /**
         * Exporter reference of an export shipment.
         */
        public Builder exporterReference(Optional<? extends String> exporterReference) {
            Utils.checkNotNull(exporterReference, "exporterReference");
            this.exporterReference = exporterReference;
            return this;
        }

        /**
         * Importer reference of an import shipment.
         */
        public Builder importerReference(String importerReference) {
            Utils.checkNotNull(importerReference, "importerReference");
            this.importerReference = Optional.ofNullable(importerReference);
            return this;
        }

        /**
         * Importer reference of an import shipment.
         */
        public Builder importerReference(Optional<? extends String> importerReference) {
            Utils.checkNotNull(importerReference, "importerReference");
            this.importerReference = importerReference;
            return this;
        }

        /**
         * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
         * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
         * If expecting DAP for other carriers, please use DDU.
         */
        public Builder incoterm(CustomsDeclarationIncotermEnum incoterm) {
            Utils.checkNotNull(incoterm, "incoterm");
            this.incoterm = Optional.ofNullable(incoterm);
            return this;
        }

        /**
         * The incoterm reference of the shipment. FCA is available for DHL Express and FedEx only. 
         * eDAP is available for DPD UK only. DAP is available for DHL Express and DPD UK.
         * If expecting DAP for other carriers, please use DDU.
         */
        public Builder incoterm(Optional<? extends CustomsDeclarationIncotermEnum> incoterm) {
            Utils.checkNotNull(incoterm, "incoterm");
            this.incoterm = incoterm;
            return this;
        }

        /**
         * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
         */
        public Builder isVatCollected(java.lang.Object isVatCollected) {
            Utils.checkNotNull(isVatCollected, "isVatCollected");
            this.isVatCollected = Optional.ofNullable(isVatCollected);
            return this;
        }

        /**
         * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
         */
        public Builder isVatCollected(Optional<? extends java.lang.Object> isVatCollected) {
            Utils.checkNotNull(isVatCollected, "isVatCollected");
            this.isVatCollected = isVatCollected;
            return this;
        }

        /**
         * Invoice reference of the shipment.
         */
        public Builder invoice(String invoice) {
            Utils.checkNotNull(invoice, "invoice");
            this.invoice = Optional.ofNullable(invoice);
            return this;
        }

        /**
         * Invoice reference of the shipment.
         */
        public Builder invoice(Optional<? extends String> invoice) {
            Utils.checkNotNull(invoice, "invoice");
            this.invoice = invoice;
            return this;
        }

        /**
         * License reference of the shipment.
         */
        public Builder license(String license) {
            Utils.checkNotNull(license, "license");
            this.license = Optional.ofNullable(license);
            return this;
        }

        /**
         * License reference of the shipment.
         */
        public Builder license(Optional<? extends String> license) {
            Utils.checkNotNull(license, "license");
            this.license = license;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you 
         * want to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you 
         * want to attach to the object.
         */
        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Indicates how the carrier should proceed in case the shipment can't be delivered.
         */
        public Builder nonDeliveryOption(CustomsDeclarationNonDeliveryOptionEnum nonDeliveryOption) {
            Utils.checkNotNull(nonDeliveryOption, "nonDeliveryOption");
            this.nonDeliveryOption = nonDeliveryOption;
            return this;
        }

        /**
         * Additional notes to be included in the customs declaration.
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        /**
         * Additional notes to be included in the customs declaration.
         */
        public Builder notes(Optional<? extends String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        /**
         * Object that represents the address of the importer
         */
        public Builder addressImporter(AddressImporter addressImporter) {
            Utils.checkNotNull(addressImporter, "addressImporter");
            this.addressImporter = Optional.ofNullable(addressImporter);
            return this;
        }

        /**
         * Object that represents the address of the importer
         */
        public Builder addressImporter(Optional<? extends AddressImporter> addressImporter) {
            Utils.checkNotNull(addressImporter, "addressImporter");
            this.addressImporter = addressImporter;
            return this;
        }

        public Builder items(java.util.List<CustomsItemCreateRequest> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        public Builder test(Optional<? extends Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public CustomsDeclarationCreateRequest build() {
            return new CustomsDeclarationCreateRequest(
                aesItn,
                b13aFilingOption,
                b13aNumber,
                certificate,
                certify,
                certifySigner,
                commercialInvoice,
                contentsExplanation,
                contentsType,
                disclaimer,
                eelPfc,
                exporterReference,
                importerReference,
                incoterm,
                isVatCollected,
                invoice,
                license,
                metadata,
                nonDeliveryOption,
                notes,
                addressImporter,
                items,
                test);
        }
    }
}

