/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * Address - Address represents the address as retrieved from the database
 */

public class Address {

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Company Name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<? extends String> company;

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street1")
    private Optional<? extends String> street1;

    /**
     * Second street line, 35 character limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street2")
    private Optional<? extends String> street2;

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street3")
    private Optional<? extends String> street3;

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_no")
    private Optional<? extends String> streetNo;

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<? extends String> city;

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends String> state;

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private Optional<? extends String> zip;

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    @JsonProperty("country")
    private String country;

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<? extends String> phone;

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends String> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_residential")
    private Optional<? extends Boolean> isResidential;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    /**
     * Latitude of address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    private Optional<? extends Double> latitude;

    /**
     * Longitude of address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    private Optional<? extends Double> longitude;

    /**
     * Complete addresses contain all required values.&lt;br&gt;&lt;br&gt;Incomplete addresses have failed one or multiple 
     * validations.&lt;br&gt;Incomplete Addresses are eligible for requesting rates but lack at least one required 
     * value for purchasing labels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_complete")
    private Optional<? extends Boolean> isComplete;

    /**
     * Date and time of Address creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<? extends OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given Address object. 
     * This ID is required to create a Shipment object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<? extends String> objectId;

    /**
     * Username of the user who created the Address object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<? extends String> objectOwner;

    /**
     * Date and time of last Address update. Since you cannot update Addresses after they were created, this time 
     * stamp reflects the time when the Address was changed by Shippo's systems for the last time, e.g., during the 
     * approximation of one or more values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<? extends OffsetDateTime> objectUpdated;

    /**
     * Object that contains information regarding if an address had been validated or not. Also contains any messages 
     * generated during validation. Children keys are &lt;code&gt;is_valid&lt;/code&gt;(boolean) and &lt;code&gt;messages&lt;/code&gt;(array).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validation_results")
    private Optional<? extends AddressValidationResults> validationResults;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<? extends Boolean> test;

    @JsonCreator
    public Address(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("company") Optional<? extends String> company,
            @JsonProperty("street1") Optional<? extends String> street1,
            @JsonProperty("street2") Optional<? extends String> street2,
            @JsonProperty("street3") Optional<? extends String> street3,
            @JsonProperty("street_no") Optional<? extends String> streetNo,
            @JsonProperty("city") Optional<? extends String> city,
            @JsonProperty("state") Optional<? extends String> state,
            @JsonProperty("zip") Optional<? extends String> zip,
            @JsonProperty("country") String country,
            @JsonProperty("phone") Optional<? extends String> phone,
            @JsonProperty("email") Optional<? extends String> email,
            @JsonProperty("is_residential") Optional<? extends Boolean> isResidential,
            @JsonProperty("metadata") Optional<? extends String> metadata,
            @JsonProperty("latitude") Optional<? extends Double> latitude,
            @JsonProperty("longitude") Optional<? extends Double> longitude,
            @JsonProperty("is_complete") Optional<? extends Boolean> isComplete,
            @JsonProperty("object_created") Optional<? extends OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<? extends String> objectId,
            @JsonProperty("object_owner") Optional<? extends String> objectOwner,
            @JsonProperty("object_updated") Optional<? extends OffsetDateTime> objectUpdated,
            @JsonProperty("validation_results") Optional<? extends AddressValidationResults> validationResults,
            @JsonProperty("test") Optional<? extends Boolean> test) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(street3, "street3");
        Utils.checkNotNull(streetNo, "streetNo");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(isResidential, "isResidential");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(latitude, "latitude");
        Utils.checkNotNull(longitude, "longitude");
        Utils.checkNotNull(isComplete, "isComplete");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(validationResults, "validationResults");
        Utils.checkNotNull(test, "test");
        this.name = name;
        this.company = company;
        this.street1 = street1;
        this.street2 = street2;
        this.street3 = street3;
        this.streetNo = streetNo;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.phone = phone;
        this.email = email;
        this.isResidential = isResidential;
        this.metadata = metadata;
        this.latitude = latitude;
        this.longitude = longitude;
        this.isComplete = isComplete;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectUpdated = objectUpdated;
        this.validationResults = validationResults;
        this.test = test;
    }
    
    public Address(
            String country) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), country, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    @JsonIgnore
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Company Name
     */
    @JsonIgnore
    public Optional<? extends String> company() {
        return company;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @JsonIgnore
    public Optional<? extends String> street1() {
        return street1;
    }

    /**
     * Second street line, 35 character limit.
     */
    @JsonIgnore
    public Optional<? extends String> street2() {
        return street2;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @JsonIgnore
    public Optional<? extends String> street3() {
        return street3;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @JsonIgnore
    public Optional<? extends String> streetNo() {
        return streetNo;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    @JsonIgnore
    public Optional<? extends String> city() {
        return city;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @JsonIgnore
    public Optional<? extends String> state() {
        return state;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    @JsonIgnore
    public Optional<? extends String> zip() {
        return zip;
    }

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @JsonIgnore
    public Optional<? extends String> phone() {
        return phone;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @JsonIgnore
    public Optional<? extends String> email() {
        return email;
    }

    @JsonIgnore
    public Optional<? extends Boolean> isResidential() {
        return isResidential;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @JsonIgnore
    public Optional<? extends String> metadata() {
        return metadata;
    }

    /**
     * Latitude of address
     */
    @JsonIgnore
    public Optional<? extends Double> latitude() {
        return latitude;
    }

    /**
     * Longitude of address
     */
    @JsonIgnore
    public Optional<? extends Double> longitude() {
        return longitude;
    }

    /**
     * Complete addresses contain all required values.&lt;br&gt;&lt;br&gt;Incomplete addresses have failed one or multiple 
     * validations.&lt;br&gt;Incomplete Addresses are eligible for requesting rates but lack at least one required 
     * value for purchasing labels.
     */
    @JsonIgnore
    public Optional<? extends Boolean> isComplete() {
        return isComplete;
    }

    /**
     * Date and time of Address creation.
     */
    @JsonIgnore
    public Optional<? extends OffsetDateTime> objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given Address object. 
     * This ID is required to create a Shipment object.
     */
    @JsonIgnore
    public Optional<? extends String> objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the Address object.
     */
    @JsonIgnore
    public Optional<? extends String> objectOwner() {
        return objectOwner;
    }

    /**
     * Date and time of last Address update. Since you cannot update Addresses after they were created, this time 
     * stamp reflects the time when the Address was changed by Shippo's systems for the last time, e.g., during the 
     * approximation of one or more values.
     */
    @JsonIgnore
    public Optional<? extends OffsetDateTime> objectUpdated() {
        return objectUpdated;
    }

    /**
     * Object that contains information regarding if an address had been validated or not. Also contains any messages 
     * generated during validation. Children keys are &lt;code&gt;is_valid&lt;/code&gt;(boolean) and &lt;code&gt;messages&lt;/code&gt;(array).
     */
    @JsonIgnore
    public Optional<? extends AddressValidationResults> validationResults() {
        return validationResults;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonIgnore
    public Optional<? extends Boolean> test() {
        return test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    public Address withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    public Address withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Company Name
     */
    public Address withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    /**
     * Company Name
     */
    public Address withCompany(Optional<? extends String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    public Address withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = Optional.ofNullable(street1);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    public Address withStreet1(Optional<? extends String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public Address withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = Optional.ofNullable(street2);
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public Address withStreet2(Optional<? extends String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public Address withStreet3(String street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = Optional.ofNullable(street3);
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public Address withStreet3(Optional<? extends String> street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = street3;
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public Address withStreetNo(String streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = Optional.ofNullable(streetNo);
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public Address withStreetNo(Optional<? extends String> streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = streetNo;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    public Address withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    public Address withCity(Optional<? extends String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    public Address withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    public Address withState(Optional<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    public Address withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = Optional.ofNullable(zip);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    public Address withZip(Optional<? extends String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    public Address withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public Address withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public Address withPhone(Optional<? extends String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public Address withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public Address withEmail(Optional<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public Address withIsResidential(boolean isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = Optional.ofNullable(isResidential);
        return this;
    }

    public Address withIsResidential(Optional<? extends Boolean> isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = isResidential;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public Address withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public Address withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Latitude of address
     */
    public Address withLatitude(double latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = Optional.ofNullable(latitude);
        return this;
    }

    /**
     * Latitude of address
     */
    public Address withLatitude(Optional<? extends Double> latitude) {
        Utils.checkNotNull(latitude, "latitude");
        this.latitude = latitude;
        return this;
    }

    /**
     * Longitude of address
     */
    public Address withLongitude(double longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = Optional.ofNullable(longitude);
        return this;
    }

    /**
     * Longitude of address
     */
    public Address withLongitude(Optional<? extends Double> longitude) {
        Utils.checkNotNull(longitude, "longitude");
        this.longitude = longitude;
        return this;
    }

    /**
     * Complete addresses contain all required values.&lt;br&gt;&lt;br&gt;Incomplete addresses have failed one or multiple 
     * validations.&lt;br&gt;Incomplete Addresses are eligible for requesting rates but lack at least one required 
     * value for purchasing labels.
     */
    public Address withIsComplete(boolean isComplete) {
        Utils.checkNotNull(isComplete, "isComplete");
        this.isComplete = Optional.ofNullable(isComplete);
        return this;
    }

    /**
     * Complete addresses contain all required values.&lt;br&gt;&lt;br&gt;Incomplete addresses have failed one or multiple 
     * validations.&lt;br&gt;Incomplete Addresses are eligible for requesting rates but lack at least one required 
     * value for purchasing labels.
     */
    public Address withIsComplete(Optional<? extends Boolean> isComplete) {
        Utils.checkNotNull(isComplete, "isComplete");
        this.isComplete = isComplete;
        return this;
    }

    /**
     * Date and time of Address creation.
     */
    public Address withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of Address creation.
     */
    public Address withObjectCreated(Optional<? extends OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given Address object. 
     * This ID is required to create a Shipment object.
     */
    public Address withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given Address object. 
     * This ID is required to create a Shipment object.
     */
    public Address withObjectId(Optional<? extends String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the Address object.
     */
    public Address withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the Address object.
     */
    public Address withObjectOwner(Optional<? extends String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Date and time of last Address update. Since you cannot update Addresses after they were created, this time 
     * stamp reflects the time when the Address was changed by Shippo's systems for the last time, e.g., during the 
     * approximation of one or more values.
     */
    public Address withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last Address update. Since you cannot update Addresses after they were created, this time 
     * stamp reflects the time when the Address was changed by Shippo's systems for the last time, e.g., during the 
     * approximation of one or more values.
     */
    public Address withObjectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * Object that contains information regarding if an address had been validated or not. Also contains any messages 
     * generated during validation. Children keys are &lt;code&gt;is_valid&lt;/code&gt;(boolean) and &lt;code&gt;messages&lt;/code&gt;(array).
     */
    public Address withValidationResults(AddressValidationResults validationResults) {
        Utils.checkNotNull(validationResults, "validationResults");
        this.validationResults = Optional.ofNullable(validationResults);
        return this;
    }

    /**
     * Object that contains information regarding if an address had been validated or not. Also contains any messages 
     * generated during validation. Children keys are &lt;code&gt;is_valid&lt;/code&gt;(boolean) and &lt;code&gt;messages&lt;/code&gt;(array).
     */
    public Address withValidationResults(Optional<? extends AddressValidationResults> validationResults) {
        Utils.checkNotNull(validationResults, "validationResults");
        this.validationResults = validationResults;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Address withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Address withTest(Optional<? extends Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Address other = (Address) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.company, other.company) &&
            java.util.Objects.deepEquals(this.street1, other.street1) &&
            java.util.Objects.deepEquals(this.street2, other.street2) &&
            java.util.Objects.deepEquals(this.street3, other.street3) &&
            java.util.Objects.deepEquals(this.streetNo, other.streetNo) &&
            java.util.Objects.deepEquals(this.city, other.city) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.zip, other.zip) &&
            java.util.Objects.deepEquals(this.country, other.country) &&
            java.util.Objects.deepEquals(this.phone, other.phone) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.isResidential, other.isResidential) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.latitude, other.latitude) &&
            java.util.Objects.deepEquals(this.longitude, other.longitude) &&
            java.util.Objects.deepEquals(this.isComplete, other.isComplete) &&
            java.util.Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            java.util.Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            java.util.Objects.deepEquals(this.validationResults, other.validationResults) &&
            java.util.Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            company,
            street1,
            street2,
            street3,
            streetNo,
            city,
            state,
            zip,
            country,
            phone,
            email,
            isResidential,
            metadata,
            latitude,
            longitude,
            isComplete,
            objectCreated,
            objectId,
            objectOwner,
            objectUpdated,
            validationResults,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Address.class,
                "name", name,
                "company", company,
                "street1", street1,
                "street2", street2,
                "street3", street3,
                "streetNo", streetNo,
                "city", city,
                "state", state,
                "zip", zip,
                "country", country,
                "phone", phone,
                "email", email,
                "isResidential", isResidential,
                "metadata", metadata,
                "latitude", latitude,
                "longitude", longitude,
                "isComplete", isComplete,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectUpdated", objectUpdated,
                "validationResults", validationResults,
                "test", test);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> company = Optional.empty();
 
        private Optional<? extends String> street1 = Optional.empty();
 
        private Optional<? extends String> street2 = Optional.empty();
 
        private Optional<? extends String> street3 = Optional.empty();
 
        private Optional<? extends String> streetNo = Optional.empty();
 
        private Optional<? extends String> city = Optional.empty();
 
        private Optional<? extends String> state = Optional.empty();
 
        private Optional<? extends String> zip = Optional.empty();
 
        private String country;
 
        private Optional<? extends String> phone = Optional.empty();
 
        private Optional<? extends String> email = Optional.empty();
 
        private Optional<? extends Boolean> isResidential = Optional.empty();
 
        private Optional<? extends String> metadata = Optional.empty();
 
        private Optional<? extends Double> latitude = Optional.empty();
 
        private Optional<? extends Double> longitude = Optional.empty();
 
        private Optional<? extends Boolean> isComplete = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<? extends String> objectId = Optional.empty();
 
        private Optional<? extends String> objectOwner = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<? extends AddressValidationResults> validationResults = Optional.empty();
 
        private Optional<? extends Boolean> test = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First and Last Name of the addressee
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First and Last Name of the addressee
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(Optional<? extends String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = Optional.ofNullable(street1);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
         */
        public Builder street1(Optional<? extends String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = Optional.ofNullable(street2);
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(Optional<? extends String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(String street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = Optional.ofNullable(street3);
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(Optional<? extends String> street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = street3;
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(String streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = Optional.ofNullable(streetNo);
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(Optional<? extends String> streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = streetNo;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
         * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
         * or a ZIP code (see below), if known, it will yield more accurate results.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
         * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
         * or a ZIP code (see below), if known, it will yield more accurate results.
         */
        public Builder city(Optional<? extends String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * **required for purchase for some countries**&lt;br&gt;
         * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
         * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
         * only accept two or three character state abbreviations.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * **required for purchase for some countries**&lt;br&gt;
         * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
         * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
         * only accept two or three character state abbreviations.
         */
        public Builder state(Optional<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
         * accurate Rates.
         */
        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
         * accurate Rates.
         */
        public Builder zip(Optional<? extends String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        /**
         * Example: `US` or `DE`. All accepted values can be found on the 
         * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
         * Sending a country is always required.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(Optional<? extends String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(Optional<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder isResidential(boolean isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = Optional.ofNullable(isResidential);
            return this;
        }

        public Builder isResidential(Optional<? extends Boolean> isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = isResidential;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Latitude of address
         */
        public Builder latitude(double latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = Optional.ofNullable(latitude);
            return this;
        }

        /**
         * Latitude of address
         */
        public Builder latitude(Optional<? extends Double> latitude) {
            Utils.checkNotNull(latitude, "latitude");
            this.latitude = latitude;
            return this;
        }

        /**
         * Longitude of address
         */
        public Builder longitude(double longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = Optional.ofNullable(longitude);
            return this;
        }

        /**
         * Longitude of address
         */
        public Builder longitude(Optional<? extends Double> longitude) {
            Utils.checkNotNull(longitude, "longitude");
            this.longitude = longitude;
            return this;
        }

        /**
         * Complete addresses contain all required values.&lt;br&gt;&lt;br&gt;Incomplete addresses have failed one or multiple 
         * validations.&lt;br&gt;Incomplete Addresses are eligible for requesting rates but lack at least one required 
         * value for purchasing labels.
         */
        public Builder isComplete(boolean isComplete) {
            Utils.checkNotNull(isComplete, "isComplete");
            this.isComplete = Optional.ofNullable(isComplete);
            return this;
        }

        /**
         * Complete addresses contain all required values.&lt;br&gt;&lt;br&gt;Incomplete addresses have failed one or multiple 
         * validations.&lt;br&gt;Incomplete Addresses are eligible for requesting rates but lack at least one required 
         * value for purchasing labels.
         */
        public Builder isComplete(Optional<? extends Boolean> isComplete) {
            Utils.checkNotNull(isComplete, "isComplete");
            this.isComplete = isComplete;
            return this;
        }

        /**
         * Date and time of Address creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of Address creation.
         */
        public Builder objectCreated(Optional<? extends OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given Address object. 
         * This ID is required to create a Shipment object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given Address object. 
         * This ID is required to create a Shipment object.
         */
        public Builder objectId(Optional<? extends String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the Address object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the Address object.
         */
        public Builder objectOwner(Optional<? extends String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Date and time of last Address update. Since you cannot update Addresses after they were created, this time 
         * stamp reflects the time when the Address was changed by Shippo's systems for the last time, e.g., during the 
         * approximation of one or more values.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last Address update. Since you cannot update Addresses after they were created, this time 
         * stamp reflects the time when the Address was changed by Shippo's systems for the last time, e.g., during the 
         * approximation of one or more values.
         */
        public Builder objectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * Object that contains information regarding if an address had been validated or not. Also contains any messages 
         * generated during validation. Children keys are &lt;code&gt;is_valid&lt;/code&gt;(boolean) and &lt;code&gt;messages&lt;/code&gt;(array).
         */
        public Builder validationResults(AddressValidationResults validationResults) {
            Utils.checkNotNull(validationResults, "validationResults");
            this.validationResults = Optional.ofNullable(validationResults);
            return this;
        }

        /**
         * Object that contains information regarding if an address had been validated or not. Also contains any messages 
         * generated during validation. Children keys are &lt;code&gt;is_valid&lt;/code&gt;(boolean) and &lt;code&gt;messages&lt;/code&gt;(array).
         */
        public Builder validationResults(Optional<? extends AddressValidationResults> validationResults) {
            Utils.checkNotNull(validationResults, "validationResults");
            this.validationResults = validationResults;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<? extends Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public Address build() {
            return new Address(
                name,
                company,
                street1,
                street2,
                street3,
                streetNo,
                city,
                state,
                zip,
                country,
                phone,
                email,
                isResidential,
                metadata,
                latitude,
                longitude,
                isComplete,
                objectCreated,
                objectId,
                objectOwner,
                objectUpdated,
                validationResults,
                test);
        }
    }
}

