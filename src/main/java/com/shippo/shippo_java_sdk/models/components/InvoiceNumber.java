/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * InvoiceNumber - Specify the invoice number field on the label (FedEx only).
 */

public class InvoiceNumber {

    /**
     * Custom prefix for invoice number field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private Optional<? extends String> prefix;

    /**
     * Optional text to be printed on the shipping label for invoice number. Up to 40 characters. If 
     * provided, this will be used on the label instead of shipment.customs_declaration.invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends String> value;

    @JsonCreator
    public InvoiceNumber(
            @JsonProperty("prefix") Optional<? extends String> prefix,
            @JsonProperty("value") Optional<? extends String> value) {
        Utils.checkNotNull(prefix, "prefix");
        Utils.checkNotNull(value, "value");
        this.prefix = prefix;
        this.value = value;
    }
    
    public InvoiceNumber() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Custom prefix for invoice number field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    @JsonIgnore
    public Optional<? extends String> prefix() {
        return prefix;
    }

    /**
     * Optional text to be printed on the shipping label for invoice number. Up to 40 characters. If 
     * provided, this will be used on the label instead of shipment.customs_declaration.invoice.
     */
    @JsonIgnore
    public Optional<? extends String> value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Custom prefix for invoice number field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    public InvoiceNumber withPrefix(String prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = Optional.ofNullable(prefix);
        return this;
    }

    /**
     * Custom prefix for invoice number field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    public InvoiceNumber withPrefix(Optional<? extends String> prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = prefix;
        return this;
    }

    /**
     * Optional text to be printed on the shipping label for invoice number. Up to 40 characters. If 
     * provided, this will be used on the label instead of shipment.customs_declaration.invoice.
     */
    public InvoiceNumber withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    /**
     * Optional text to be printed on the shipping label for invoice number. Up to 40 characters. If 
     * provided, this will be used on the label instead of shipment.customs_declaration.invoice.
     */
    public InvoiceNumber withValue(Optional<? extends String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceNumber other = (InvoiceNumber) o;
        return 
            java.util.Objects.deepEquals(this.prefix, other.prefix) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            prefix,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceNumber.class,
                "prefix", prefix,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> prefix = Optional.empty();
 
        private Optional<? extends String> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Custom prefix for invoice number field (ZPL labels only). Up to 11 characters, including trailing 
         * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
         * this property.
         */
        public Builder prefix(String prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = Optional.ofNullable(prefix);
            return this;
        }

        /**
         * Custom prefix for invoice number field (ZPL labels only). Up to 11 characters, including trailing 
         * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
         * this property.
         */
        public Builder prefix(Optional<? extends String> prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = prefix;
            return this;
        }

        /**
         * Optional text to be printed on the shipping label for invoice number. Up to 40 characters. If 
         * provided, this will be used on the label instead of shipment.customs_declaration.invoice.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * Optional text to be printed on the shipping label for invoice number. Up to 40 characters. If 
         * provided, this will be used on the label instead of shipment.customs_declaration.invoice.
         */
        public Builder value(Optional<? extends String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public InvoiceNumber build() {
            return new InvoiceNumber(
                prefix,
                value);
        }
    }
}

