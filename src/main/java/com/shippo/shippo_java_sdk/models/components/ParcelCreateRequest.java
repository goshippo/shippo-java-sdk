/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ParcelCreateRequest {

    /**
     * The measure unit used for length, width and height.
     */
    @JsonProperty("distance_unit")
    private DistanceUnitEnum distanceUnit;

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("height")
    private String height;

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("length")
    private String length;

    /**
     * The unit used for weight.
     */
    @JsonProperty("mass_unit")
    private WeightUnitEnum massUnit;

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends ParcelTemplateEnumSet> template;

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("weight")
    private String weight;

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("width")
    private String width;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    @JsonCreator
    public ParcelCreateRequest(
            @JsonProperty("distance_unit") DistanceUnitEnum distanceUnit,
            @JsonProperty("height") String height,
            @JsonProperty("length") String length,
            @JsonProperty("mass_unit") WeightUnitEnum massUnit,
            @JsonProperty("template") Optional<? extends ParcelTemplateEnumSet> template,
            @JsonProperty("weight") String weight,
            @JsonProperty("width") String width,
            @JsonProperty("metadata") Optional<? extends String> metadata) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(length, "length");
        Utils.checkNotNull(massUnit, "massUnit");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(metadata, "metadata");
        this.distanceUnit = distanceUnit;
        this.height = height;
        this.length = length;
        this.massUnit = massUnit;
        this.template = template;
        this.weight = weight;
        this.width = width;
        this.metadata = metadata;
    }
    
    public ParcelCreateRequest(
            DistanceUnitEnum distanceUnit,
            String height,
            String length,
            WeightUnitEnum massUnit,
            String weight,
            String width) {
        this(distanceUnit, height, length, massUnit, Optional.empty(), weight, width, Optional.empty());
    }

    /**
     * The measure unit used for length, width and height.
     */
    @JsonIgnore
    public DistanceUnitEnum distanceUnit() {
        return distanceUnit;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String height() {
        return height;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String length() {
        return length;
    }

    /**
     * The unit used for weight.
     */
    @JsonIgnore
    public WeightUnitEnum massUnit() {
        return massUnit;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @JsonIgnore
    public Optional<? extends ParcelTemplateEnumSet> template() {
        return template;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String weight() {
        return weight;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String width() {
        return width;
    }

    @JsonIgnore
    public Optional<? extends String> metadata() {
        return metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The measure unit used for length, width and height.
     */
    public ParcelCreateRequest withDistanceUnit(DistanceUnitEnum distanceUnit) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        this.distanceUnit = distanceUnit;
        return this;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public ParcelCreateRequest withHeight(String height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public ParcelCreateRequest withLength(String length) {
        Utils.checkNotNull(length, "length");
        this.length = length;
        return this;
    }

    /**
     * The unit used for weight.
     */
    public ParcelCreateRequest withMassUnit(WeightUnitEnum massUnit) {
        Utils.checkNotNull(massUnit, "massUnit");
        this.massUnit = massUnit;
        return this;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    public ParcelCreateRequest withTemplate(ParcelTemplateEnumSet template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    public ParcelCreateRequest withTemplate(Optional<? extends ParcelTemplateEnumSet> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public ParcelCreateRequest withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public ParcelCreateRequest withWidth(String width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    public ParcelCreateRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public ParcelCreateRequest withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ParcelCreateRequest other = (ParcelCreateRequest) o;
        return 
            java.util.Objects.deepEquals(this.distanceUnit, other.distanceUnit) &&
            java.util.Objects.deepEquals(this.height, other.height) &&
            java.util.Objects.deepEquals(this.length, other.length) &&
            java.util.Objects.deepEquals(this.massUnit, other.massUnit) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.weight, other.weight) &&
            java.util.Objects.deepEquals(this.width, other.width) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            distanceUnit,
            height,
            length,
            massUnit,
            template,
            weight,
            width,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ParcelCreateRequest.class,
                "distanceUnit", distanceUnit,
                "height", height,
                "length", length,
                "massUnit", massUnit,
                "template", template,
                "weight", weight,
                "width", width,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private DistanceUnitEnum distanceUnit;
 
        private String height;
 
        private String length;
 
        private WeightUnitEnum massUnit;
 
        private Optional<? extends ParcelTemplateEnumSet> template = Optional.empty();
 
        private String weight;
 
        private String width;
 
        private Optional<? extends String> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The measure unit used for length, width and height.
         */
        public Builder distanceUnit(DistanceUnitEnum distanceUnit) {
            Utils.checkNotNull(distanceUnit, "distanceUnit");
            this.distanceUnit = distanceUnit;
            return this;
        }

        /**
         * **Required if template is not specified**&lt;br&gt;
         * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder height(String height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * **Required if template is not specified**&lt;br&gt;
         * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder length(String length) {
            Utils.checkNotNull(length, "length");
            this.length = length;
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder massUnit(WeightUnitEnum massUnit) {
            Utils.checkNotNull(massUnit, "massUnit");
            this.massUnit = massUnit;
            return this;
        }

        /**
         * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
         */
        public Builder template(ParcelTemplateEnumSet template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
         */
        public Builder template(Optional<? extends ParcelTemplateEnumSet> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * **Required if template is not specified**&lt;br&gt;
         * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder width(String width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public ParcelCreateRequest build() {
            return new ParcelCreateRequest(
                distanceUnit,
                height,
                length,
                massUnit,
                template,
                weight,
                width,
                metadata);
        }
    }
}

