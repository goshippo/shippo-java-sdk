/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ErrorMessage {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipment")
    private Optional<? extends java.util.List<java.util.Map<String, java.util.List<String>>>> shipment;

    @JsonCreator
    public ErrorMessage(
            @JsonProperty("shipment") Optional<? extends java.util.List<java.util.Map<String, java.util.List<String>>>> shipment) {
        Utils.checkNotNull(shipment, "shipment");
        this.shipment = shipment;
    }
    
    public ErrorMessage() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends java.util.List<java.util.Map<String, java.util.List<String>>>> shipment() {
        return shipment;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ErrorMessage withShipment(java.util.List<java.util.Map<String, java.util.List<String>>> shipment) {
        Utils.checkNotNull(shipment, "shipment");
        this.shipment = Optional.ofNullable(shipment);
        return this;
    }

    public ErrorMessage withShipment(Optional<? extends java.util.List<java.util.Map<String, java.util.List<String>>>> shipment) {
        Utils.checkNotNull(shipment, "shipment");
        this.shipment = shipment;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorMessage other = (ErrorMessage) o;
        return 
            java.util.Objects.deepEquals(this.shipment, other.shipment);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            shipment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorMessage.class,
                "shipment", shipment);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<java.util.Map<String, java.util.List<String>>>> shipment = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder shipment(java.util.List<java.util.Map<String, java.util.List<String>>> shipment) {
            Utils.checkNotNull(shipment, "shipment");
            this.shipment = Optional.ofNullable(shipment);
            return this;
        }

        public Builder shipment(Optional<? extends java.util.List<java.util.Map<String, java.util.List<String>>>> shipment) {
            Utils.checkNotNull(shipment, "shipment");
            this.shipment = shipment;
            return this;
        }
        
        public ErrorMessage build() {
            return new ErrorMessage(
                shipment);
        }
    }
}

