/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Insurance - To add 3rd party insurance powered by &lt;a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/"&gt;XCover&lt;/a&gt;, specify &lt;br&gt; `amount`, `content`, and `currency`. &lt;br&gt; Alternatively, you can choose carrier provided insurance by additionally specifying `provider` (UPS, FedEx and OnTrac only). &lt;br&gt;&lt;br&gt; If you do not want to add insurance to you shipment, do not set these parameters.
 */

public class Insurance {

    /**
     * Declared value of the goods you want to insure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends String> amount;

    /**
     * Description of package content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends String> content;

    /**
     * Currency for the amount value.
     * Currently only USD is supported for FedEx and UPS.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private Optional<? extends Provider> provider;

    @JsonCreator
    public Insurance(
            @JsonProperty("amount") Optional<? extends String> amount,
            @JsonProperty("content") Optional<? extends String> content,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("provider") Optional<? extends Provider> provider) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(provider, "provider");
        this.amount = amount;
        this.content = content;
        this.currency = currency;
        this.provider = provider;
    }
    
    public Insurance() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Declared value of the goods you want to insure.
     */
    @JsonIgnore
    public Optional<? extends String> amount() {
        return amount;
    }

    /**
     * Description of package content.
     */
    @JsonIgnore
    public Optional<? extends String> content() {
        return content;
    }

    /**
     * Currency for the amount value.
     * Currently only USD is supported for FedEx and UPS.
     */
    @JsonIgnore
    public Optional<? extends String> currency() {
        return currency;
    }

    /**
     * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
     */
    @JsonIgnore
    public Optional<? extends Provider> provider() {
        return provider;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Declared value of the goods you want to insure.
     */
    public Insurance withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * Declared value of the goods you want to insure.
     */
    public Insurance withAmount(Optional<? extends String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Description of package content.
     */
    public Insurance withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    /**
     * Description of package content.
     */
    public Insurance withContent(Optional<? extends String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * Currency for the amount value.
     * Currently only USD is supported for FedEx and UPS.
     */
    public Insurance withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * Currency for the amount value.
     * Currently only USD is supported for FedEx and UPS.
     */
    public Insurance withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
     */
    public Insurance withProvider(Provider provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }

    /**
     * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
     */
    public Insurance withProvider(Optional<? extends Provider> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Insurance other = (Insurance) o;
        return 
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.provider, other.provider);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amount,
            content,
            currency,
            provider);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Insurance.class,
                "amount", amount,
                "content", content,
                "currency", currency,
                "provider", provider);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> amount = Optional.empty();
 
        private Optional<? extends String> content = Optional.empty();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends Provider> provider = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Declared value of the goods you want to insure.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Declared value of the goods you want to insure.
         */
        public Builder amount(Optional<? extends String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Description of package content.
         */
        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * Description of package content.
         */
        public Builder content(Optional<? extends String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        /**
         * Currency for the amount value.
         * Currently only USD is supported for FedEx and UPS.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * Currency for the amount value.
         * Currently only USD is supported for FedEx and UPS.
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
         */
        public Builder provider(Provider provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        /**
         * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
         */
        public Builder provider(Optional<? extends Provider> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }
        
        public Insurance build() {
            return new Insurance(
                amount,
                content,
                currency,
                provider);
        }
    }
}

