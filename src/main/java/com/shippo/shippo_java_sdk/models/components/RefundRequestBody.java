/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.shippo_java_sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.shippo_java_sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class RefundRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("async")
    private Optional<? extends Boolean> async;

    @JsonProperty("transaction")
    private String transaction;

    @JsonCreator
    public RefundRequestBody(
            @JsonProperty("async") Optional<? extends Boolean> async,
            @JsonProperty("transaction") String transaction) {
        Utils.checkNotNull(async, "async");
        Utils.checkNotNull(transaction, "transaction");
        this.async = async;
        this.transaction = transaction;
    }
    
    public RefundRequestBody(
            String transaction) {
        this(Optional.empty(), transaction);
    }

    @JsonIgnore
    public Optional<? extends Boolean> async() {
        return async;
    }

    @JsonIgnore
    public String transaction() {
        return transaction;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RefundRequestBody withAsync(boolean async) {
        Utils.checkNotNull(async, "async");
        this.async = Optional.ofNullable(async);
        return this;
    }

    public RefundRequestBody withAsync(Optional<? extends Boolean> async) {
        Utils.checkNotNull(async, "async");
        this.async = async;
        return this;
    }

    public RefundRequestBody withTransaction(String transaction) {
        Utils.checkNotNull(transaction, "transaction");
        this.transaction = transaction;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RefundRequestBody other = (RefundRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.async, other.async) &&
            java.util.Objects.deepEquals(this.transaction, other.transaction);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            async,
            transaction);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RefundRequestBody.class,
                "async", async,
                "transaction", transaction);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> async = Optional.empty();
 
        private String transaction;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder async(boolean async) {
            Utils.checkNotNull(async, "async");
            this.async = Optional.ofNullable(async);
            return this;
        }

        public Builder async(Optional<? extends Boolean> async) {
            Utils.checkNotNull(async, "async");
            this.async = async;
            return this;
        }

        public Builder transaction(String transaction) {
            Utils.checkNotNull(transaction, "transaction");
            this.transaction = transaction;
            return this;
        }
        
        public RefundRequestBody build() {
            return new RefundRequestBody(
                async,
                transaction);
        }
    }
}

