/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ServiceGroupUpdateRequest {

    /**
     * Description for the service group
     */
    @JsonProperty("description")
    private String description;

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flat_rate")
    private Optional<? extends String> flatRate;

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flat_rate_currency")
    private Optional<? extends String> flatRateCurrency;

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_shipping_threshold_currency")
    private Optional<? extends String> freeShippingThresholdCurrency;

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum cart total (total cost of items in the cart) for this service group to be returned for rates at checkout. Optional unless type is `FREE_SHIPPING`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_shipping_threshold_min")
    private Optional<? extends String> freeShippingThresholdMin;

    /**
     * Name for the service group that will be shown to customers in the response
     */
    @JsonProperty("name")
    private String name;

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate_adjustment")
    private Optional<? extends Long> rateAdjustment;

    /**
     * The type of the service group.&lt;br&gt; `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
     */
    @JsonProperty("type")
    private ServiceGroupTypeEnum type;

    /**
     * The unique identifier of the given Service Group object.
     */
    @JsonProperty("object_id")
    private String objectId;

    /**
     * True if the service group is enabled, false otherwise.
     */
    @JsonProperty("is_active")
    private boolean isActive;

    @JsonProperty("service_levels")
    private java.util.List<ServiceGroupAccountAndServiceLevel> serviceLevels;

    @JsonCreator
    public ServiceGroupUpdateRequest(
            @JsonProperty("description") String description,
            @JsonProperty("flat_rate") Optional<? extends String> flatRate,
            @JsonProperty("flat_rate_currency") Optional<? extends String> flatRateCurrency,
            @JsonProperty("free_shipping_threshold_currency") Optional<? extends String> freeShippingThresholdCurrency,
            @JsonProperty("free_shipping_threshold_min") Optional<? extends String> freeShippingThresholdMin,
            @JsonProperty("name") String name,
            @JsonProperty("rate_adjustment") Optional<? extends Long> rateAdjustment,
            @JsonProperty("type") ServiceGroupTypeEnum type,
            @JsonProperty("object_id") String objectId,
            @JsonProperty("is_active") boolean isActive,
            @JsonProperty("service_levels") java.util.List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(flatRate, "flatRate");
        Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
        Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
        Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(rateAdjustment, "rateAdjustment");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(serviceLevels, "serviceLevels");
        this.description = description;
        this.flatRate = flatRate;
        this.flatRateCurrency = flatRateCurrency;
        this.freeShippingThresholdCurrency = freeShippingThresholdCurrency;
        this.freeShippingThresholdMin = freeShippingThresholdMin;
        this.name = name;
        this.rateAdjustment = rateAdjustment;
        this.type = type;
        this.objectId = objectId;
        this.isActive = isActive;
        this.serviceLevels = serviceLevels;
    }
    
    public ServiceGroupUpdateRequest(
            String description,
            String name,
            ServiceGroupTypeEnum type,
            String objectId,
            boolean isActive,
            java.util.List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
        this(description, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), type, objectId, isActive, serviceLevels);
    }

    /**
     * Description for the service group
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> flatRate() {
        return (Optional<String>) flatRate;
    }

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> flatRateCurrency() {
        return (Optional<String>) flatRateCurrency;
    }

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> freeShippingThresholdCurrency() {
        return (Optional<String>) freeShippingThresholdCurrency;
    }

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum cart total (total cost of items in the cart) for this service group to be returned for rates at checkout. Optional unless type is `FREE_SHIPPING`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> freeShippingThresholdMin() {
        return (Optional<String>) freeShippingThresholdMin;
    }

    /**
     * Name for the service group that will be shown to customers in the response
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> rateAdjustment() {
        return (Optional<Long>) rateAdjustment;
    }

    /**
     * The type of the service group.&lt;br&gt; `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
     */
    @JsonIgnore
    public ServiceGroupTypeEnum type() {
        return type;
    }

    /**
     * The unique identifier of the given Service Group object.
     */
    @JsonIgnore
    public String objectId() {
        return objectId;
    }

    /**
     * True if the service group is enabled, false otherwise.
     */
    @JsonIgnore
    public boolean isActive() {
        return isActive;
    }

    @JsonIgnore
    public java.util.List<ServiceGroupAccountAndServiceLevel> serviceLevels() {
        return serviceLevels;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Description for the service group
     */
    public ServiceGroupUpdateRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    public ServiceGroupUpdateRequest withFlatRate(String flatRate) {
        Utils.checkNotNull(flatRate, "flatRate");
        this.flatRate = Optional.ofNullable(flatRate);
        return this;
    }

    /**
     * String representation of an amount to be returned as the flat rate
     * if 1. The service group is of type `LIVE_RATE` and no matching rates
     * were found; or 2. The service group is of type `FLAT_RATE`. Either
     * integers or decimals are accepted. Required unless type is
     * `FREE_SHIPPING`
     */
    public ServiceGroupUpdateRequest withFlatRate(Optional<? extends String> flatRate) {
        Utils.checkNotNull(flatRate, "flatRate");
        this.flatRate = flatRate;
        return this;
    }

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroupUpdateRequest withFlatRateCurrency(String flatRateCurrency) {
        Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
        this.flatRateCurrency = Optional.ofNullable(flatRateCurrency);
        return this;
    }

    /**
     * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroupUpdateRequest withFlatRateCurrency(Optional<? extends String> flatRateCurrency) {
        Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
        this.flatRateCurrency = flatRateCurrency;
        return this;
    }

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroupUpdateRequest withFreeShippingThresholdCurrency(String freeShippingThresholdCurrency) {
        Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
        this.freeShippingThresholdCurrency = Optional.ofNullable(freeShippingThresholdCurrency);
        return this;
    }

    /**
     * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
     */
    public ServiceGroupUpdateRequest withFreeShippingThresholdCurrency(Optional<? extends String> freeShippingThresholdCurrency) {
        Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
        this.freeShippingThresholdCurrency = freeShippingThresholdCurrency;
        return this;
    }

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum cart total (total cost of items in the cart) for this service group to be returned for rates at checkout. Optional unless type is `FREE_SHIPPING`
     */
    public ServiceGroupUpdateRequest withFreeShippingThresholdMin(String freeShippingThresholdMin) {
        Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
        this.freeShippingThresholdMin = Optional.ofNullable(freeShippingThresholdMin);
        return this;
    }

    /**
     * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum cart total (total cost of items in the cart) for this service group to be returned for rates at checkout. Optional unless type is `FREE_SHIPPING`
     */
    public ServiceGroupUpdateRequest withFreeShippingThresholdMin(Optional<? extends String> freeShippingThresholdMin) {
        Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
        this.freeShippingThresholdMin = freeShippingThresholdMin;
        return this;
    }

    /**
     * Name for the service group that will be shown to customers in the response
     */
    public ServiceGroupUpdateRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    public ServiceGroupUpdateRequest withRateAdjustment(long rateAdjustment) {
        Utils.checkNotNull(rateAdjustment, "rateAdjustment");
        this.rateAdjustment = Optional.ofNullable(rateAdjustment);
        return this;
    }

    /**
     * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
     */
    public ServiceGroupUpdateRequest withRateAdjustment(Optional<? extends Long> rateAdjustment) {
        Utils.checkNotNull(rateAdjustment, "rateAdjustment");
        this.rateAdjustment = rateAdjustment;
        return this;
    }

    /**
     * The type of the service group.&lt;br&gt; `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
     */
    public ServiceGroupUpdateRequest withType(ServiceGroupTypeEnum type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The unique identifier of the given Service Group object.
     */
    public ServiceGroupUpdateRequest withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * True if the service group is enabled, false otherwise.
     */
    public ServiceGroupUpdateRequest withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    public ServiceGroupUpdateRequest withServiceLevels(java.util.List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
        Utils.checkNotNull(serviceLevels, "serviceLevels");
        this.serviceLevels = serviceLevels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServiceGroupUpdateRequest other = (ServiceGroupUpdateRequest) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.flatRate, other.flatRate) &&
            java.util.Objects.deepEquals(this.flatRateCurrency, other.flatRateCurrency) &&
            java.util.Objects.deepEquals(this.freeShippingThresholdCurrency, other.freeShippingThresholdCurrency) &&
            java.util.Objects.deepEquals(this.freeShippingThresholdMin, other.freeShippingThresholdMin) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.rateAdjustment, other.rateAdjustment) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.isActive, other.isActive) &&
            java.util.Objects.deepEquals(this.serviceLevels, other.serviceLevels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            flatRate,
            flatRateCurrency,
            freeShippingThresholdCurrency,
            freeShippingThresholdMin,
            name,
            rateAdjustment,
            type,
            objectId,
            isActive,
            serviceLevels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ServiceGroupUpdateRequest.class,
                "description", description,
                "flatRate", flatRate,
                "flatRateCurrency", flatRateCurrency,
                "freeShippingThresholdCurrency", freeShippingThresholdCurrency,
                "freeShippingThresholdMin", freeShippingThresholdMin,
                "name", name,
                "rateAdjustment", rateAdjustment,
                "type", type,
                "objectId", objectId,
                "isActive", isActive,
                "serviceLevels", serviceLevels);
    }
    
    public final static class Builder {
 
        private String description;
 
        private Optional<? extends String> flatRate = Optional.empty();
 
        private Optional<? extends String> flatRateCurrency = Optional.empty();
 
        private Optional<? extends String> freeShippingThresholdCurrency = Optional.empty();
 
        private Optional<? extends String> freeShippingThresholdMin = Optional.empty();
 
        private String name;
 
        private Optional<? extends Long> rateAdjustment = Optional.empty();
 
        private ServiceGroupTypeEnum type;
 
        private String objectId;
 
        private Boolean isActive;
 
        private java.util.List<ServiceGroupAccountAndServiceLevel> serviceLevels;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Description for the service group
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * String representation of an amount to be returned as the flat rate
         * if 1. The service group is of type `LIVE_RATE` and no matching rates
         * were found; or 2. The service group is of type `FLAT_RATE`. Either
         * integers or decimals are accepted. Required unless type is
         * `FREE_SHIPPING`
         */
        public Builder flatRate(String flatRate) {
            Utils.checkNotNull(flatRate, "flatRate");
            this.flatRate = Optional.ofNullable(flatRate);
            return this;
        }

        /**
         * String representation of an amount to be returned as the flat rate
         * if 1. The service group is of type `LIVE_RATE` and no matching rates
         * were found; or 2. The service group is of type `FLAT_RATE`. Either
         * integers or decimals are accepted. Required unless type is
         * `FREE_SHIPPING`
         */
        public Builder flatRate(Optional<? extends String> flatRate) {
            Utils.checkNotNull(flatRate, "flatRate");
            this.flatRate = flatRate;
            return this;
        }

        /**
         * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder flatRateCurrency(String flatRateCurrency) {
            Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
            this.flatRateCurrency = Optional.ofNullable(flatRateCurrency);
            return this;
        }

        /**
         * required unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder flatRateCurrency(Optional<? extends String> flatRateCurrency) {
            Utils.checkNotNull(flatRateCurrency, "flatRateCurrency");
            this.flatRateCurrency = flatRateCurrency;
            return this;
        }

        /**
         * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder freeShippingThresholdCurrency(String freeShippingThresholdCurrency) {
            Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
            this.freeShippingThresholdCurrency = Optional.ofNullable(freeShippingThresholdCurrency);
            return this;
        }

        /**
         * optional unless type is `FREE_SHIPPING`. (ISO 4217 currency)
         */
        public Builder freeShippingThresholdCurrency(Optional<? extends String> freeShippingThresholdCurrency) {
            Utils.checkNotNull(freeShippingThresholdCurrency, "freeShippingThresholdCurrency");
            this.freeShippingThresholdCurrency = freeShippingThresholdCurrency;
            return this;
        }

        /**
         * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum cart total (total cost of items in the cart) for this service group to be returned for rates at checkout. Optional unless type is `FREE_SHIPPING`
         */
        public Builder freeShippingThresholdMin(String freeShippingThresholdMin) {
            Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
            this.freeShippingThresholdMin = Optional.ofNullable(freeShippingThresholdMin);
            return this;
        }

        /**
         * For service groups of type `FREE_SHIPPING`, this field must be required to configure the minimum cart total (total cost of items in the cart) for this service group to be returned for rates at checkout. Optional unless type is `FREE_SHIPPING`
         */
        public Builder freeShippingThresholdMin(Optional<? extends String> freeShippingThresholdMin) {
            Utils.checkNotNull(freeShippingThresholdMin, "freeShippingThresholdMin");
            this.freeShippingThresholdMin = freeShippingThresholdMin;
            return this;
        }

        /**
         * Name for the service group that will be shown to customers in the response
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
         */
        public Builder rateAdjustment(long rateAdjustment) {
            Utils.checkNotNull(rateAdjustment, "rateAdjustment");
            this.rateAdjustment = Optional.ofNullable(rateAdjustment);
            return this;
        }

        /**
         * The amount in percent (%) that the service group's returned rate should be adjusted. For example, if this field is set to 5 and the matched rate price is $5.00, the returned value of the service group will be $5.25. Negative integers are also accepted and will discount the rate price by the defined percentage amount.
         */
        public Builder rateAdjustment(Optional<? extends Long> rateAdjustment) {
            Utils.checkNotNull(rateAdjustment, "rateAdjustment");
            this.rateAdjustment = rateAdjustment;
            return this;
        }

        /**
         * The type of the service group.&lt;br&gt; `LIVE_RATE` - Shippo will make a rating request and return real-time rates for the shipping group, only falling back to the specified flat rate amount if no rates match a service level in the service group.&lt;br&gt; `FLAT_RATE` - Returns a shipping option with the specified flat rate amount.&lt;br&gt; `FREE_SHIPPING` - Returns a shipping option with a price of $0 only if the total cost of items exceeds the amount defined by `free_shipping_threshold_min`
         */
        public Builder type(ServiceGroupTypeEnum type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The unique identifier of the given Service Group object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * True if the service group is enabled, false otherwise.
         */
        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        public Builder serviceLevels(java.util.List<ServiceGroupAccountAndServiceLevel> serviceLevels) {
            Utils.checkNotNull(serviceLevels, "serviceLevels");
            this.serviceLevels = serviceLevels;
            return this;
        }
        
        public ServiceGroupUpdateRequest build() {
            return new ServiceGroupUpdateRequest(
                description,
                flatRate,
                flatRateCurrency,
                freeShippingThresholdCurrency,
                freeShippingThresholdMin,
                name,
                rateAdjustment,
                type,
                objectId,
                isActive,
                serviceLevels);
        }
    }
}

