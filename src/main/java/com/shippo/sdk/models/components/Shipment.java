/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;
/**
 * Shipment - Shipment represents the parcel as retrieved from the database
 */

public class Shipment {

    /**
     * An object holding optional extra services to be requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extra")
    private Optional<? extends ShipmentExtra> extra;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    @JsonProperty("metadata")
    private String metadata;

    /**
     * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`. 
     * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
     * be in the future, on a working day, or similar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipment_date")
    private Optional<? extends String> shipmentDate;

    /**
     * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the sender / seller. Will be returned expanded by default.
     */
    @JsonProperty("address_from")
    private Address addressFrom;

    /**
     * ID of the Address object where the shipment will be sent back to if it is not delivered 
     * (Only available for UPS, USPS, and Fedex shipments). &lt;br/&gt; 
     * If this field is not set, your shipments will be returned to the address_from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address_return")
    private Optional<? extends Address> addressReturn;

    /**
     * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the recipient / buyer. Will be returned expanded by default.
     */
    @JsonProperty("address_to")
    private Address addressTo;

    /**
     * An array of object_ids of the carrier account objects to be used for getting shipping rates for this shipment. 
     * If no carrier account object_ids are set in this field, Shippo will attempt to generate rates using all the 
     * carrier accounts that have the `active` field set.
     */
    @JsonProperty("carrier_accounts")
    private java.util.List<String> carrierAccounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customs_declaration")
    private Optional<? extends CustomsDeclaration> customsDeclaration;

    @JsonProperty("messages")
    private java.util.List<ResponseMessage> messages;

    /**
     * Date and time of Shipment creation.
     */
    @JsonProperty("object_created")
    private OffsetDateTime objectCreated;

    /**
     * Unique identifier of the given Shipment object.
     */
    @JsonProperty("object_id")
    private String objectId;

    /**
     * Username of the user who created the Shipment object.
     */
    @JsonProperty("object_owner")
    private String objectOwner;

    /**
     * Date and time of last Shipment update.
     */
    @JsonProperty("object_updated")
    private OffsetDateTime objectUpdated;

    /**
     * List of Parcel objects to be shipped.
     */
    @JsonProperty("parcels")
    private java.util.List<Parcel> parcels;

    /**
     * An array with all available rates. If &lt;code&gt;async&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt; in the request,
     * this will be populated with all available rates in the response. Otherwise rates will be created
     * asynchronously and this array will initially be empty.
     */
    @JsonProperty("rates")
    private java.util.List<Rate> rates;

    /**
     * `Waiting` shipments have been successfully submitted but not yet been processed. 
     * `Queued` shipments are currently being processed. 
     * `Success` shipments have been processed successfully, meaning that rate generation has concluded. 
     * `Error` does not occur currently and is reserved for future use.
     */
    @JsonProperty("status")
    private ShipmentStatus status;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<? extends Boolean> test;

    @JsonCreator
    public Shipment(
            @JsonProperty("extra") Optional<? extends ShipmentExtra> extra,
            @JsonProperty("metadata") String metadata,
            @JsonProperty("shipment_date") Optional<? extends String> shipmentDate,
            @JsonProperty("address_from") Address addressFrom,
            @JsonProperty("address_return") Optional<? extends Address> addressReturn,
            @JsonProperty("address_to") Address addressTo,
            @JsonProperty("carrier_accounts") java.util.List<String> carrierAccounts,
            @JsonProperty("customs_declaration") Optional<? extends CustomsDeclaration> customsDeclaration,
            @JsonProperty("messages") java.util.List<ResponseMessage> messages,
            @JsonProperty("object_created") OffsetDateTime objectCreated,
            @JsonProperty("object_id") String objectId,
            @JsonProperty("object_owner") String objectOwner,
            @JsonProperty("object_updated") OffsetDateTime objectUpdated,
            @JsonProperty("parcels") java.util.List<Parcel> parcels,
            @JsonProperty("rates") java.util.List<Rate> rates,
            @JsonProperty("status") ShipmentStatus status,
            @JsonProperty("test") Optional<? extends Boolean> test) {
        Utils.checkNotNull(extra, "extra");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(shipmentDate, "shipmentDate");
        Utils.checkNotNull(addressFrom, "addressFrom");
        Utils.checkNotNull(addressReturn, "addressReturn");
        Utils.checkNotNull(addressTo, "addressTo");
        Utils.checkNotNull(carrierAccounts, "carrierAccounts");
        Utils.checkNotNull(customsDeclaration, "customsDeclaration");
        Utils.checkNotNull(messages, "messages");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(parcels, "parcels");
        Utils.checkNotNull(rates, "rates");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(test, "test");
        this.extra = extra;
        this.metadata = metadata;
        this.shipmentDate = shipmentDate;
        this.addressFrom = addressFrom;
        this.addressReturn = addressReturn;
        this.addressTo = addressTo;
        this.carrierAccounts = carrierAccounts;
        this.customsDeclaration = customsDeclaration;
        this.messages = messages;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectUpdated = objectUpdated;
        this.parcels = parcels;
        this.rates = rates;
        this.status = status;
        this.test = test;
    }
    
    public Shipment(
            String metadata,
            Address addressFrom,
            Address addressTo,
            java.util.List<String> carrierAccounts,
            java.util.List<ResponseMessage> messages,
            OffsetDateTime objectCreated,
            String objectId,
            String objectOwner,
            OffsetDateTime objectUpdated,
            java.util.List<Parcel> parcels,
            java.util.List<Rate> rates,
            ShipmentStatus status) {
        this(Optional.empty(), metadata, Optional.empty(), addressFrom, Optional.empty(), addressTo, carrierAccounts, Optional.empty(), messages, objectCreated, objectId, objectOwner, objectUpdated, parcels, rates, status, Optional.empty());
    }

    /**
     * An object holding optional extra services to be requested.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShipmentExtra> extra() {
        return (Optional<ShipmentExtra>) extra;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    @JsonIgnore
    public String metadata() {
        return metadata;
    }

    /**
     * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`. 
     * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
     * be in the future, on a working day, or similar.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> shipmentDate() {
        return (Optional<String>) shipmentDate;
    }

    /**
     * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the sender / seller. Will be returned expanded by default.
     */
    @JsonIgnore
    public Address addressFrom() {
        return addressFrom;
    }

    /**
     * ID of the Address object where the shipment will be sent back to if it is not delivered 
     * (Only available for UPS, USPS, and Fedex shipments). &lt;br/&gt; 
     * If this field is not set, your shipments will be returned to the address_from.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Address> addressReturn() {
        return (Optional<Address>) addressReturn;
    }

    /**
     * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the recipient / buyer. Will be returned expanded by default.
     */
    @JsonIgnore
    public Address addressTo() {
        return addressTo;
    }

    /**
     * An array of object_ids of the carrier account objects to be used for getting shipping rates for this shipment. 
     * If no carrier account object_ids are set in this field, Shippo will attempt to generate rates using all the 
     * carrier accounts that have the `active` field set.
     */
    @JsonIgnore
    public java.util.List<String> carrierAccounts() {
        return carrierAccounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomsDeclaration> customsDeclaration() {
        return (Optional<CustomsDeclaration>) customsDeclaration;
    }

    @JsonIgnore
    public java.util.List<ResponseMessage> messages() {
        return messages;
    }

    /**
     * Date and time of Shipment creation.
     */
    @JsonIgnore
    public OffsetDateTime objectCreated() {
        return objectCreated;
    }

    /**
     * Unique identifier of the given Shipment object.
     */
    @JsonIgnore
    public String objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the Shipment object.
     */
    @JsonIgnore
    public String objectOwner() {
        return objectOwner;
    }

    /**
     * Date and time of last Shipment update.
     */
    @JsonIgnore
    public OffsetDateTime objectUpdated() {
        return objectUpdated;
    }

    /**
     * List of Parcel objects to be shipped.
     */
    @JsonIgnore
    public java.util.List<Parcel> parcels() {
        return parcels;
    }

    /**
     * An array with all available rates. If &lt;code&gt;async&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt; in the request,
     * this will be populated with all available rates in the response. Otherwise rates will be created
     * asynchronously and this array will initially be empty.
     */
    @JsonIgnore
    public java.util.List<Rate> rates() {
        return rates;
    }

    /**
     * `Waiting` shipments have been successfully submitted but not yet been processed. 
     * `Queued` shipments are currently being processed. 
     * `Success` shipments have been processed successfully, meaning that rate generation has concluded. 
     * `Error` does not occur currently and is reserved for future use.
     */
    @JsonIgnore
    public ShipmentStatus status() {
        return status;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> test() {
        return (Optional<Boolean>) test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An object holding optional extra services to be requested.
     */
    public Shipment withExtra(ShipmentExtra extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = Optional.ofNullable(extra);
        return this;
    }

    /**
     * An object holding optional extra services to be requested.
     */
    public Shipment withExtra(Optional<? extends ShipmentExtra> extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = extra;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    public Shipment withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`. 
     * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
     * be in the future, on a working day, or similar.
     */
    public Shipment withShipmentDate(String shipmentDate) {
        Utils.checkNotNull(shipmentDate, "shipmentDate");
        this.shipmentDate = Optional.ofNullable(shipmentDate);
        return this;
    }

    /**
     * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`. 
     * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
     * be in the future, on a working day, or similar.
     */
    public Shipment withShipmentDate(Optional<? extends String> shipmentDate) {
        Utils.checkNotNull(shipmentDate, "shipmentDate");
        this.shipmentDate = shipmentDate;
        return this;
    }

    /**
     * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the sender / seller. Will be returned expanded by default.
     */
    public Shipment withAddressFrom(Address addressFrom) {
        Utils.checkNotNull(addressFrom, "addressFrom");
        this.addressFrom = addressFrom;
        return this;
    }

    /**
     * ID of the Address object where the shipment will be sent back to if it is not delivered 
     * (Only available for UPS, USPS, and Fedex shipments). &lt;br/&gt; 
     * If this field is not set, your shipments will be returned to the address_from.
     */
    public Shipment withAddressReturn(Address addressReturn) {
        Utils.checkNotNull(addressReturn, "addressReturn");
        this.addressReturn = Optional.ofNullable(addressReturn);
        return this;
    }

    /**
     * ID of the Address object where the shipment will be sent back to if it is not delivered 
     * (Only available for UPS, USPS, and Fedex shipments). &lt;br/&gt; 
     * If this field is not set, your shipments will be returned to the address_from.
     */
    public Shipment withAddressReturn(Optional<? extends Address> addressReturn) {
        Utils.checkNotNull(addressReturn, "addressReturn");
        this.addressReturn = addressReturn;
        return this;
    }

    /**
     * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the recipient / buyer. Will be returned expanded by default.
     */
    public Shipment withAddressTo(Address addressTo) {
        Utils.checkNotNull(addressTo, "addressTo");
        this.addressTo = addressTo;
        return this;
    }

    /**
     * An array of object_ids of the carrier account objects to be used for getting shipping rates for this shipment. 
     * If no carrier account object_ids are set in this field, Shippo will attempt to generate rates using all the 
     * carrier accounts that have the `active` field set.
     */
    public Shipment withCarrierAccounts(java.util.List<String> carrierAccounts) {
        Utils.checkNotNull(carrierAccounts, "carrierAccounts");
        this.carrierAccounts = carrierAccounts;
        return this;
    }

    public Shipment withCustomsDeclaration(CustomsDeclaration customsDeclaration) {
        Utils.checkNotNull(customsDeclaration, "customsDeclaration");
        this.customsDeclaration = Optional.ofNullable(customsDeclaration);
        return this;
    }

    public Shipment withCustomsDeclaration(Optional<? extends CustomsDeclaration> customsDeclaration) {
        Utils.checkNotNull(customsDeclaration, "customsDeclaration");
        this.customsDeclaration = customsDeclaration;
        return this;
    }

    public Shipment withMessages(java.util.List<ResponseMessage> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    /**
     * Date and time of Shipment creation.
     */
    public Shipment withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given Shipment object.
     */
    public Shipment withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the Shipment object.
     */
    public Shipment withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Date and time of last Shipment update.
     */
    public Shipment withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * List of Parcel objects to be shipped.
     */
    public Shipment withParcels(java.util.List<Parcel> parcels) {
        Utils.checkNotNull(parcels, "parcels");
        this.parcels = parcels;
        return this;
    }

    /**
     * An array with all available rates. If &lt;code&gt;async&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt; in the request,
     * this will be populated with all available rates in the response. Otherwise rates will be created
     * asynchronously and this array will initially be empty.
     */
    public Shipment withRates(java.util.List<Rate> rates) {
        Utils.checkNotNull(rates, "rates");
        this.rates = rates;
        return this;
    }

    /**
     * `Waiting` shipments have been successfully submitted but not yet been processed. 
     * `Queued` shipments are currently being processed. 
     * `Success` shipments have been processed successfully, meaning that rate generation has concluded. 
     * `Error` does not occur currently and is reserved for future use.
     */
    public Shipment withStatus(ShipmentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Shipment withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Shipment withTest(Optional<? extends Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Shipment other = (Shipment) o;
        return 
            java.util.Objects.deepEquals(this.extra, other.extra) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.shipmentDate, other.shipmentDate) &&
            java.util.Objects.deepEquals(this.addressFrom, other.addressFrom) &&
            java.util.Objects.deepEquals(this.addressReturn, other.addressReturn) &&
            java.util.Objects.deepEquals(this.addressTo, other.addressTo) &&
            java.util.Objects.deepEquals(this.carrierAccounts, other.carrierAccounts) &&
            java.util.Objects.deepEquals(this.customsDeclaration, other.customsDeclaration) &&
            java.util.Objects.deepEquals(this.messages, other.messages) &&
            java.util.Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            java.util.Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            java.util.Objects.deepEquals(this.parcels, other.parcels) &&
            java.util.Objects.deepEquals(this.rates, other.rates) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            extra,
            metadata,
            shipmentDate,
            addressFrom,
            addressReturn,
            addressTo,
            carrierAccounts,
            customsDeclaration,
            messages,
            objectCreated,
            objectId,
            objectOwner,
            objectUpdated,
            parcels,
            rates,
            status,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Shipment.class,
                "extra", extra,
                "metadata", metadata,
                "shipmentDate", shipmentDate,
                "addressFrom", addressFrom,
                "addressReturn", addressReturn,
                "addressTo", addressTo,
                "carrierAccounts", carrierAccounts,
                "customsDeclaration", customsDeclaration,
                "messages", messages,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectUpdated", objectUpdated,
                "parcels", parcels,
                "rates", rates,
                "status", status,
                "test", test);
    }
    
    public final static class Builder {
 
        private Optional<? extends ShipmentExtra> extra = Optional.empty();
 
        private String metadata;
 
        private Optional<? extends String> shipmentDate = Optional.empty();
 
        private Address addressFrom;
 
        private Optional<? extends Address> addressReturn = Optional.empty();
 
        private Address addressTo;
 
        private java.util.List<String> carrierAccounts;
 
        private Optional<? extends CustomsDeclaration> customsDeclaration = Optional.empty();
 
        private java.util.List<ResponseMessage> messages;
 
        private OffsetDateTime objectCreated;
 
        private String objectId;
 
        private String objectOwner;
 
        private OffsetDateTime objectUpdated;
 
        private java.util.List<Parcel> parcels;
 
        private java.util.List<Rate> rates;
 
        private ShipmentStatus status;
 
        private Optional<? extends Boolean> test = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An object holding optional extra services to be requested.
         */
        public Builder extra(ShipmentExtra extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = Optional.ofNullable(extra);
            return this;
        }

        /**
         * An object holding optional extra services to be requested.
         */
        public Builder extra(Optional<? extends ShipmentExtra> extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = extra;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`. 
         * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
         * be in the future, on a working day, or similar.
         */
        public Builder shipmentDate(String shipmentDate) {
            Utils.checkNotNull(shipmentDate, "shipmentDate");
            this.shipmentDate = Optional.ofNullable(shipmentDate);
            return this;
        }

        /**
         * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`. 
         * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
         * be in the future, on a working day, or similar.
         */
        public Builder shipmentDate(Optional<? extends String> shipmentDate) {
            Utils.checkNotNull(shipmentDate, "shipmentDate");
            this.shipmentDate = shipmentDate;
            return this;
        }

        /**
         * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the sender / seller. Will be returned expanded by default.
         */
        public Builder addressFrom(Address addressFrom) {
            Utils.checkNotNull(addressFrom, "addressFrom");
            this.addressFrom = addressFrom;
            return this;
        }

        /**
         * ID of the Address object where the shipment will be sent back to if it is not delivered 
         * (Only available for UPS, USPS, and Fedex shipments). &lt;br/&gt; 
         * If this field is not set, your shipments will be returned to the address_from.
         */
        public Builder addressReturn(Address addressReturn) {
            Utils.checkNotNull(addressReturn, "addressReturn");
            this.addressReturn = Optional.ofNullable(addressReturn);
            return this;
        }

        /**
         * ID of the Address object where the shipment will be sent back to if it is not delivered 
         * (Only available for UPS, USPS, and Fedex shipments). &lt;br/&gt; 
         * If this field is not set, your shipments will be returned to the address_from.
         */
        public Builder addressReturn(Optional<? extends Address> addressReturn) {
            Utils.checkNotNull(addressReturn, "addressReturn");
            this.addressReturn = addressReturn;
            return this;
        }

        /**
         * &lt;a href="#tag/Addresses"&gt;Address&lt;/a&gt; object of the recipient / buyer. Will be returned expanded by default.
         */
        public Builder addressTo(Address addressTo) {
            Utils.checkNotNull(addressTo, "addressTo");
            this.addressTo = addressTo;
            return this;
        }

        /**
         * An array of object_ids of the carrier account objects to be used for getting shipping rates for this shipment. 
         * If no carrier account object_ids are set in this field, Shippo will attempt to generate rates using all the 
         * carrier accounts that have the `active` field set.
         */
        public Builder carrierAccounts(java.util.List<String> carrierAccounts) {
            Utils.checkNotNull(carrierAccounts, "carrierAccounts");
            this.carrierAccounts = carrierAccounts;
            return this;
        }

        public Builder customsDeclaration(CustomsDeclaration customsDeclaration) {
            Utils.checkNotNull(customsDeclaration, "customsDeclaration");
            this.customsDeclaration = Optional.ofNullable(customsDeclaration);
            return this;
        }

        public Builder customsDeclaration(Optional<? extends CustomsDeclaration> customsDeclaration) {
            Utils.checkNotNull(customsDeclaration, "customsDeclaration");
            this.customsDeclaration = customsDeclaration;
            return this;
        }

        public Builder messages(java.util.List<ResponseMessage> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }

        /**
         * Date and time of Shipment creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given Shipment object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the Shipment object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Date and time of last Shipment update.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * List of Parcel objects to be shipped.
         */
        public Builder parcels(java.util.List<Parcel> parcels) {
            Utils.checkNotNull(parcels, "parcels");
            this.parcels = parcels;
            return this;
        }

        /**
         * An array with all available rates. If &lt;code&gt;async&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt; in the request,
         * this will be populated with all available rates in the response. Otherwise rates will be created
         * asynchronously and this array will initially be empty.
         */
        public Builder rates(java.util.List<Rate> rates) {
            Utils.checkNotNull(rates, "rates");
            this.rates = rates;
            return this;
        }

        /**
         * `Waiting` shipments have been successfully submitted but not yet been processed. 
         * `Queued` shipments are currently being processed. 
         * `Success` shipments have been processed successfully, meaning that rate generation has concluded. 
         * `Error` does not occur currently and is reserved for future use.
         */
        public Builder status(ShipmentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<? extends Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public Shipment build() {
            return new Shipment(
                extra,
                metadata,
                shipmentDate,
                addressFrom,
                addressReturn,
                addressTo,
                carrierAccounts,
                customsDeclaration,
                messages,
                objectCreated,
                objectId,
                objectOwner,
                objectUpdated,
                parcels,
                rates,
                status,
                test);
        }
    }
}

