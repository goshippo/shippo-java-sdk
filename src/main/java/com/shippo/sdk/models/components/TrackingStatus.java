/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

/**
 * TrackingStatus - The latest tracking information of this shipment.
 */

public class TrackingStatus {

    /**
     * An object containing zip, city, state and country information of the tracking event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<? extends TrackingStatusLocationBase> location;

    @JsonProperty("object_created")
    private OffsetDateTime objectCreated;

    @JsonProperty("object_id")
    private String objectId;

    @JsonProperty("object_updated")
    private OffsetDateTime objectUpdated;

    /**
     * Indicates the high level status of the shipment.
     */
    @JsonProperty("status")
    private TrackingStatusEnum status;

    /**
     * A finer-grained classification of the tracking event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("substatus")
    private Optional<? extends TrackingStatusSubstatus> substatus;

    /**
     * Date and time when the carrier scanned this tracking event. This is displayed in UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_date")
    private Optional<OffsetDateTime> statusDate;

    /**
     * The human-readable description of the status.
     */
    @JsonProperty("status_details")
    private String statusDetails;

    @JsonCreator
    public TrackingStatus(
            @JsonProperty("location") Optional<? extends TrackingStatusLocationBase> location,
            @JsonProperty("object_created") OffsetDateTime objectCreated,
            @JsonProperty("object_id") String objectId,
            @JsonProperty("object_updated") OffsetDateTime objectUpdated,
            @JsonProperty("status") TrackingStatusEnum status,
            @JsonProperty("substatus") Optional<? extends TrackingStatusSubstatus> substatus,
            @JsonProperty("status_date") Optional<OffsetDateTime> statusDate,
            @JsonProperty("status_details") String statusDetails) {
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(substatus, "substatus");
        Utils.checkNotNull(statusDate, "statusDate");
        Utils.checkNotNull(statusDetails, "statusDetails");
        this.location = location;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectUpdated = objectUpdated;
        this.status = status;
        this.substatus = substatus;
        this.statusDate = statusDate;
        this.statusDetails = statusDetails;
    }
    
    public TrackingStatus(
            OffsetDateTime objectCreated,
            String objectId,
            OffsetDateTime objectUpdated,
            TrackingStatusEnum status,
            String statusDetails) {
        this(Optional.empty(), objectCreated, objectId, objectUpdated, status, Optional.empty(), Optional.empty(), statusDetails);
    }

    /**
     * An object containing zip, city, state and country information of the tracking event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TrackingStatusLocationBase> location() {
        return (Optional<TrackingStatusLocationBase>) location;
    }

    @JsonIgnore
    public OffsetDateTime objectCreated() {
        return objectCreated;
    }

    @JsonIgnore
    public String objectId() {
        return objectId;
    }

    @JsonIgnore
    public OffsetDateTime objectUpdated() {
        return objectUpdated;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    @JsonIgnore
    public TrackingStatusEnum status() {
        return status;
    }

    /**
     * A finer-grained classification of the tracking event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TrackingStatusSubstatus> substatus() {
        return (Optional<TrackingStatusSubstatus>) substatus;
    }

    /**
     * Date and time when the carrier scanned this tracking event. This is displayed in UTC.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> statusDate() {
        return statusDate;
    }

    /**
     * The human-readable description of the status.
     */
    @JsonIgnore
    public String statusDetails() {
        return statusDetails;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An object containing zip, city, state and country information of the tracking event.
     */
    public TrackingStatus withLocation(TrackingStatusLocationBase location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    /**
     * An object containing zip, city, state and country information of the tracking event.
     */
    public TrackingStatus withLocation(Optional<? extends TrackingStatusLocationBase> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public TrackingStatus withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    public TrackingStatus withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    public TrackingStatus withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * Indicates the high level status of the shipment.
     */
    public TrackingStatus withStatus(TrackingStatusEnum status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * A finer-grained classification of the tracking event.
     */
    public TrackingStatus withSubstatus(TrackingStatusSubstatus substatus) {
        Utils.checkNotNull(substatus, "substatus");
        this.substatus = Optional.ofNullable(substatus);
        return this;
    }

    /**
     * A finer-grained classification of the tracking event.
     */
    public TrackingStatus withSubstatus(Optional<? extends TrackingStatusSubstatus> substatus) {
        Utils.checkNotNull(substatus, "substatus");
        this.substatus = substatus;
        return this;
    }

    /**
     * Date and time when the carrier scanned this tracking event. This is displayed in UTC.
     */
    public TrackingStatus withStatusDate(OffsetDateTime statusDate) {
        Utils.checkNotNull(statusDate, "statusDate");
        this.statusDate = Optional.ofNullable(statusDate);
        return this;
    }

    /**
     * Date and time when the carrier scanned this tracking event. This is displayed in UTC.
     */
    public TrackingStatus withStatusDate(Optional<OffsetDateTime> statusDate) {
        Utils.checkNotNull(statusDate, "statusDate");
        this.statusDate = statusDate;
        return this;
    }

    /**
     * The human-readable description of the status.
     */
    public TrackingStatus withStatusDetails(String statusDetails) {
        Utils.checkNotNull(statusDetails, "statusDetails");
        this.statusDetails = statusDetails;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrackingStatus other = (TrackingStatus) o;
        return 
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.substatus, other.substatus) &&
            Objects.deepEquals(this.statusDate, other.statusDate) &&
            Objects.deepEquals(this.statusDetails, other.statusDetails);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            location,
            objectCreated,
            objectId,
            objectUpdated,
            status,
            substatus,
            statusDate,
            statusDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TrackingStatus.class,
                "location", location,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectUpdated", objectUpdated,
                "status", status,
                "substatus", substatus,
                "statusDate", statusDate,
                "statusDetails", statusDetails);
    }
    
    public final static class Builder {
 
        private Optional<? extends TrackingStatusLocationBase> location = Optional.empty();
 
        private OffsetDateTime objectCreated;
 
        private String objectId;
 
        private OffsetDateTime objectUpdated;
 
        private TrackingStatusEnum status;
 
        private Optional<? extends TrackingStatusSubstatus> substatus = Optional.empty();
 
        private Optional<OffsetDateTime> statusDate = Optional.empty();
 
        private String statusDetails;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An object containing zip, city, state and country information of the tracking event.
         */
        public Builder location(TrackingStatusLocationBase location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        /**
         * An object containing zip, city, state and country information of the tracking event.
         */
        public Builder location(Optional<? extends TrackingStatusLocationBase> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * Indicates the high level status of the shipment.
         */
        public Builder status(TrackingStatusEnum status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * A finer-grained classification of the tracking event.
         */
        public Builder substatus(TrackingStatusSubstatus substatus) {
            Utils.checkNotNull(substatus, "substatus");
            this.substatus = Optional.ofNullable(substatus);
            return this;
        }

        /**
         * A finer-grained classification of the tracking event.
         */
        public Builder substatus(Optional<? extends TrackingStatusSubstatus> substatus) {
            Utils.checkNotNull(substatus, "substatus");
            this.substatus = substatus;
            return this;
        }

        /**
         * Date and time when the carrier scanned this tracking event. This is displayed in UTC.
         */
        public Builder statusDate(OffsetDateTime statusDate) {
            Utils.checkNotNull(statusDate, "statusDate");
            this.statusDate = Optional.ofNullable(statusDate);
            return this;
        }

        /**
         * Date and time when the carrier scanned this tracking event. This is displayed in UTC.
         */
        public Builder statusDate(Optional<OffsetDateTime> statusDate) {
            Utils.checkNotNull(statusDate, "statusDate");
            this.statusDate = statusDate;
            return this;
        }

        /**
         * The human-readable description of the status.
         */
        public Builder statusDetails(String statusDetails) {
            Utils.checkNotNull(statusDetails, "statusDetails");
            this.statusDetails = statusDetails;
            return this;
        }
        
        public TrackingStatus build() {
            return new TrackingStatus(
                location,
                objectCreated,
                objectId,
                objectUpdated,
                status,
                substatus,
                statusDate,
                statusDetails);
        }
    }
}

