/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class Webhook {

    /**
     * Type of event that triggers the webhook.
     */
    @JsonProperty("event")
    private String event;

    /**
     * URL webhook events are sent to.
     */
    @JsonProperty("url")
    private String url;

    /**
     * Determines whether the webhook is active or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<? extends Boolean> active;

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_test")
    private Optional<? extends Boolean> isTest;

    /**
     * Timestamp of the creation of the webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<? extends OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<? extends String> objectId;

    /**
     * Timestamp of the last update of the webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<? extends OffsetDateTime> objectUpdated;

    /**
     * Username of the user who created the webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<? extends String> objectOwner;

    @JsonCreator
    public Webhook(
            @JsonProperty("event") String event,
            @JsonProperty("url") String url,
            @JsonProperty("active") Optional<? extends Boolean> active,
            @JsonProperty("is_test") Optional<? extends Boolean> isTest,
            @JsonProperty("object_created") Optional<? extends OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<? extends String> objectId,
            @JsonProperty("object_updated") Optional<? extends OffsetDateTime> objectUpdated,
            @JsonProperty("object_owner") Optional<? extends String> objectOwner) {
        Utils.checkNotNull(event, "event");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(isTest, "isTest");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.event = event;
        this.url = url;
        this.active = active;
        this.isTest = isTest;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectUpdated = objectUpdated;
        this.objectOwner = objectOwner;
    }
    
    public Webhook(
            String event,
            String url) {
        this(event, url, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Type of event that triggers the webhook.
     */
    @JsonIgnore
    public String event() {
        return event;
    }

    /**
     * URL webhook events are sent to.
     */
    @JsonIgnore
    public String url() {
        return url;
    }

    /**
     * Determines whether the webhook is active or not.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> active() {
        return (Optional<Boolean>) active;
    }

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> isTest() {
        return (Optional<Boolean>) isTest;
    }

    /**
     * Timestamp of the creation of the webhook.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return (Optional<OffsetDateTime>) objectCreated;
    }

    /**
     * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> objectId() {
        return (Optional<String>) objectId;
    }

    /**
     * Timestamp of the last update of the webhook.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return (Optional<OffsetDateTime>) objectUpdated;
    }

    /**
     * Username of the user who created the webhook.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> objectOwner() {
        return (Optional<String>) objectOwner;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of event that triggers the webhook.
     */
    public Webhook withEvent(String event) {
        Utils.checkNotNull(event, "event");
        this.event = event;
        return this;
    }

    /**
     * URL webhook events are sent to.
     */
    public Webhook withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Determines whether the webhook is active or not.
     */
    public Webhook withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Determines whether the webhook is active or not.
     */
    public Webhook withActive(Optional<? extends Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    public Webhook withIsTest(boolean isTest) {
        Utils.checkNotNull(isTest, "isTest");
        this.isTest = Optional.ofNullable(isTest);
        return this;
    }

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    public Webhook withIsTest(Optional<? extends Boolean> isTest) {
        Utils.checkNotNull(isTest, "isTest");
        this.isTest = isTest;
        return this;
    }

    /**
     * Timestamp of the creation of the webhook.
     */
    public Webhook withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Timestamp of the creation of the webhook.
     */
    public Webhook withObjectCreated(Optional<? extends OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
     */
    public Webhook withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
     */
    public Webhook withObjectId(Optional<? extends String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Timestamp of the last update of the webhook.
     */
    public Webhook withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Timestamp of the last update of the webhook.
     */
    public Webhook withObjectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * Username of the user who created the webhook.
     */
    public Webhook withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the webhook.
     */
    public Webhook withObjectOwner(Optional<? extends String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Webhook other = (Webhook) o;
        return 
            java.util.Objects.deepEquals(this.event, other.event) &&
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.active, other.active) &&
            java.util.Objects.deepEquals(this.isTest, other.isTest) &&
            java.util.Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            java.util.Objects.deepEquals(this.objectOwner, other.objectOwner);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            event,
            url,
            active,
            isTest,
            objectCreated,
            objectId,
            objectUpdated,
            objectOwner);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Webhook.class,
                "event", event,
                "url", url,
                "active", active,
                "isTest", isTest,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectUpdated", objectUpdated,
                "objectOwner", objectOwner);
    }
    
    public final static class Builder {
 
        private String event;
 
        private String url;
 
        private Optional<? extends Boolean> active = Optional.empty();
 
        private Optional<? extends Boolean> isTest = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<? extends String> objectId = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<? extends String> objectOwner = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of event that triggers the webhook.
         */
        public Builder event(String event) {
            Utils.checkNotNull(event, "event");
            this.event = event;
            return this;
        }

        /**
         * URL webhook events are sent to.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Determines whether the webhook is active or not.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Determines whether the webhook is active or not.
         */
        public Builder active(Optional<? extends Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * Determines whether the webhook is a test webhook or not.
         */
        public Builder isTest(boolean isTest) {
            Utils.checkNotNull(isTest, "isTest");
            this.isTest = Optional.ofNullable(isTest);
            return this;
        }

        /**
         * Determines whether the webhook is a test webhook or not.
         */
        public Builder isTest(Optional<? extends Boolean> isTest) {
            Utils.checkNotNull(isTest, "isTest");
            this.isTest = isTest;
            return this;
        }

        /**
         * Timestamp of the creation of the webhook.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Timestamp of the creation of the webhook.
         */
        public Builder objectCreated(Optional<? extends OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
         */
        public Builder objectId(Optional<? extends String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Timestamp of the last update of the webhook.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Timestamp of the last update of the webhook.
         */
        public Builder objectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * Username of the user who created the webhook.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the webhook.
         */
        public Builder objectOwner(Optional<? extends String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }
        
        public Webhook build() {
            return new Webhook(
                event,
                url,
                active,
                isTest,
                objectCreated,
                objectId,
                objectUpdated,
                objectOwner);
        }
    }
}

