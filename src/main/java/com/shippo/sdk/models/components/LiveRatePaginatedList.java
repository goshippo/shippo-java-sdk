/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class LiveRatePaginatedList {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("next")
    private Optional<? extends String> next;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous")
    private Optional<? extends String> previous;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<? extends Long> count;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends java.util.List<LiveRate>> results;

    @JsonCreator
    public LiveRatePaginatedList(
            @JsonProperty("next") Optional<? extends String> next,
            @JsonProperty("previous") Optional<? extends String> previous,
            @JsonProperty("count") Optional<? extends Long> count,
            @JsonProperty("results") Optional<? extends java.util.List<LiveRate>> results) {
        Utils.checkNotNull(next, "next");
        Utils.checkNotNull(previous, "previous");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(results, "results");
        this.next = next;
        this.previous = previous;
        this.count = count;
        this.results = results;
    }
    
    public LiveRatePaginatedList() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> next() {
        return (Optional<String>) next;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> previous() {
        return (Optional<String>) previous;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> count() {
        return (Optional<Long>) count;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<LiveRate>> results() {
        return (Optional<java.util.List<LiveRate>>) results;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public LiveRatePaginatedList withNext(String next) {
        Utils.checkNotNull(next, "next");
        this.next = Optional.ofNullable(next);
        return this;
    }

    public LiveRatePaginatedList withNext(Optional<? extends String> next) {
        Utils.checkNotNull(next, "next");
        this.next = next;
        return this;
    }

    public LiveRatePaginatedList withPrevious(String previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = Optional.ofNullable(previous);
        return this;
    }

    public LiveRatePaginatedList withPrevious(Optional<? extends String> previous) {
        Utils.checkNotNull(previous, "previous");
        this.previous = previous;
        return this;
    }

    public LiveRatePaginatedList withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    public LiveRatePaginatedList withCount(Optional<? extends Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public LiveRatePaginatedList withResults(java.util.List<LiveRate> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public LiveRatePaginatedList withResults(Optional<? extends java.util.List<LiveRate>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LiveRatePaginatedList other = (LiveRatePaginatedList) o;
        return 
            java.util.Objects.deepEquals(this.next, other.next) &&
            java.util.Objects.deepEquals(this.previous, other.previous) &&
            java.util.Objects.deepEquals(this.count, other.count) &&
            java.util.Objects.deepEquals(this.results, other.results);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            next,
            previous,
            count,
            results);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LiveRatePaginatedList.class,
                "next", next,
                "previous", previous,
                "count", count,
                "results", results);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> next = Optional.empty();
 
        private Optional<? extends String> previous = Optional.empty();
 
        private Optional<? extends Long> count = Optional.empty();
 
        private Optional<? extends java.util.List<LiveRate>> results = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder next(String next) {
            Utils.checkNotNull(next, "next");
            this.next = Optional.ofNullable(next);
            return this;
        }

        public Builder next(Optional<? extends String> next) {
            Utils.checkNotNull(next, "next");
            this.next = next;
            return this;
        }

        public Builder previous(String previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = Optional.ofNullable(previous);
            return this;
        }

        public Builder previous(Optional<? extends String> previous) {
            Utils.checkNotNull(previous, "previous");
            this.previous = previous;
            return this;
        }

        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Optional<? extends Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public Builder results(java.util.List<LiveRate> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends java.util.List<LiveRate>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }
        
        public LiveRatePaginatedList build() {
            return new LiveRatePaginatedList(
                next,
                previous,
                count,
                results);
        }
    }
}

