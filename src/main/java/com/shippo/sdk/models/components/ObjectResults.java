/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
/**
 * ObjectResults - An object containing the following counts:&lt;br&gt;`creation_succeeded`&lt;br&gt;`creation_failed`&lt;br&gt;`purchase_succeeded`&lt;br&gt;`purchase_failed`
 */

public class ObjectResults {

    @JsonProperty("creation_failed")
    private long creationFailed;

    @JsonProperty("creation_succeeded")
    private long creationSucceeded;

    @JsonProperty("purchase_failed")
    private long purchaseFailed;

    @JsonProperty("purchase_succeeded")
    private long purchaseSucceeded;

    @JsonCreator
    public ObjectResults(
            @JsonProperty("creation_failed") long creationFailed,
            @JsonProperty("creation_succeeded") long creationSucceeded,
            @JsonProperty("purchase_failed") long purchaseFailed,
            @JsonProperty("purchase_succeeded") long purchaseSucceeded) {
        Utils.checkNotNull(creationFailed, "creationFailed");
        Utils.checkNotNull(creationSucceeded, "creationSucceeded");
        Utils.checkNotNull(purchaseFailed, "purchaseFailed");
        Utils.checkNotNull(purchaseSucceeded, "purchaseSucceeded");
        this.creationFailed = creationFailed;
        this.creationSucceeded = creationSucceeded;
        this.purchaseFailed = purchaseFailed;
        this.purchaseSucceeded = purchaseSucceeded;
    }

    @JsonIgnore
    public long creationFailed() {
        return creationFailed;
    }

    @JsonIgnore
    public long creationSucceeded() {
        return creationSucceeded;
    }

    @JsonIgnore
    public long purchaseFailed() {
        return purchaseFailed;
    }

    @JsonIgnore
    public long purchaseSucceeded() {
        return purchaseSucceeded;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ObjectResults withCreationFailed(long creationFailed) {
        Utils.checkNotNull(creationFailed, "creationFailed");
        this.creationFailed = creationFailed;
        return this;
    }

    public ObjectResults withCreationSucceeded(long creationSucceeded) {
        Utils.checkNotNull(creationSucceeded, "creationSucceeded");
        this.creationSucceeded = creationSucceeded;
        return this;
    }

    public ObjectResults withPurchaseFailed(long purchaseFailed) {
        Utils.checkNotNull(purchaseFailed, "purchaseFailed");
        this.purchaseFailed = purchaseFailed;
        return this;
    }

    public ObjectResults withPurchaseSucceeded(long purchaseSucceeded) {
        Utils.checkNotNull(purchaseSucceeded, "purchaseSucceeded");
        this.purchaseSucceeded = purchaseSucceeded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ObjectResults other = (ObjectResults) o;
        return 
            java.util.Objects.deepEquals(this.creationFailed, other.creationFailed) &&
            java.util.Objects.deepEquals(this.creationSucceeded, other.creationSucceeded) &&
            java.util.Objects.deepEquals(this.purchaseFailed, other.purchaseFailed) &&
            java.util.Objects.deepEquals(this.purchaseSucceeded, other.purchaseSucceeded);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            creationFailed,
            creationSucceeded,
            purchaseFailed,
            purchaseSucceeded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ObjectResults.class,
                "creationFailed", creationFailed,
                "creationSucceeded", creationSucceeded,
                "purchaseFailed", purchaseFailed,
                "purchaseSucceeded", purchaseSucceeded);
    }
    
    public final static class Builder {
 
        private Long creationFailed;
 
        private Long creationSucceeded;
 
        private Long purchaseFailed;
 
        private Long purchaseSucceeded;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder creationFailed(long creationFailed) {
            Utils.checkNotNull(creationFailed, "creationFailed");
            this.creationFailed = creationFailed;
            return this;
        }

        public Builder creationSucceeded(long creationSucceeded) {
            Utils.checkNotNull(creationSucceeded, "creationSucceeded");
            this.creationSucceeded = creationSucceeded;
            return this;
        }

        public Builder purchaseFailed(long purchaseFailed) {
            Utils.checkNotNull(purchaseFailed, "purchaseFailed");
            this.purchaseFailed = purchaseFailed;
            return this;
        }

        public Builder purchaseSucceeded(long purchaseSucceeded) {
            Utils.checkNotNull(purchaseSucceeded, "purchaseSucceeded");
            this.purchaseSucceeded = purchaseSucceeded;
            return this;
        }
        
        public ObjectResults build() {
            return new ObjectResults(
                creationFailed,
                creationSucceeded,
                purchaseFailed,
                purchaseSucceeded);
        }
    }
}

