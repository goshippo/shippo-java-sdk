/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * AddressCreateRequest - Address represents the address as retrieved from the database
 */

public class AddressCreateRequest {

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Company Name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<? extends String> company;

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street1")
    private Optional<? extends String> street1;

    /**
     * Second street line, 35 character limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street2")
    private Optional<? extends String> street2;

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street3")
    private Optional<? extends String> street3;

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_no")
    private Optional<? extends String> streetNo;

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<? extends String> city;

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends String> state;

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private Optional<? extends String> zip;

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    @JsonProperty("country")
    private String country;

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<? extends String> phone;

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends String> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_residential")
    private Optional<? extends Boolean> isResidential;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    /**
     * Set to true to validate Address object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validate")
    private Optional<? extends Boolean> validate;

    @JsonCreator
    public AddressCreateRequest(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("company") Optional<? extends String> company,
            @JsonProperty("street1") Optional<? extends String> street1,
            @JsonProperty("street2") Optional<? extends String> street2,
            @JsonProperty("street3") Optional<? extends String> street3,
            @JsonProperty("street_no") Optional<? extends String> streetNo,
            @JsonProperty("city") Optional<? extends String> city,
            @JsonProperty("state") Optional<? extends String> state,
            @JsonProperty("zip") Optional<? extends String> zip,
            @JsonProperty("country") String country,
            @JsonProperty("phone") Optional<? extends String> phone,
            @JsonProperty("email") Optional<? extends String> email,
            @JsonProperty("is_residential") Optional<? extends Boolean> isResidential,
            @JsonProperty("metadata") Optional<? extends String> metadata,
            @JsonProperty("validate") Optional<? extends Boolean> validate) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(street3, "street3");
        Utils.checkNotNull(streetNo, "streetNo");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(isResidential, "isResidential");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(validate, "validate");
        this.name = name;
        this.company = company;
        this.street1 = street1;
        this.street2 = street2;
        this.street3 = street3;
        this.streetNo = streetNo;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.phone = phone;
        this.email = email;
        this.isResidential = isResidential;
        this.metadata = metadata;
        this.validate = validate;
    }
    
    public AddressCreateRequest(
            String country) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), country, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * Company Name
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> company() {
        return (Optional<String>) company;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> street1() {
        return (Optional<String>) street1;
    }

    /**
     * Second street line, 35 character limit.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> street2() {
        return (Optional<String>) street2;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> street3() {
        return (Optional<String>) street3;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> streetNo() {
        return (Optional<String>) streetNo;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> city() {
        return (Optional<String>) city;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> state() {
        return (Optional<String>) state;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> zip() {
        return (Optional<String>) zip;
    }

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    @JsonIgnore
    public String country() {
        return country;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> phone() {
        return (Optional<String>) phone;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> email() {
        return (Optional<String>) email;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> isResidential() {
        return (Optional<Boolean>) isResidential;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> metadata() {
        return (Optional<String>) metadata;
    }

    /**
     * Set to true to validate Address object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> validate() {
        return (Optional<Boolean>) validate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    public AddressCreateRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First and Last Name of the addressee
     */
    public AddressCreateRequest withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Company Name
     */
    public AddressCreateRequest withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    /**
     * Company Name
     */
    public AddressCreateRequest withCompany(Optional<? extends String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    public AddressCreateRequest withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = Optional.ofNullable(street1);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    public AddressCreateRequest withStreet1(Optional<? extends String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public AddressCreateRequest withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = Optional.ofNullable(street2);
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public AddressCreateRequest withStreet2(Optional<? extends String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public AddressCreateRequest withStreet3(String street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = Optional.ofNullable(street3);
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public AddressCreateRequest withStreet3(Optional<? extends String> street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = street3;
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public AddressCreateRequest withStreetNo(String streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = Optional.ofNullable(streetNo);
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public AddressCreateRequest withStreetNo(Optional<? extends String> streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = streetNo;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    public AddressCreateRequest withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    public AddressCreateRequest withCity(Optional<? extends String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    public AddressCreateRequest withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    public AddressCreateRequest withState(Optional<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    public AddressCreateRequest withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = Optional.ofNullable(zip);
        return this;
    }

    /**
     * **required for purchase**&lt;br&gt;
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
     * accurate Rates.
     */
    public AddressCreateRequest withZip(Optional<? extends String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    public AddressCreateRequest withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public AddressCreateRequest withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public AddressCreateRequest withPhone(Optional<? extends String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public AddressCreateRequest withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public AddressCreateRequest withEmail(Optional<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public AddressCreateRequest withIsResidential(boolean isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = Optional.ofNullable(isResidential);
        return this;
    }

    public AddressCreateRequest withIsResidential(Optional<? extends Boolean> isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = isResidential;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public AddressCreateRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want 
     * to attach to the object.
     */
    public AddressCreateRequest withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Set to true to validate Address object.
     */
    public AddressCreateRequest withValidate(boolean validate) {
        Utils.checkNotNull(validate, "validate");
        this.validate = Optional.ofNullable(validate);
        return this;
    }

    /**
     * Set to true to validate Address object.
     */
    public AddressCreateRequest withValidate(Optional<? extends Boolean> validate) {
        Utils.checkNotNull(validate, "validate");
        this.validate = validate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddressCreateRequest other = (AddressCreateRequest) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.company, other.company) &&
            java.util.Objects.deepEquals(this.street1, other.street1) &&
            java.util.Objects.deepEquals(this.street2, other.street2) &&
            java.util.Objects.deepEquals(this.street3, other.street3) &&
            java.util.Objects.deepEquals(this.streetNo, other.streetNo) &&
            java.util.Objects.deepEquals(this.city, other.city) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.zip, other.zip) &&
            java.util.Objects.deepEquals(this.country, other.country) &&
            java.util.Objects.deepEquals(this.phone, other.phone) &&
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.isResidential, other.isResidential) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.validate, other.validate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            company,
            street1,
            street2,
            street3,
            streetNo,
            city,
            state,
            zip,
            country,
            phone,
            email,
            isResidential,
            metadata,
            validate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddressCreateRequest.class,
                "name", name,
                "company", company,
                "street1", street1,
                "street2", street2,
                "street3", street3,
                "streetNo", streetNo,
                "city", city,
                "state", state,
                "zip", zip,
                "country", country,
                "phone", phone,
                "email", email,
                "isResidential", isResidential,
                "metadata", metadata,
                "validate", validate);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> company = Optional.empty();
 
        private Optional<? extends String> street1 = Optional.empty();
 
        private Optional<? extends String> street2 = Optional.empty();
 
        private Optional<? extends String> street3 = Optional.empty();
 
        private Optional<? extends String> streetNo = Optional.empty();
 
        private Optional<? extends String> city = Optional.empty();
 
        private Optional<? extends String> state = Optional.empty();
 
        private Optional<? extends String> zip = Optional.empty();
 
        private String country;
 
        private Optional<? extends String> phone = Optional.empty();
 
        private Optional<? extends String> email = Optional.empty();
 
        private Optional<? extends Boolean> isResidential = Optional.empty();
 
        private Optional<? extends String> metadata = Optional.empty();
 
        private Optional<? extends Boolean> validate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First and Last Name of the addressee
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First and Last Name of the addressee
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(Optional<? extends String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = Optional.ofNullable(street1);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
         */
        public Builder street1(Optional<? extends String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = Optional.ofNullable(street2);
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(Optional<? extends String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(String street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = Optional.ofNullable(street3);
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(Optional<? extends String> street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = street3;
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(String streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = Optional.ofNullable(streetNo);
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(Optional<? extends String> streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = streetNo;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
         * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
         * or a ZIP code (see below), if known, it will yield more accurate results.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates. 
         * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state 
         * or a ZIP code (see below), if known, it will yield more accurate results.
         */
        public Builder city(Optional<? extends String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * **required for purchase for some countries**&lt;br&gt;
         * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
         * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
         * only accept two or three character state abbreviations.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * **required for purchase for some countries**&lt;br&gt;
         * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
         * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
         * only accept two or three character state abbreviations.
         */
        public Builder state(Optional<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
         * accurate Rates.
         */
        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        /**
         * **required for purchase**&lt;br&gt;
         * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more 
         * accurate Rates.
         */
        public Builder zip(Optional<? extends String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        /**
         * Example: `US` or `DE`. All accepted values can be found on the 
         * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
         * Sending a country is always required.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(Optional<? extends String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(Optional<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder isResidential(boolean isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = Optional.ofNullable(isResidential);
            return this;
        }

        public Builder isResidential(Optional<? extends Boolean> isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = isResidential;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want 
         * to attach to the object.
         */
        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Set to true to validate Address object.
         */
        public Builder validate(boolean validate) {
            Utils.checkNotNull(validate, "validate");
            this.validate = Optional.ofNullable(validate);
            return this;
        }

        /**
         * Set to true to validate Address object.
         */
        public Builder validate(Optional<? extends Boolean> validate) {
            Utils.checkNotNull(validate, "validate");
            this.validate = validate;
            return this;
        }
        
        public AddressCreateRequest build() {
            return new AddressCreateRequest(
                name,
                company,
                street1,
                street2,
                street3,
                streetNo,
                city,
                state,
                zip,
                country,
                phone,
                email,
                isResidential,
                metadata,
                validate);
        }
    }
}

