/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * CustomerReference - Specify the reference field on the label (FedEx and UPS only).
 */

public class CustomerReference {

    /**
     * Custom prefix for customer reference field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefix")
    private Optional<? extends String> prefix;

    /**
     * Optional text to be printed on the shipping label for customer reference. Up to 40 characters. If 
     * this is provided, reference_1 will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends String> value;

    /**
     * Order UPS reference fields are printed on ZPL labels. For UPS shipments, if you choose to set `ref_sort` for one reference, you must set `ref_sort` for all other supported UPS references using unique integers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref_sort")
    private Optional<? extends Long> refSort;

    @JsonCreator
    public CustomerReference(
            @JsonProperty("prefix") Optional<? extends String> prefix,
            @JsonProperty("value") Optional<? extends String> value,
            @JsonProperty("ref_sort") Optional<? extends Long> refSort) {
        Utils.checkNotNull(prefix, "prefix");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(refSort, "refSort");
        this.prefix = prefix;
        this.value = value;
        this.refSort = refSort;
    }
    
    public CustomerReference() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Custom prefix for customer reference field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> prefix() {
        return (Optional<String>) prefix;
    }

    /**
     * Optional text to be printed on the shipping label for customer reference. Up to 40 characters. If 
     * this is provided, reference_1 will be ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> value() {
        return (Optional<String>) value;
    }

    /**
     * Order UPS reference fields are printed on ZPL labels. For UPS shipments, if you choose to set `ref_sort` for one reference, you must set `ref_sort` for all other supported UPS references using unique integers.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> refSort() {
        return (Optional<Long>) refSort;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Custom prefix for customer reference field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    public CustomerReference withPrefix(String prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = Optional.ofNullable(prefix);
        return this;
    }

    /**
     * Custom prefix for customer reference field (ZPL labels only). Up to 11 characters, including trailing 
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    public CustomerReference withPrefix(Optional<? extends String> prefix) {
        Utils.checkNotNull(prefix, "prefix");
        this.prefix = prefix;
        return this;
    }

    /**
     * Optional text to be printed on the shipping label for customer reference. Up to 40 characters. If 
     * this is provided, reference_1 will be ignored.
     */
    public CustomerReference withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    /**
     * Optional text to be printed on the shipping label for customer reference. Up to 40 characters. If 
     * this is provided, reference_1 will be ignored.
     */
    public CustomerReference withValue(Optional<? extends String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * Order UPS reference fields are printed on ZPL labels. For UPS shipments, if you choose to set `ref_sort` for one reference, you must set `ref_sort` for all other supported UPS references using unique integers.
     */
    public CustomerReference withRefSort(long refSort) {
        Utils.checkNotNull(refSort, "refSort");
        this.refSort = Optional.ofNullable(refSort);
        return this;
    }

    /**
     * Order UPS reference fields are printed on ZPL labels. For UPS shipments, if you choose to set `ref_sort` for one reference, you must set `ref_sort` for all other supported UPS references using unique integers.
     */
    public CustomerReference withRefSort(Optional<? extends Long> refSort) {
        Utils.checkNotNull(refSort, "refSort");
        this.refSort = refSort;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomerReference other = (CustomerReference) o;
        return 
            java.util.Objects.deepEquals(this.prefix, other.prefix) &&
            java.util.Objects.deepEquals(this.value, other.value) &&
            java.util.Objects.deepEquals(this.refSort, other.refSort);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            prefix,
            value,
            refSort);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomerReference.class,
                "prefix", prefix,
                "value", value,
                "refSort", refSort);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> prefix = Optional.empty();
 
        private Optional<? extends String> value = Optional.empty();
 
        private Optional<? extends Long> refSort = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Custom prefix for customer reference field (ZPL labels only). Up to 11 characters, including trailing 
         * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
         * this property.
         */
        public Builder prefix(String prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = Optional.ofNullable(prefix);
            return this;
        }

        /**
         * Custom prefix for customer reference field (ZPL labels only). Up to 11 characters, including trailing 
         * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
         * this property.
         */
        public Builder prefix(Optional<? extends String> prefix) {
            Utils.checkNotNull(prefix, "prefix");
            this.prefix = prefix;
            return this;
        }

        /**
         * Optional text to be printed on the shipping label for customer reference. Up to 40 characters. If 
         * this is provided, reference_1 will be ignored.
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * Optional text to be printed on the shipping label for customer reference. Up to 40 characters. If 
         * this is provided, reference_1 will be ignored.
         */
        public Builder value(Optional<? extends String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * Order UPS reference fields are printed on ZPL labels. For UPS shipments, if you choose to set `ref_sort` for one reference, you must set `ref_sort` for all other supported UPS references using unique integers.
         */
        public Builder refSort(long refSort) {
            Utils.checkNotNull(refSort, "refSort");
            this.refSort = Optional.ofNullable(refSort);
            return this;
        }

        /**
         * Order UPS reference fields are printed on ZPL labels. For UPS shipments, if you choose to set `ref_sort` for one reference, you must set `ref_sort` for all other supported UPS references using unique integers.
         */
        public Builder refSort(Optional<? extends Long> refSort) {
            Utils.checkNotNull(refSort, "refSort");
            this.refSort = refSort;
            return this;
        }
        
        public CustomerReference build() {
            return new CustomerReference(
                prefix,
                value,
                refSort);
        }
    }
}

