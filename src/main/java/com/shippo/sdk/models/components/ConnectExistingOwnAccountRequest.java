/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ConnectExistingOwnAccountRequest {

    @JsonProperty("account_id")
    private String accountId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    @JsonProperty("carrier")
    private String carrier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    @JsonProperty("parameters")
    private ConnectExistingOwnAccountRequestParameters parameters;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<Boolean> test;

    @JsonCreator
    public ConnectExistingOwnAccountRequest(
            @JsonProperty("account_id") String accountId,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("carrier") String carrier,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("parameters") ConnectExistingOwnAccountRequestParameters parameters,
            @JsonProperty("test") Optional<Boolean> test) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(parameters, "parameters");
        Utils.checkNotNull(test, "test");
        this.accountId = accountId;
        this.active = active;
        this.carrier = carrier;
        this.metadata = metadata;
        this.parameters = parameters;
        this.test = test;
    }
    
    public ConnectExistingOwnAccountRequest(
            String accountId,
            String carrier,
            ConnectExistingOwnAccountRequestParameters parameters) {
        this(accountId, Optional.empty(), carrier, Optional.empty(), parameters, Optional.empty());
    }

    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    @JsonIgnore
    public String carrier() {
        return carrier;
    }

    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    @JsonIgnore
    public ConnectExistingOwnAccountRequestParameters parameters() {
        return parameters;
    }

    @JsonIgnore
    public Optional<Boolean> test() {
        return test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ConnectExistingOwnAccountRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public ConnectExistingOwnAccountRequest withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    public ConnectExistingOwnAccountRequest withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public ConnectExistingOwnAccountRequest withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    public ConnectExistingOwnAccountRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public ConnectExistingOwnAccountRequest withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public ConnectExistingOwnAccountRequest withParameters(ConnectExistingOwnAccountRequestParameters parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }

    public ConnectExistingOwnAccountRequest withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    public ConnectExistingOwnAccountRequest withTest(Optional<Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectExistingOwnAccountRequest other = (ConnectExistingOwnAccountRequest) o;
        return 
            Objects.deepEquals(this.accountId, other.accountId) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.carrier, other.carrier) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.parameters, other.parameters) &&
            Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountId,
            active,
            carrier,
            metadata,
            parameters,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectExistingOwnAccountRequest.class,
                "accountId", accountId,
                "active", active,
                "carrier", carrier,
                "metadata", metadata,
                "parameters", parameters,
                "test", test);
    }
    
    public final static class Builder {
 
        private String accountId;
 
        private Optional<Boolean> active = Optional.empty();
 
        private String carrier;
 
        private Optional<String> metadata = Optional.empty();
 
        private ConnectExistingOwnAccountRequestParameters parameters;
 
        private Optional<Boolean> test = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder parameters(ConnectExistingOwnAccountRequestParameters parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }

        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        public Builder test(Optional<Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public ConnectExistingOwnAccountRequest build() {
            return new ConnectExistingOwnAccountRequest(
                accountId,
                active,
                carrier,
                metadata,
                parameters,
                test);
        }
    }
}

