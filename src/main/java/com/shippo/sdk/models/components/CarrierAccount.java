/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class CarrierAccount {

    /**
     * Unique identifier of the account. Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; 
     * page for the `account_id` per carrier.&lt;br&gt; 
     * To protect account information, this field will be masked in any API response.
     */
    @JsonProperty("account_id")
    private String accountId;

    /**
     * Determines whether the account is active. When creating a shipment, if no `carrier_accounts` are explicitly 
     * passed Shippo will query all carrier accounts that have this field set. By default, this is set to True.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * Carrier token, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
     * Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; page for all supported carriers.
     */
    @JsonProperty("carrier")
    private String carrier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    private Optional<? extends CarrierAccountParameters> parameters;

    /**
     * Carrier name, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier_name")
    private Optional<? extends Object> carrierName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_shippo_account")
    private Optional<Boolean> isShippoAccount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<String> metadata;

    /**
     * Unique identifier of the carrier account object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<String> objectId;

    /**
     * Username of the user who created the carrier account object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<String> objectOwner;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_levels")
    private Optional<? extends List<CarrierAccountServiceLevel>> serviceLevels;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<Boolean> test;

    @JsonCreator
    public CarrierAccount(
            @JsonProperty("account_id") String accountId,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("carrier") String carrier,
            @JsonProperty("parameters") Optional<? extends CarrierAccountParameters> parameters,
            @JsonProperty("carrier_name") Optional<? extends Object> carrierName,
            @JsonProperty("is_shippo_account") Optional<Boolean> isShippoAccount,
            @JsonProperty("metadata") Optional<String> metadata,
            @JsonProperty("object_id") Optional<String> objectId,
            @JsonProperty("object_owner") Optional<String> objectOwner,
            @JsonProperty("service_levels") Optional<? extends List<CarrierAccountServiceLevel>> serviceLevels,
            @JsonProperty("test") Optional<Boolean> test) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(parameters, "parameters");
        Utils.checkNotNull(carrierName, "carrierName");
        Utils.checkNotNull(isShippoAccount, "isShippoAccount");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(serviceLevels, "serviceLevels");
        Utils.checkNotNull(test, "test");
        this.accountId = accountId;
        this.active = active;
        this.carrier = carrier;
        this.parameters = parameters;
        this.carrierName = carrierName;
        this.isShippoAccount = isShippoAccount;
        this.metadata = metadata;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.serviceLevels = serviceLevels;
        this.test = test;
    }
    
    public CarrierAccount(
            String accountId,
            String carrier) {
        this(accountId, Optional.empty(), carrier, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of the account. Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; 
     * page for the `account_id` per carrier.&lt;br&gt; 
     * To protect account information, this field will be masked in any API response.
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * Determines whether the account is active. When creating a shipment, if no `carrier_accounts` are explicitly 
     * passed Shippo will query all carrier accounts that have this field set. By default, this is set to True.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * Carrier token, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
     * Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; page for all supported carriers.
     */
    @JsonIgnore
    public String carrier() {
        return carrier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CarrierAccountParameters> parameters() {
        return (Optional<CarrierAccountParameters>) parameters;
    }

    /**
     * Carrier name, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> carrierName() {
        return (Optional<Object>) carrierName;
    }

    @JsonIgnore
    public Optional<Boolean> isShippoAccount() {
        return isShippoAccount;
    }

    @JsonIgnore
    public Optional<String> metadata() {
        return metadata;
    }

    /**
     * Unique identifier of the carrier account object.
     */
    @JsonIgnore
    public Optional<String> objectId() {
        return objectId;
    }

    /**
     * Username of the user who created the carrier account object.
     */
    @JsonIgnore
    public Optional<String> objectOwner() {
        return objectOwner;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CarrierAccountServiceLevel>> serviceLevels() {
        return (Optional<List<CarrierAccountServiceLevel>>) serviceLevels;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonIgnore
    public Optional<Boolean> test() {
        return test;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of the account. Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; 
     * page for the `account_id` per carrier.&lt;br&gt; 
     * To protect account information, this field will be masked in any API response.
     */
    public CarrierAccount withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * Determines whether the account is active. When creating a shipment, if no `carrier_accounts` are explicitly 
     * passed Shippo will query all carrier accounts that have this field set. By default, this is set to True.
     */
    public CarrierAccount withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Determines whether the account is active. When creating a shipment, if no `carrier_accounts` are explicitly 
     * passed Shippo will query all carrier accounts that have this field set. By default, this is set to True.
     */
    public CarrierAccount withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Carrier token, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
     * Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; page for all supported carriers.
     */
    public CarrierAccount withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    public CarrierAccount withParameters(CarrierAccountParameters parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = Optional.ofNullable(parameters);
        return this;
    }

    public CarrierAccount withParameters(Optional<? extends CarrierAccountParameters> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }

    /**
     * Carrier name, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
     */
    public CarrierAccount withCarrierName(Object carrierName) {
        Utils.checkNotNull(carrierName, "carrierName");
        this.carrierName = Optional.ofNullable(carrierName);
        return this;
    }

    /**
     * Carrier name, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
     */
    public CarrierAccount withCarrierName(Optional<? extends Object> carrierName) {
        Utils.checkNotNull(carrierName, "carrierName");
        this.carrierName = carrierName;
        return this;
    }

    public CarrierAccount withIsShippoAccount(boolean isShippoAccount) {
        Utils.checkNotNull(isShippoAccount, "isShippoAccount");
        this.isShippoAccount = Optional.ofNullable(isShippoAccount);
        return this;
    }

    public CarrierAccount withIsShippoAccount(Optional<Boolean> isShippoAccount) {
        Utils.checkNotNull(isShippoAccount, "isShippoAccount");
        this.isShippoAccount = isShippoAccount;
        return this;
    }

    public CarrierAccount withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public CarrierAccount withMetadata(Optional<String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Unique identifier of the carrier account object.
     */
    public CarrierAccount withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the carrier account object.
     */
    public CarrierAccount withObjectId(Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the carrier account object.
     */
    public CarrierAccount withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the carrier account object.
     */
    public CarrierAccount withObjectOwner(Optional<String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    public CarrierAccount withServiceLevels(List<CarrierAccountServiceLevel> serviceLevels) {
        Utils.checkNotNull(serviceLevels, "serviceLevels");
        this.serviceLevels = Optional.ofNullable(serviceLevels);
        return this;
    }

    public CarrierAccount withServiceLevels(Optional<? extends List<CarrierAccountServiceLevel>> serviceLevels) {
        Utils.checkNotNull(serviceLevels, "serviceLevels");
        this.serviceLevels = serviceLevels;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public CarrierAccount withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public CarrierAccount withTest(Optional<Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CarrierAccount other = (CarrierAccount) o;
        return 
            Objects.deepEquals(this.accountId, other.accountId) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.carrier, other.carrier) &&
            Objects.deepEquals(this.parameters, other.parameters) &&
            Objects.deepEquals(this.carrierName, other.carrierName) &&
            Objects.deepEquals(this.isShippoAccount, other.isShippoAccount) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            Objects.deepEquals(this.serviceLevels, other.serviceLevels) &&
            Objects.deepEquals(this.test, other.test);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountId,
            active,
            carrier,
            parameters,
            carrierName,
            isShippoAccount,
            metadata,
            objectId,
            objectOwner,
            serviceLevels,
            test);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CarrierAccount.class,
                "accountId", accountId,
                "active", active,
                "carrier", carrier,
                "parameters", parameters,
                "carrierName", carrierName,
                "isShippoAccount", isShippoAccount,
                "metadata", metadata,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "serviceLevels", serviceLevels,
                "test", test);
    }
    
    public final static class Builder {
 
        private String accountId;
 
        private Optional<Boolean> active = Optional.empty();
 
        private String carrier;
 
        private Optional<? extends CarrierAccountParameters> parameters = Optional.empty();
 
        private Optional<? extends Object> carrierName = Optional.empty();
 
        private Optional<Boolean> isShippoAccount = Optional.empty();
 
        private Optional<String> metadata = Optional.empty();
 
        private Optional<String> objectId = Optional.empty();
 
        private Optional<String> objectOwner = Optional.empty();
 
        private Optional<? extends List<CarrierAccountServiceLevel>> serviceLevels = Optional.empty();
 
        private Optional<Boolean> test = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of the account. Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; 
         * page for the `account_id` per carrier.&lt;br&gt; 
         * To protect account information, this field will be masked in any API response.
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * Determines whether the account is active. When creating a shipment, if no `carrier_accounts` are explicitly 
         * passed Shippo will query all carrier accounts that have this field set. By default, this is set to True.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Determines whether the account is active. When creating a shipment, if no `carrier_accounts` are explicitly 
         * passed Shippo will query all carrier accounts that have this field set. By default, this is set to True.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * Carrier token, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
         * Please check the &lt;a href="https://docs.goshippo.com/docs/carriers/carrieraccounts/"&gt;carrier accounts tutorial&lt;/a&gt; page for all supported carriers.
         */
        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        public Builder parameters(CarrierAccountParameters parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        public Builder parameters(Optional<? extends CarrierAccountParameters> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }

        /**
         * Carrier name, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
         */
        public Builder carrierName(Object carrierName) {
            Utils.checkNotNull(carrierName, "carrierName");
            this.carrierName = Optional.ofNullable(carrierName);
            return this;
        }

        /**
         * Carrier name, see &lt;a href="#tag/Carriers"&gt;Carriers&lt;/a&gt;&lt;br&gt;
         */
        public Builder carrierName(Optional<? extends Object> carrierName) {
            Utils.checkNotNull(carrierName, "carrierName");
            this.carrierName = carrierName;
            return this;
        }

        public Builder isShippoAccount(boolean isShippoAccount) {
            Utils.checkNotNull(isShippoAccount, "isShippoAccount");
            this.isShippoAccount = Optional.ofNullable(isShippoAccount);
            return this;
        }

        public Builder isShippoAccount(Optional<Boolean> isShippoAccount) {
            Utils.checkNotNull(isShippoAccount, "isShippoAccount");
            this.isShippoAccount = isShippoAccount;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Unique identifier of the carrier account object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the carrier account object.
         */
        public Builder objectId(Optional<String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the carrier account object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the carrier account object.
         */
        public Builder objectOwner(Optional<String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        public Builder serviceLevels(List<CarrierAccountServiceLevel> serviceLevels) {
            Utils.checkNotNull(serviceLevels, "serviceLevels");
            this.serviceLevels = Optional.ofNullable(serviceLevels);
            return this;
        }

        public Builder serviceLevels(Optional<? extends List<CarrierAccountServiceLevel>> serviceLevels) {
            Utils.checkNotNull(serviceLevels, "serviceLevels");
            this.serviceLevels = serviceLevels;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }
        
        public CarrierAccount build() {
            return new CarrierAccount(
                accountId,
                active,
                carrier,
                parameters,
                carrierName,
                isShippoAccount,
                metadata,
                objectId,
                objectOwner,
                serviceLevels,
                test);
        }
    }
}

