/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * WebhookPayloadBatch - Content of the webhook posted to the external URL
 */

public class WebhookPayloadBatch implements WebhookPayload {

    /**
     * Type of event that triggered the webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event")
    private Optional<? extends WebhookEventTypeEnum> event;

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<Boolean> test;

    /**
     * A string containing the batch object ID, of the form 'batch {batchId} (created|processing complete)'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<String> data;

    @JsonCreator
    public WebhookPayloadBatch(
            @JsonProperty("event") Optional<? extends WebhookEventTypeEnum> event,
            @JsonProperty("test") Optional<Boolean> test,
            @JsonProperty("data") Optional<String> data) {
        Utils.checkNotNull(event, "event");
        Utils.checkNotNull(test, "test");
        Utils.checkNotNull(data, "data");
        this.event = event;
        this.test = test;
        this.data = data;
    }
    
    public WebhookPayloadBatch() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Type of event that triggered the webhook.
     */
    @JsonIgnore
    @Override
    public String event() {
        return Utils.discriminatorToString(event);
    }

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    @JsonIgnore
    public Optional<Boolean> test() {
        return test;
    }

    /**
     * A string containing the batch object ID, of the form 'batch {batchId} (created|processing complete)'.
     */
    @JsonIgnore
    public Optional<String> data() {
        return data;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of event that triggered the webhook.
     */
    public WebhookPayloadBatch withEvent(WebhookEventTypeEnum event) {
        Utils.checkNotNull(event, "event");
        this.event = Optional.ofNullable(event);
        return this;
    }

    /**
     * Type of event that triggered the webhook.
     */
    public WebhookPayloadBatch withEvent(Optional<? extends WebhookEventTypeEnum> event) {
        Utils.checkNotNull(event, "event");
        this.event = event;
        return this;
    }

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    public WebhookPayloadBatch withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Determines whether the webhook is a test webhook or not.
     */
    public WebhookPayloadBatch withTest(Optional<Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }

    /**
     * A string containing the batch object ID, of the form 'batch {batchId} (created|processing complete)'.
     */
    public WebhookPayloadBatch withData(String data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    /**
     * A string containing the batch object ID, of the form 'batch {batchId} (created|processing complete)'.
     */
    public WebhookPayloadBatch withData(Optional<String> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookPayloadBatch other = (WebhookPayloadBatch) o;
        return 
            Objects.deepEquals(this.event, other.event) &&
            Objects.deepEquals(this.test, other.test) &&
            Objects.deepEquals(this.data, other.data);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            event,
            test,
            data);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookPayloadBatch.class,
                "event", event,
                "test", test,
                "data", data);
    }
    
    public final static class Builder {
 
        private Optional<? extends WebhookEventTypeEnum> event = Optional.empty();
 
        private Optional<Boolean> test = Optional.empty();
 
        private Optional<String> data = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of event that triggered the webhook.
         */
        public Builder event(WebhookEventTypeEnum event) {
            Utils.checkNotNull(event, "event");
            this.event = Optional.ofNullable(event);
            return this;
        }

        /**
         * Type of event that triggered the webhook.
         */
        public Builder event(Optional<? extends WebhookEventTypeEnum> event) {
            Utils.checkNotNull(event, "event");
            this.event = event;
            return this;
        }

        /**
         * Determines whether the webhook is a test webhook or not.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Determines whether the webhook is a test webhook or not.
         */
        public Builder test(Optional<Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }

        /**
         * A string containing the batch object ID, of the form 'batch {batchId} (created|processing complete)'.
         */
        public Builder data(String data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        /**
         * A string containing the batch object ID, of the form 'batch {batchId} (created|processing complete)'.
         */
        public Builder data(Optional<String> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }
        
        public WebhookPayloadBatch build() {
            return new WebhookPayloadBatch(
                event,
                test,
                data);
        }
    }
}

