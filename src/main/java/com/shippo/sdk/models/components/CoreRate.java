/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class CoreRate {

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends String> amount;

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_local")
    private Optional<? extends String> amountLocal;

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_local")
    private Optional<? extends String> currencyLocal;

    /**
     * Unique identifier of the Rate object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<? extends String> objectId;

    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private Optional<? extends String> provider;

    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier_account")
    private Optional<? extends String> carrierAccount;

    /**
     * Service level name, e.g. `Priority Mail` or `FedEx Ground®`. 
     * A service level commonly defines the transit time of a Shipment (e.g., Express vs. Standard), 
     * along with other properties.  These names vary depending on the provider.&lt;br&gt;
     * See &lt;a href="#tag/Service-Levels"&gt;Service Levels&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicelevel_name")
    private Optional<? extends String> servicelevelName;

    /**
     * Token of the Rate's servicelevel, e.g. `usps_priority` or `fedex_ground`.
     * See &lt;a href="#tag/Service-Levels"&gt;servicelevels&lt;/a&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicelevel_token")
    private Optional<? extends String> servicelevelToken;

    @JsonCreator
    public CoreRate(
            @JsonProperty("amount") Optional<? extends String> amount,
            @JsonProperty("amount_local") Optional<? extends String> amountLocal,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("currency_local") Optional<? extends String> currencyLocal,
            @JsonProperty("object_id") Optional<? extends String> objectId,
            @JsonProperty("provider") Optional<? extends String> provider,
            @JsonProperty("carrier_account") Optional<? extends String> carrierAccount,
            @JsonProperty("servicelevel_name") Optional<? extends String> servicelevelName,
            @JsonProperty("servicelevel_token") Optional<? extends String> servicelevelToken) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(amountLocal, "amountLocal");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        Utils.checkNotNull(servicelevelName, "servicelevelName");
        Utils.checkNotNull(servicelevelToken, "servicelevelToken");
        this.amount = amount;
        this.amountLocal = amountLocal;
        this.currency = currency;
        this.currencyLocal = currencyLocal;
        this.objectId = objectId;
        this.provider = provider;
        this.carrierAccount = carrierAccount;
        this.servicelevelName = servicelevelName;
        this.servicelevelToken = servicelevelToken;
    }
    
    public CoreRate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> amount() {
        return (Optional<String>) amount;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> amountLocal() {
        return (Optional<String>) amountLocal;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> currency() {
        return (Optional<String>) currency;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> currencyLocal() {
        return (Optional<String>) currencyLocal;
    }

    /**
     * Unique identifier of the Rate object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> objectId() {
        return (Optional<String>) objectId;
    }

    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> provider() {
        return (Optional<String>) provider;
    }

    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> carrierAccount() {
        return (Optional<String>) carrierAccount;
    }

    /**
     * Service level name, e.g. `Priority Mail` or `FedEx Ground®`. 
     * A service level commonly defines the transit time of a Shipment (e.g., Express vs. Standard), 
     * along with other properties.  These names vary depending on the provider.&lt;br&gt;
     * See &lt;a href="#tag/Service-Levels"&gt;Service Levels&lt;/a&gt;.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> servicelevelName() {
        return (Optional<String>) servicelevelName;
    }

    /**
     * Token of the Rate's servicelevel, e.g. `usps_priority` or `fedex_ground`.
     * See &lt;a href="#tag/Service-Levels"&gt;servicelevels&lt;/a&gt;.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> servicelevelToken() {
        return (Optional<String>) servicelevelToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    public CoreRate withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    public CoreRate withAmount(Optional<? extends String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    public CoreRate withAmountLocal(String amountLocal) {
        Utils.checkNotNull(amountLocal, "amountLocal");
        this.amountLocal = Optional.ofNullable(amountLocal);
        return this;
    }

    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    public CoreRate withAmountLocal(Optional<? extends String> amountLocal) {
        Utils.checkNotNull(amountLocal, "amountLocal");
        this.amountLocal = amountLocal;
        return this;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    public CoreRate withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * Currency used in the sender's country, refers to `amount`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
     */
    public CoreRate withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    public CoreRate withCurrencyLocal(String currencyLocal) {
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        this.currencyLocal = Optional.ofNullable(currencyLocal);
        return this;
    }

    /**
     * Currency used in the recipient's country, refers to `amount_local`. 
     * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
     */
    public CoreRate withCurrencyLocal(Optional<? extends String> currencyLocal) {
        Utils.checkNotNull(currencyLocal, "currencyLocal");
        this.currencyLocal = currencyLocal;
        return this;
    }

    /**
     * Unique identifier of the Rate object.
     */
    public CoreRate withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the Rate object.
     */
    public CoreRate withObjectId(Optional<? extends String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    public CoreRate withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }

    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    public CoreRate withProvider(Optional<? extends String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    public CoreRate withCarrierAccount(String carrierAccount) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        this.carrierAccount = Optional.ofNullable(carrierAccount);
        return this;
    }

    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    public CoreRate withCarrierAccount(Optional<? extends String> carrierAccount) {
        Utils.checkNotNull(carrierAccount, "carrierAccount");
        this.carrierAccount = carrierAccount;
        return this;
    }

    /**
     * Service level name, e.g. `Priority Mail` or `FedEx Ground®`. 
     * A service level commonly defines the transit time of a Shipment (e.g., Express vs. Standard), 
     * along with other properties.  These names vary depending on the provider.&lt;br&gt;
     * See &lt;a href="#tag/Service-Levels"&gt;Service Levels&lt;/a&gt;.
     */
    public CoreRate withServicelevelName(String servicelevelName) {
        Utils.checkNotNull(servicelevelName, "servicelevelName");
        this.servicelevelName = Optional.ofNullable(servicelevelName);
        return this;
    }

    /**
     * Service level name, e.g. `Priority Mail` or `FedEx Ground®`. 
     * A service level commonly defines the transit time of a Shipment (e.g., Express vs. Standard), 
     * along with other properties.  These names vary depending on the provider.&lt;br&gt;
     * See &lt;a href="#tag/Service-Levels"&gt;Service Levels&lt;/a&gt;.
     */
    public CoreRate withServicelevelName(Optional<? extends String> servicelevelName) {
        Utils.checkNotNull(servicelevelName, "servicelevelName");
        this.servicelevelName = servicelevelName;
        return this;
    }

    /**
     * Token of the Rate's servicelevel, e.g. `usps_priority` or `fedex_ground`.
     * See &lt;a href="#tag/Service-Levels"&gt;servicelevels&lt;/a&gt;.
     */
    public CoreRate withServicelevelToken(String servicelevelToken) {
        Utils.checkNotNull(servicelevelToken, "servicelevelToken");
        this.servicelevelToken = Optional.ofNullable(servicelevelToken);
        return this;
    }

    /**
     * Token of the Rate's servicelevel, e.g. `usps_priority` or `fedex_ground`.
     * See &lt;a href="#tag/Service-Levels"&gt;servicelevels&lt;/a&gt;.
     */
    public CoreRate withServicelevelToken(Optional<? extends String> servicelevelToken) {
        Utils.checkNotNull(servicelevelToken, "servicelevelToken");
        this.servicelevelToken = servicelevelToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CoreRate other = (CoreRate) o;
        return 
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.amountLocal, other.amountLocal) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.currencyLocal, other.currencyLocal) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.provider, other.provider) &&
            java.util.Objects.deepEquals(this.carrierAccount, other.carrierAccount) &&
            java.util.Objects.deepEquals(this.servicelevelName, other.servicelevelName) &&
            java.util.Objects.deepEquals(this.servicelevelToken, other.servicelevelToken);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amount,
            amountLocal,
            currency,
            currencyLocal,
            objectId,
            provider,
            carrierAccount,
            servicelevelName,
            servicelevelToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CoreRate.class,
                "amount", amount,
                "amountLocal", amountLocal,
                "currency", currency,
                "currencyLocal", currencyLocal,
                "objectId", objectId,
                "provider", provider,
                "carrierAccount", carrierAccount,
                "servicelevelName", servicelevelName,
                "servicelevelToken", servicelevelToken);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> amount = Optional.empty();
 
        private Optional<? extends String> amountLocal = Optional.empty();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends String> currencyLocal = Optional.empty();
 
        private Optional<? extends String> objectId = Optional.empty();
 
        private Optional<? extends String> provider = Optional.empty();
 
        private Optional<? extends String> carrierAccount = Optional.empty();
 
        private Optional<? extends String> servicelevelName = Optional.empty();
 
        private Optional<? extends String> servicelevelToken = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Final Rate price, expressed in the currency used in the sender's country.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Final Rate price, expressed in the currency used in the sender's country.
         */
        public Builder amount(Optional<? extends String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Final Rate price, expressed in the currency used in the recipient's country.
         */
        public Builder amountLocal(String amountLocal) {
            Utils.checkNotNull(amountLocal, "amountLocal");
            this.amountLocal = Optional.ofNullable(amountLocal);
            return this;
        }

        /**
         * Final Rate price, expressed in the currency used in the recipient's country.
         */
        public Builder amountLocal(Optional<? extends String> amountLocal) {
            Utils.checkNotNull(amountLocal, "amountLocal");
            this.amountLocal = amountLocal;
            return this;
        }

        /**
         * Currency used in the sender's country, refers to `amount`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * Currency used in the sender's country, refers to `amount`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or `EUR`.
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Currency used in the recipient's country, refers to `amount_local`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
         */
        public Builder currencyLocal(String currencyLocal) {
            Utils.checkNotNull(currencyLocal, "currencyLocal");
            this.currencyLocal = Optional.ofNullable(currencyLocal);
            return this;
        }

        /**
         * Currency used in the recipient's country, refers to `amount_local`. 
         * The &lt;a href="http://www.xe.com/iso4217.php"&gt;official ISO 4217&lt;/a&gt; currency codes are used, e.g. `USD` or "EUR".
         */
        public Builder currencyLocal(Optional<? extends String> currencyLocal) {
            Utils.checkNotNull(currencyLocal, "currencyLocal");
            this.currencyLocal = currencyLocal;
            return this;
        }

        /**
         * Unique identifier of the Rate object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the Rate object.
         */
        public Builder objectId(Optional<? extends String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        /**
         * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
         */
        public Builder provider(Optional<? extends String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        /**
         * Object ID of the carrier account that has been used to retrieve the rate.
         */
        public Builder carrierAccount(String carrierAccount) {
            Utils.checkNotNull(carrierAccount, "carrierAccount");
            this.carrierAccount = Optional.ofNullable(carrierAccount);
            return this;
        }

        /**
         * Object ID of the carrier account that has been used to retrieve the rate.
         */
        public Builder carrierAccount(Optional<? extends String> carrierAccount) {
            Utils.checkNotNull(carrierAccount, "carrierAccount");
            this.carrierAccount = carrierAccount;
            return this;
        }

        /**
         * Service level name, e.g. `Priority Mail` or `FedEx Ground®`. 
         * A service level commonly defines the transit time of a Shipment (e.g., Express vs. Standard), 
         * along with other properties.  These names vary depending on the provider.&lt;br&gt;
         * See &lt;a href="#tag/Service-Levels"&gt;Service Levels&lt;/a&gt;.
         */
        public Builder servicelevelName(String servicelevelName) {
            Utils.checkNotNull(servicelevelName, "servicelevelName");
            this.servicelevelName = Optional.ofNullable(servicelevelName);
            return this;
        }

        /**
         * Service level name, e.g. `Priority Mail` or `FedEx Ground®`. 
         * A service level commonly defines the transit time of a Shipment (e.g., Express vs. Standard), 
         * along with other properties.  These names vary depending on the provider.&lt;br&gt;
         * See &lt;a href="#tag/Service-Levels"&gt;Service Levels&lt;/a&gt;.
         */
        public Builder servicelevelName(Optional<? extends String> servicelevelName) {
            Utils.checkNotNull(servicelevelName, "servicelevelName");
            this.servicelevelName = servicelevelName;
            return this;
        }

        /**
         * Token of the Rate's servicelevel, e.g. `usps_priority` or `fedex_ground`.
         * See &lt;a href="#tag/Service-Levels"&gt;servicelevels&lt;/a&gt;.
         */
        public Builder servicelevelToken(String servicelevelToken) {
            Utils.checkNotNull(servicelevelToken, "servicelevelToken");
            this.servicelevelToken = Optional.ofNullable(servicelevelToken);
            return this;
        }

        /**
         * Token of the Rate's servicelevel, e.g. `usps_priority` or `fedex_ground`.
         * See &lt;a href="#tag/Service-Levels"&gt;servicelevels&lt;/a&gt;.
         */
        public Builder servicelevelToken(Optional<? extends String> servicelevelToken) {
            Utils.checkNotNull(servicelevelToken, "servicelevelToken");
            this.servicelevelToken = servicelevelToken;
            return this;
        }
        
        public CoreRate build() {
            return new CoreRate(
                amount,
                amountLocal,
                currency,
                currencyLocal,
                objectId,
                provider,
                carrierAccount,
                servicelevelName,
                servicelevelToken);
        }
    }
}

