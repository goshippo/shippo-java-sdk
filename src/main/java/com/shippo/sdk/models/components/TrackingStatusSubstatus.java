/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
/**
 * TrackingStatusSubstatus - A finer-grained classification of the tracking event.
 */

public class TrackingStatusSubstatus {

    /**
     * A code that represents the substatus of the shipment. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
     */
    @JsonProperty("code")
    private String code;

    /**
     * A human-readable description of the substatus. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
     */
    @JsonProperty("text")
    private String text;

    /**
     * Indicates whether the substatus requires action from the shipper or recipient to complete delivery.
     */
    @JsonProperty("action_required")
    private boolean actionRequired;

    @JsonCreator
    public TrackingStatusSubstatus(
            @JsonProperty("code") String code,
            @JsonProperty("text") String text,
            @JsonProperty("action_required") boolean actionRequired) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(actionRequired, "actionRequired");
        this.code = code;
        this.text = text;
        this.actionRequired = actionRequired;
    }

    /**
     * A code that represents the substatus of the shipment. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
     */
    @JsonIgnore
    public String code() {
        return code;
    }

    /**
     * A human-readable description of the substatus. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
     */
    @JsonIgnore
    public String text() {
        return text;
    }

    /**
     * Indicates whether the substatus requires action from the shipper or recipient to complete delivery.
     */
    @JsonIgnore
    public boolean actionRequired() {
        return actionRequired;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A code that represents the substatus of the shipment. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
     */
    public TrackingStatusSubstatus withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * A human-readable description of the substatus. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
     */
    public TrackingStatusSubstatus withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    /**
     * Indicates whether the substatus requires action from the shipper or recipient to complete delivery.
     */
    public TrackingStatusSubstatus withActionRequired(boolean actionRequired) {
        Utils.checkNotNull(actionRequired, "actionRequired");
        this.actionRequired = actionRequired;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrackingStatusSubstatus other = (TrackingStatusSubstatus) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.text, other.text) &&
            java.util.Objects.deepEquals(this.actionRequired, other.actionRequired);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            text,
            actionRequired);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TrackingStatusSubstatus.class,
                "code", code,
                "text", text,
                "actionRequired", actionRequired);
    }
    
    public final static class Builder {
 
        private String code;
 
        private String text;
 
        private Boolean actionRequired;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A code that represents the substatus of the shipment. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * A human-readable description of the substatus. See the &lt;a href="https://docs.goshippo.com/docs/tracking/tracking/#event-definitions"&gt;Event Definitions&lt;/a&gt; for more information.
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        /**
         * Indicates whether the substatus requires action from the shipper or recipient to complete delivery.
         */
        public Builder actionRequired(boolean actionRequired) {
            Utils.checkNotNull(actionRequired, "actionRequired");
            this.actionRequired = actionRequired;
            return this;
        }
        
        public TrackingStatusSubstatus build() {
            return new TrackingStatusSubstatus(
                code,
                text,
                actionRequired);
        }
    }
}

