/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class Parcel {

    /**
     * The measure unit used for length, width and height.
     */
    @JsonProperty("distance_unit")
    private DistanceUnitEnum distanceUnit;

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extra")
    private Optional<? extends ParcelExtra> extra;

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("height")
    private String height;

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("length")
    private String length;

    /**
     * The unit used for weight.
     */
    @JsonProperty("mass_unit")
    private WeightUnitEnum massUnit;

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    /**
     * Date and time of Parcel creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<? extends OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<? extends String> objectId;

    /**
     * Username of the user who created the Parcel object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<? extends String> objectOwner;

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_state")
    private Optional<? extends ObjectState> objectState;

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<? extends OffsetDateTime> objectUpdated;

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    private Optional<? extends ParcelTemplateEnumSet> template;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<? extends Boolean> test;

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("weight")
    private String weight;

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("width")
    private String width;

    @JsonCreator
    public Parcel(
            @JsonProperty("distance_unit") DistanceUnitEnum distanceUnit,
            @JsonProperty("extra") Optional<? extends ParcelExtra> extra,
            @JsonProperty("height") String height,
            @JsonProperty("length") String length,
            @JsonProperty("mass_unit") WeightUnitEnum massUnit,
            @JsonProperty("metadata") Optional<? extends String> metadata,
            @JsonProperty("object_created") Optional<? extends OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<? extends String> objectId,
            @JsonProperty("object_owner") Optional<? extends String> objectOwner,
            @JsonProperty("object_state") Optional<? extends ObjectState> objectState,
            @JsonProperty("object_updated") Optional<? extends OffsetDateTime> objectUpdated,
            @JsonProperty("template") Optional<? extends ParcelTemplateEnumSet> template,
            @JsonProperty("test") Optional<? extends Boolean> test,
            @JsonProperty("weight") String weight,
            @JsonProperty("width") String width) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        Utils.checkNotNull(extra, "extra");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(length, "length");
        Utils.checkNotNull(massUnit, "massUnit");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectState, "objectState");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(template, "template");
        Utils.checkNotNull(test, "test");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(width, "width");
        this.distanceUnit = distanceUnit;
        this.extra = extra;
        this.height = height;
        this.length = length;
        this.massUnit = massUnit;
        this.metadata = metadata;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectState = objectState;
        this.objectUpdated = objectUpdated;
        this.template = template;
        this.test = test;
        this.weight = weight;
        this.width = width;
    }
    
    public Parcel(
            DistanceUnitEnum distanceUnit,
            String height,
            String length,
            WeightUnitEnum massUnit,
            String weight,
            String width) {
        this(distanceUnit, Optional.empty(), height, length, massUnit, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), weight, width);
    }

    /**
     * The measure unit used for length, width and height.
     */
    @JsonIgnore
    public DistanceUnitEnum distanceUnit() {
        return distanceUnit;
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParcelExtra> extra() {
        return (Optional<ParcelExtra>) extra;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String height() {
        return height;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String length() {
        return length;
    }

    /**
     * The unit used for weight.
     */
    @JsonIgnore
    public WeightUnitEnum massUnit() {
        return massUnit;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> metadata() {
        return (Optional<String>) metadata;
    }

    /**
     * Date and time of Parcel creation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return (Optional<OffsetDateTime>) objectCreated;
    }

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> objectId() {
        return (Optional<String>) objectId;
    }

    /**
     * Username of the user who created the Parcel object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> objectOwner() {
        return (Optional<String>) objectOwner;
    }

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ObjectState> objectState() {
        return (Optional<ObjectState>) objectState;
    }

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return (Optional<OffsetDateTime>) objectUpdated;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParcelTemplateEnumSet> template() {
        return (Optional<ParcelTemplateEnumSet>) template;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> test() {
        return (Optional<Boolean>) test;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String weight() {
        return weight;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String width() {
        return width;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The measure unit used for length, width and height.
     */
    public Parcel withDistanceUnit(DistanceUnitEnum distanceUnit) {
        Utils.checkNotNull(distanceUnit, "distanceUnit");
        this.distanceUnit = distanceUnit;
        return this;
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    public Parcel withExtra(ParcelExtra extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = Optional.ofNullable(extra);
        return this;
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    public Parcel withExtra(Optional<? extends ParcelExtra> extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = extra;
        return this;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withHeight(String height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withLength(String length) {
        Utils.checkNotNull(length, "length");
        this.length = length;
        return this;
    }

    /**
     * The unit used for weight.
     */
    public Parcel withMassUnit(WeightUnitEnum massUnit) {
        Utils.checkNotNull(massUnit, "massUnit");
        this.massUnit = massUnit;
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    public Parcel withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    public Parcel withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Date and time of Parcel creation.
     */
    public Parcel withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of Parcel creation.
     */
    public Parcel withObjectCreated(Optional<? extends OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    public Parcel withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    public Parcel withObjectId(Optional<? extends String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the Parcel object.
     */
    public Parcel withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the Parcel object.
     */
    public Parcel withObjectOwner(Optional<? extends String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    public Parcel withObjectState(ObjectState objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = Optional.ofNullable(objectState);
        return this;
    }

    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    public Parcel withObjectState(Optional<? extends ObjectState> objectState) {
        Utils.checkNotNull(objectState, "objectState");
        this.objectState = objectState;
        return this;
    }

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    public Parcel withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    public Parcel withObjectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    public Parcel withTemplate(ParcelTemplateEnumSet template) {
        Utils.checkNotNull(template, "template");
        this.template = Optional.ofNullable(template);
        return this;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    public Parcel withTemplate(Optional<? extends ParcelTemplateEnumSet> template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Parcel withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Parcel withTest(Optional<? extends Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * **Required if template is not specified**&lt;br&gt;
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public Parcel withWidth(String width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Parcel other = (Parcel) o;
        return 
            java.util.Objects.deepEquals(this.distanceUnit, other.distanceUnit) &&
            java.util.Objects.deepEquals(this.extra, other.extra) &&
            java.util.Objects.deepEquals(this.height, other.height) &&
            java.util.Objects.deepEquals(this.length, other.length) &&
            java.util.Objects.deepEquals(this.massUnit, other.massUnit) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            java.util.Objects.deepEquals(this.objectState, other.objectState) &&
            java.util.Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            java.util.Objects.deepEquals(this.template, other.template) &&
            java.util.Objects.deepEquals(this.test, other.test) &&
            java.util.Objects.deepEquals(this.weight, other.weight) &&
            java.util.Objects.deepEquals(this.width, other.width);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            distanceUnit,
            extra,
            height,
            length,
            massUnit,
            metadata,
            objectCreated,
            objectId,
            objectOwner,
            objectState,
            objectUpdated,
            template,
            test,
            weight,
            width);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Parcel.class,
                "distanceUnit", distanceUnit,
                "extra", extra,
                "height", height,
                "length", length,
                "massUnit", massUnit,
                "metadata", metadata,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectState", objectState,
                "objectUpdated", objectUpdated,
                "template", template,
                "test", test,
                "weight", weight,
                "width", width);
    }
    
    public final static class Builder {
 
        private DistanceUnitEnum distanceUnit;
 
        private Optional<? extends ParcelExtra> extra = Optional.empty();
 
        private String height;
 
        private String length;
 
        private WeightUnitEnum massUnit;
 
        private Optional<? extends String> metadata = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<? extends String> objectId = Optional.empty();
 
        private Optional<? extends String> objectOwner = Optional.empty();
 
        private Optional<? extends ObjectState> objectState = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<? extends ParcelTemplateEnumSet> template = Optional.empty();
 
        private Optional<? extends Boolean> test = Optional.empty();
 
        private String weight;
 
        private String width;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The measure unit used for length, width and height.
         */
        public Builder distanceUnit(DistanceUnitEnum distanceUnit) {
            Utils.checkNotNull(distanceUnit, "distanceUnit");
            this.distanceUnit = distanceUnit;
            return this;
        }

        /**
         * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
         * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
         */
        public Builder extra(ParcelExtra extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = Optional.ofNullable(extra);
            return this;
        }

        /**
         * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
         * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
         */
        public Builder extra(Optional<? extends ParcelExtra> extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = extra;
            return this;
        }

        /**
         * **Required if template is not specified**&lt;br&gt;
         * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder height(String height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * **Required if template is not specified**&lt;br&gt;
         * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder length(String length) {
            Utils.checkNotNull(length, "length");
            this.length = length;
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder massUnit(WeightUnitEnum massUnit) {
            Utils.checkNotNull(massUnit, "massUnit");
            this.massUnit = massUnit;
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
         */
        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
         */
        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Date and time of Parcel creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of Parcel creation.
         */
        public Builder objectCreated(Optional<? extends OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
         */
        public Builder objectId(Optional<? extends String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the Parcel object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the Parcel object.
         */
        public Builder objectOwner(Optional<? extends String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * A Parcel will only be valid when all required values have been sent and validated successfully.
         */
        public Builder objectState(ObjectState objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = Optional.ofNullable(objectState);
            return this;
        }

        /**
         * A Parcel will only be valid when all required values have been sent and validated successfully.
         */
        public Builder objectState(Optional<? extends ObjectState> objectState) {
            Utils.checkNotNull(objectState, "objectState");
            this.objectState = objectState;
            return this;
        }

        /**
         * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
         */
        public Builder objectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
         */
        public Builder template(ParcelTemplateEnumSet template) {
            Utils.checkNotNull(template, "template");
            this.template = Optional.ofNullable(template);
            return this;
        }

        /**
         * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
         */
        public Builder template(Optional<? extends ParcelTemplateEnumSet> template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<? extends Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }

        /**
         * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * **Required if template is not specified**&lt;br&gt;
         * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder width(String width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }
        
        public Parcel build() {
            return new Parcel(
                distanceUnit,
                extra,
                height,
                length,
                massUnit,
                metadata,
                objectCreated,
                objectId,
                objectOwner,
                objectState,
                objectUpdated,
                template,
                test,
                weight,
                width);
        }
    }
}

