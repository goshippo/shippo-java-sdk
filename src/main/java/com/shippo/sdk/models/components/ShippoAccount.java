/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class ShippoAccount {

    @JsonProperty("email")
    private String email;

    @JsonProperty("first_name")
    private String firstName;

    @JsonProperty("last_name")
    private String lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private Optional<String> companyName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<OffsetDateTime> objectCreated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<String> objectId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<OffsetDateTime> objectUpdated;

    @JsonCreator
    public ShippoAccount(
            @JsonProperty("email") String email,
            @JsonProperty("first_name") String firstName,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("company_name") Optional<String> companyName,
            @JsonProperty("object_created") Optional<OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<String> objectId,
            @JsonProperty("object_updated") Optional<OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.companyName = companyName;
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectUpdated = objectUpdated;
    }
    
    public ShippoAccount(
            String email,
            String firstName,
            String lastName) {
        this(email, firstName, lastName, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    @JsonIgnore
    public Optional<String> companyName() {
        return companyName;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return objectCreated;
    }

    @JsonIgnore
    public Optional<String> objectId() {
        return objectId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return objectUpdated;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ShippoAccount withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public ShippoAccount withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public ShippoAccount withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public ShippoAccount withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = Optional.ofNullable(companyName);
        return this;
    }

    public ShippoAccount withCompanyName(Optional<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    public ShippoAccount withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    public ShippoAccount withObjectCreated(Optional<OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    public ShippoAccount withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    public ShippoAccount withObjectId(Optional<String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    public ShippoAccount withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    public ShippoAccount withObjectUpdated(Optional<OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ShippoAccount other = (ShippoAccount) o;
        return 
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            Objects.deepEquals(this.objectId, other.objectId) &&
            Objects.deepEquals(this.objectUpdated, other.objectUpdated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            email,
            firstName,
            lastName,
            companyName,
            objectCreated,
            objectId,
            objectUpdated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ShippoAccount.class,
                "email", email,
                "firstName", firstName,
                "lastName", lastName,
                "companyName", companyName,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectUpdated", objectUpdated);
    }
    
    public final static class Builder {
 
        private String email;
 
        private String firstName;
 
        private String lastName;
 
        private Optional<String> companyName = Optional.empty();
 
        private Optional<OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<String> objectId = Optional.empty();
 
        private Optional<OffsetDateTime> objectUpdated = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        public Builder companyName(Optional<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        public Builder objectCreated(Optional<OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        public Builder objectId(Optional<String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        public Builder objectUpdated(Optional<OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }
        
        public ShippoAccount build() {
            return new ShippoAccount(
                email,
                firstName,
                lastName,
                companyName,
                objectCreated,
                objectId,
                objectUpdated);
        }
    }
}

