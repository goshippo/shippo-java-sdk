/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class ParcelCreateFromTemplateRequest {

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extra")
    private Optional<? extends ParcelExtra> extra;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends String> metadata;

    /**
     * The unit used for weight.
     */
    @JsonProperty("mass_unit")
    private WeightUnitEnum massUnit;

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonProperty("weight")
    private String weight;

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @JsonProperty("template")
    private ParcelTemplateEnumSet template;

    @JsonCreator
    public ParcelCreateFromTemplateRequest(
            @JsonProperty("extra") Optional<? extends ParcelExtra> extra,
            @JsonProperty("metadata") Optional<? extends String> metadata,
            @JsonProperty("mass_unit") WeightUnitEnum massUnit,
            @JsonProperty("weight") String weight,
            @JsonProperty("template") ParcelTemplateEnumSet template) {
        Utils.checkNotNull(extra, "extra");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(massUnit, "massUnit");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(template, "template");
        this.extra = extra;
        this.metadata = metadata;
        this.massUnit = massUnit;
        this.weight = weight;
        this.template = template;
    }
    
    public ParcelCreateFromTemplateRequest(
            WeightUnitEnum massUnit,
            String weight,
            ParcelTemplateEnumSet template) {
        this(Optional.empty(), Optional.empty(), massUnit, weight, template);
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ParcelExtra> extra() {
        return (Optional<ParcelExtra>) extra;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> metadata() {
        return (Optional<String>) metadata;
    }

    /**
     * The unit used for weight.
     */
    @JsonIgnore
    public WeightUnitEnum massUnit() {
        return massUnit;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    @JsonIgnore
    public String weight() {
        return weight;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    @JsonIgnore
    public ParcelTemplateEnumSet template() {
        return template;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    public ParcelCreateFromTemplateRequest withExtra(ParcelExtra extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = Optional.ofNullable(extra);
        return this;
    }

    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
     * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
     */
    public ParcelCreateFromTemplateRequest withExtra(Optional<? extends ParcelExtra> extra) {
        Utils.checkNotNull(extra, "extra");
        this.extra = extra;
        return this;
    }

    public ParcelCreateFromTemplateRequest withMetadata(String metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public ParcelCreateFromTemplateRequest withMetadata(Optional<? extends String> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The unit used for weight.
     */
    public ParcelCreateFromTemplateRequest withMassUnit(WeightUnitEnum massUnit) {
        Utils.checkNotNull(massUnit, "massUnit");
        this.massUnit = massUnit;
        return this;
    }

    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    public ParcelCreateFromTemplateRequest withWeight(String weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    public ParcelCreateFromTemplateRequest withTemplate(ParcelTemplateEnumSet template) {
        Utils.checkNotNull(template, "template");
        this.template = template;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ParcelCreateFromTemplateRequest other = (ParcelCreateFromTemplateRequest) o;
        return 
            java.util.Objects.deepEquals(this.extra, other.extra) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.massUnit, other.massUnit) &&
            java.util.Objects.deepEquals(this.weight, other.weight) &&
            java.util.Objects.deepEquals(this.template, other.template);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            extra,
            metadata,
            massUnit,
            weight,
            template);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ParcelCreateFromTemplateRequest.class,
                "extra", extra,
                "metadata", metadata,
                "massUnit", massUnit,
                "weight", weight,
                "template", template);
    }
    
    public final static class Builder {
 
        private Optional<? extends ParcelExtra> extra = Optional.empty();
 
        private Optional<? extends String> metadata = Optional.empty();
 
        private WeightUnitEnum massUnit;
 
        private String weight;
 
        private ParcelTemplateEnumSet template;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
         * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
         */
        public Builder extra(ParcelExtra extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = Optional.ofNullable(extra);
            return this;
        }

        /**
         * An object holding optional extra services to be requested for each parcel in a multi-piece shipment. 
         * See the &lt;a href="#section/Parcel-Extras"&gt;Parcel Extra table below&lt;/a&gt; for all available services.
         */
        public Builder extra(Optional<? extends ParcelExtra> extra) {
            Utils.checkNotNull(extra, "extra");
            this.extra = extra;
            return this;
        }

        public Builder metadata(String metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends String> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * The unit used for weight.
         */
        public Builder massUnit(WeightUnitEnum massUnit) {
            Utils.checkNotNull(massUnit, "massUnit");
            this.massUnit = massUnit;
            return this;
        }

        /**
         * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
         */
        public Builder weight(String weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        /**
         * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
         */
        public Builder template(ParcelTemplateEnumSet template) {
            Utils.checkNotNull(template, "template");
            this.template = template;
            return this;
        }
        
        public ParcelCreateFromTemplateRequest build() {
            return new ParcelCreateFromTemplateRequest(
                extra,
                metadata,
                massUnit,
                weight,
                template);
        }
    }
}

