/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.shippo.sdk.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;

public class Refund {

    /**
     * Date and time of object creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_created")
    private Optional<? extends OffsetDateTime> objectCreated;

    /**
     * Unique identifier of the given object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_id")
    private Optional<? extends String> objectId;

    /**
     * Username of the user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_owner")
    private Optional<? extends String> objectOwner;

    /**
     * Date and time of last object update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object_updated")
    private Optional<? extends OffsetDateTime> objectUpdated;

    /**
     * Indicates the status of the Refund.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends RefundStatus> status;

    /**
     * Indicates whether the object has been created in test mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    private Optional<? extends Boolean> test;

    /**
     * Object ID of the Transaction to be refunded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction")
    private Optional<? extends String> transaction;

    @JsonCreator
    public Refund(
            @JsonProperty("object_created") Optional<? extends OffsetDateTime> objectCreated,
            @JsonProperty("object_id") Optional<? extends String> objectId,
            @JsonProperty("object_owner") Optional<? extends String> objectOwner,
            @JsonProperty("object_updated") Optional<? extends OffsetDateTime> objectUpdated,
            @JsonProperty("status") Optional<? extends RefundStatus> status,
            @JsonProperty("test") Optional<? extends Boolean> test,
            @JsonProperty("transaction") Optional<? extends String> transaction) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        Utils.checkNotNull(objectId, "objectId");
        Utils.checkNotNull(objectOwner, "objectOwner");
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(test, "test");
        Utils.checkNotNull(transaction, "transaction");
        this.objectCreated = objectCreated;
        this.objectId = objectId;
        this.objectOwner = objectOwner;
        this.objectUpdated = objectUpdated;
        this.status = status;
        this.test = test;
        this.transaction = transaction;
    }
    
    public Refund() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Date and time of object creation.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> objectCreated() {
        return (Optional<OffsetDateTime>) objectCreated;
    }

    /**
     * Unique identifier of the given object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> objectId() {
        return (Optional<String>) objectId;
    }

    /**
     * Username of the user who created the object.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> objectOwner() {
        return (Optional<String>) objectOwner;
    }

    /**
     * Date and time of last object update.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OffsetDateTime> objectUpdated() {
        return (Optional<OffsetDateTime>) objectUpdated;
    }

    /**
     * Indicates the status of the Refund.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RefundStatus> status() {
        return (Optional<RefundStatus>) status;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> test() {
        return (Optional<Boolean>) test;
    }

    /**
     * Object ID of the Transaction to be refunded.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> transaction() {
        return (Optional<String>) transaction;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Date and time of object creation.
     */
    public Refund withObjectCreated(OffsetDateTime objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = Optional.ofNullable(objectCreated);
        return this;
    }

    /**
     * Date and time of object creation.
     */
    public Refund withObjectCreated(Optional<? extends OffsetDateTime> objectCreated) {
        Utils.checkNotNull(objectCreated, "objectCreated");
        this.objectCreated = objectCreated;
        return this;
    }

    /**
     * Unique identifier of the given object.
     */
    public Refund withObjectId(String objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = Optional.ofNullable(objectId);
        return this;
    }

    /**
     * Unique identifier of the given object.
     */
    public Refund withObjectId(Optional<? extends String> objectId) {
        Utils.checkNotNull(objectId, "objectId");
        this.objectId = objectId;
        return this;
    }

    /**
     * Username of the user who created the object.
     */
    public Refund withObjectOwner(String objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = Optional.ofNullable(objectOwner);
        return this;
    }

    /**
     * Username of the user who created the object.
     */
    public Refund withObjectOwner(Optional<? extends String> objectOwner) {
        Utils.checkNotNull(objectOwner, "objectOwner");
        this.objectOwner = objectOwner;
        return this;
    }

    /**
     * Date and time of last object update.
     */
    public Refund withObjectUpdated(OffsetDateTime objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = Optional.ofNullable(objectUpdated);
        return this;
    }

    /**
     * Date and time of last object update.
     */
    public Refund withObjectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
        Utils.checkNotNull(objectUpdated, "objectUpdated");
        this.objectUpdated = objectUpdated;
        return this;
    }

    /**
     * Indicates the status of the Refund.
     */
    public Refund withStatus(RefundStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Indicates the status of the Refund.
     */
    public Refund withStatus(Optional<? extends RefundStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Refund withTest(boolean test) {
        Utils.checkNotNull(test, "test");
        this.test = Optional.ofNullable(test);
        return this;
    }

    /**
     * Indicates whether the object has been created in test mode.
     */
    public Refund withTest(Optional<? extends Boolean> test) {
        Utils.checkNotNull(test, "test");
        this.test = test;
        return this;
    }

    /**
     * Object ID of the Transaction to be refunded.
     */
    public Refund withTransaction(String transaction) {
        Utils.checkNotNull(transaction, "transaction");
        this.transaction = Optional.ofNullable(transaction);
        return this;
    }

    /**
     * Object ID of the Transaction to be refunded.
     */
    public Refund withTransaction(Optional<? extends String> transaction) {
        Utils.checkNotNull(transaction, "transaction");
        this.transaction = transaction;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Refund other = (Refund) o;
        return 
            java.util.Objects.deepEquals(this.objectCreated, other.objectCreated) &&
            java.util.Objects.deepEquals(this.objectId, other.objectId) &&
            java.util.Objects.deepEquals(this.objectOwner, other.objectOwner) &&
            java.util.Objects.deepEquals(this.objectUpdated, other.objectUpdated) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.test, other.test) &&
            java.util.Objects.deepEquals(this.transaction, other.transaction);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            objectCreated,
            objectId,
            objectOwner,
            objectUpdated,
            status,
            test,
            transaction);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Refund.class,
                "objectCreated", objectCreated,
                "objectId", objectId,
                "objectOwner", objectOwner,
                "objectUpdated", objectUpdated,
                "status", status,
                "test", test,
                "transaction", transaction);
    }
    
    public final static class Builder {
 
        private Optional<? extends OffsetDateTime> objectCreated = Optional.empty();
 
        private Optional<? extends String> objectId = Optional.empty();
 
        private Optional<? extends String> objectOwner = Optional.empty();
 
        private Optional<? extends OffsetDateTime> objectUpdated = Optional.empty();
 
        private Optional<? extends RefundStatus> status = Optional.empty();
 
        private Optional<? extends Boolean> test = Optional.empty();
 
        private Optional<? extends String> transaction = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Date and time of object creation.
         */
        public Builder objectCreated(OffsetDateTime objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = Optional.ofNullable(objectCreated);
            return this;
        }

        /**
         * Date and time of object creation.
         */
        public Builder objectCreated(Optional<? extends OffsetDateTime> objectCreated) {
            Utils.checkNotNull(objectCreated, "objectCreated");
            this.objectCreated = objectCreated;
            return this;
        }

        /**
         * Unique identifier of the given object.
         */
        public Builder objectId(String objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = Optional.ofNullable(objectId);
            return this;
        }

        /**
         * Unique identifier of the given object.
         */
        public Builder objectId(Optional<? extends String> objectId) {
            Utils.checkNotNull(objectId, "objectId");
            this.objectId = objectId;
            return this;
        }

        /**
         * Username of the user who created the object.
         */
        public Builder objectOwner(String objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = Optional.ofNullable(objectOwner);
            return this;
        }

        /**
         * Username of the user who created the object.
         */
        public Builder objectOwner(Optional<? extends String> objectOwner) {
            Utils.checkNotNull(objectOwner, "objectOwner");
            this.objectOwner = objectOwner;
            return this;
        }

        /**
         * Date and time of last object update.
         */
        public Builder objectUpdated(OffsetDateTime objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = Optional.ofNullable(objectUpdated);
            return this;
        }

        /**
         * Date and time of last object update.
         */
        public Builder objectUpdated(Optional<? extends OffsetDateTime> objectUpdated) {
            Utils.checkNotNull(objectUpdated, "objectUpdated");
            this.objectUpdated = objectUpdated;
            return this;
        }

        /**
         * Indicates the status of the Refund.
         */
        public Builder status(RefundStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Indicates the status of the Refund.
         */
        public Builder status(Optional<? extends RefundStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(boolean test) {
            Utils.checkNotNull(test, "test");
            this.test = Optional.ofNullable(test);
            return this;
        }

        /**
         * Indicates whether the object has been created in test mode.
         */
        public Builder test(Optional<? extends Boolean> test) {
            Utils.checkNotNull(test, "test");
            this.test = test;
            return this;
        }

        /**
         * Object ID of the Transaction to be refunded.
         */
        public Builder transaction(String transaction) {
            Utils.checkNotNull(transaction, "transaction");
            this.transaction = Optional.ofNullable(transaction);
            return this;
        }

        /**
         * Object ID of the Transaction to be refunded.
         */
        public Builder transaction(Optional<? extends String> transaction) {
            Utils.checkNotNull(transaction, "transaction");
            this.transaction = transaction;
            return this;
        }
        
        public Refund build() {
            return new Refund(
                objectCreated,
                objectId,
                objectOwner,
                objectUpdated,
                status,
                test,
                transaction);
        }
    }
}

