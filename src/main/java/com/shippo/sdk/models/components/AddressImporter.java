/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * AddressImporter - Object that represents the address of the importer
 */

public class AddressImporter {

    /**
     * First and Last Name of the addressee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Company Name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<String> company;

    /**
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street1")
    private Optional<String> street1;

    /**
     * Second street line, 35 character limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street2")
    private Optional<String> street2;

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street3")
    private Optional<String> street3;

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_no")
    private Optional<String> streetNo;

    /**
     * Name of a city
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    /**
     * Postal code of an Address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private Optional<String> zip;

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * Indicates whether the address provided is a residential address or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_residential")
    private Optional<Boolean> isResidential;

    @JsonCreator
    public AddressImporter(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("company") Optional<String> company,
            @JsonProperty("street1") Optional<String> street1,
            @JsonProperty("street2") Optional<String> street2,
            @JsonProperty("street3") Optional<String> street3,
            @JsonProperty("street_no") Optional<String> streetNo,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("zip") Optional<String> zip,
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("phone") Optional<String> phone,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("is_residential") Optional<Boolean> isResidential) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(street3, "street3");
        Utils.checkNotNull(streetNo, "streetNo");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(isResidential, "isResidential");
        this.name = name;
        this.company = company;
        this.street1 = street1;
        this.street2 = street2;
        this.street3 = street3;
        this.streetNo = streetNo;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.phone = phone;
        this.email = email;
        this.isResidential = isResidential;
    }
    
    public AddressImporter() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * First and Last Name of the addressee
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Company Name
     */
    @JsonIgnore
    public Optional<String> company() {
        return company;
    }

    /**
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    @JsonIgnore
    public Optional<String> street1() {
        return street1;
    }

    /**
     * Second street line, 35 character limit.
     */
    @JsonIgnore
    public Optional<String> street2() {
        return street2;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    @JsonIgnore
    public Optional<String> street3() {
        return street3;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    @JsonIgnore
    public Optional<String> streetNo() {
        return streetNo;
    }

    /**
     * Name of a city
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * Postal code of an Address.
     */
    @JsonIgnore
    public Optional<String> zip() {
        return zip;
    }

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * Indicates whether the address provided is a residential address or not.
     */
    @JsonIgnore
    public Optional<Boolean> isResidential() {
        return isResidential;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * First and Last Name of the addressee
     */
    public AddressImporter withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * First and Last Name of the addressee
     */
    public AddressImporter withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Company Name
     */
    public AddressImporter withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    /**
     * Company Name
     */
    public AddressImporter withCompany(Optional<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    public AddressImporter withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = Optional.ofNullable(street1);
        return this;
    }

    /**
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    public AddressImporter withStreet1(Optional<String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public AddressImporter withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = Optional.ofNullable(street2);
        return this;
    }

    /**
     * Second street line, 35 character limit.
     */
    public AddressImporter withStreet2(Optional<String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public AddressImporter withStreet3(String street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = Optional.ofNullable(street3);
        return this;
    }

    /**
     * Third street line, 35 character limit. 
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    public AddressImporter withStreet3(Optional<String> street3) {
        Utils.checkNotNull(street3, "street3");
        this.street3 = street3;
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public AddressImporter withStreetNo(String streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = Optional.ofNullable(streetNo);
        return this;
    }

    /**
     * Street number of the addressed building. 
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    public AddressImporter withStreetNo(Optional<String> streetNo) {
        Utils.checkNotNull(streetNo, "streetNo");
        this.streetNo = streetNo;
        return this;
    }

    /**
     * Name of a city
     */
    public AddressImporter withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * Name of a city
     */
    public AddressImporter withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    public AddressImporter withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * **required for purchase for some countries**&lt;br&gt;
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
     * only accept two or three character state abbreviations.
     */
    public AddressImporter withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Postal code of an Address.
     */
    public AddressImporter withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = Optional.ofNullable(zip);
        return this;
    }

    /**
     * Postal code of an Address.
     */
    public AddressImporter withZip(Optional<String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    public AddressImporter withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * Example: `US` or `DE`. All accepted values can be found on the 
     * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
     * Sending a country is always required.
     */
    public AddressImporter withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public AddressImporter withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
     */
    public AddressImporter withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public AddressImporter withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    public AddressImporter withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Indicates whether the address provided is a residential address or not.
     */
    public AddressImporter withIsResidential(boolean isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = Optional.ofNullable(isResidential);
        return this;
    }

    /**
     * Indicates whether the address provided is a residential address or not.
     */
    public AddressImporter withIsResidential(Optional<Boolean> isResidential) {
        Utils.checkNotNull(isResidential, "isResidential");
        this.isResidential = isResidential;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddressImporter other = (AddressImporter) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.street1, other.street1) &&
            Objects.deepEquals(this.street2, other.street2) &&
            Objects.deepEquals(this.street3, other.street3) &&
            Objects.deepEquals(this.streetNo, other.streetNo) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.zip, other.zip) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.isResidential, other.isResidential);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            company,
            street1,
            street2,
            street3,
            streetNo,
            city,
            state,
            zip,
            country,
            phone,
            email,
            isResidential);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddressImporter.class,
                "name", name,
                "company", company,
                "street1", street1,
                "street2", street2,
                "street3", street3,
                "streetNo", streetNo,
                "city", city,
                "state", state,
                "zip", zip,
                "country", country,
                "phone", phone,
                "email", email,
                "isResidential", isResidential);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> company = Optional.empty();
 
        private Optional<String> street1 = Optional.empty();
 
        private Optional<String> street2 = Optional.empty();
 
        private Optional<String> street3 = Optional.empty();
 
        private Optional<String> streetNo = Optional.empty();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> state = Optional.empty();
 
        private Optional<String> zip = Optional.empty();
 
        private Optional<String> country = Optional.empty();
 
        private Optional<String> phone = Optional.empty();
 
        private Optional<String> email = Optional.empty();
 
        private Optional<Boolean> isResidential = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * First and Last Name of the addressee
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * First and Last Name of the addressee
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * Company Name
         */
        public Builder company(Optional<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
         */
        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = Optional.ofNullable(street1);
            return this;
        }

        /**
         * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
         */
        public Builder street1(Optional<String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = Optional.ofNullable(street2);
            return this;
        }

        /**
         * Second street line, 35 character limit.
         */
        public Builder street2(Optional<String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(String street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = Optional.ofNullable(street3);
            return this;
        }

        /**
         * Third street line, 35 character limit. 
         * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
         */
        public Builder street3(Optional<String> street3) {
            Utils.checkNotNull(street3, "street3");
            this.street3 = street3;
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(String streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = Optional.ofNullable(streetNo);
            return this;
        }

        /**
         * Street number of the addressed building. 
         * This field can be included in street1 for all carriers except for DHL Germany.
         */
        public Builder streetNo(Optional<String> streetNo) {
            Utils.checkNotNull(streetNo, "streetNo");
            this.streetNo = streetNo;
            return this;
        }

        /**
         * Name of a city
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * Name of a city
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * **required for purchase for some countries**&lt;br&gt;
         * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
         * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
         * only accept two or three character state abbreviations.
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * **required for purchase for some countries**&lt;br&gt;
         * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some 
         * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers 
         * only accept two or three character state abbreviations.
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Postal code of an Address.
         */
        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        /**
         * Postal code of an Address.
         */
        public Builder zip(Optional<String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        /**
         * Example: `US` or `DE`. All accepted values can be found on the 
         * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
         * Sending a country is always required.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * Example: `US` or `DE`. All accepted values can be found on the 
         * &lt;a href="http://www.iso.org/" target="blank"&gt;Official ISO Website&lt;/a&gt;.
         * Sending a country is always required.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This 
         * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.    
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * E-mail address of the contact person, RFC3696/5321-compliant.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Indicates whether the address provided is a residential address or not.
         */
        public Builder isResidential(boolean isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = Optional.ofNullable(isResidential);
            return this;
        }

        /**
         * Indicates whether the address provided is a residential address or not.
         */
        public Builder isResidential(Optional<Boolean> isResidential) {
            Utils.checkNotNull(isResidential, "isResidential");
            this.isResidential = isResidential;
            return this;
        }
        
        public AddressImporter build() {
            return new AddressImporter(
                name,
                company,
                street1,
                street2,
                street3,
                streetNo,
                city,
                state,
                zip,
                country,
                phone,
                email,
                isResidential);
        }
    }
}

