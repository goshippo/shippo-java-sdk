/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class FedExConnectExistingOwnAccountParameters {

    /**
     * First name of the account holder
     */
    @JsonProperty("first_name")
    private String firstName;

    /**
     * Last name of the account holder
     */
    @JsonProperty("last_name")
    private String lastName;

    /**
     * Phone number of the account holder
     */
    @JsonProperty("phone_number")
    private String phoneNumber;

    /**
     * Street address of the account holder
     */
    @JsonProperty("from_address_st")
    private String fromAddressSt;

    /**
     * City of the account holder
     */
    @JsonProperty("from_address_city")
    private String fromAddressCity;

    /**
     * State of the account holder
     */
    @JsonProperty("from_address_state")
    private String fromAddressState;

    /**
     * Zip code of the account holder
     */
    @JsonProperty("from_address_zip")
    private String fromAddressZip;

    /**
     * Country of the account holder
     */
    @JsonProperty("from_address_country_iso2")
    private String fromAddressCountryIso2;

    @JsonCreator
    public FedExConnectExistingOwnAccountParameters(
            @JsonProperty("first_name") String firstName,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("phone_number") String phoneNumber,
            @JsonProperty("from_address_st") String fromAddressSt,
            @JsonProperty("from_address_city") String fromAddressCity,
            @JsonProperty("from_address_state") String fromAddressState,
            @JsonProperty("from_address_zip") String fromAddressZip,
            @JsonProperty("from_address_country_iso2") String fromAddressCountryIso2) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(fromAddressSt, "fromAddressSt");
        Utils.checkNotNull(fromAddressCity, "fromAddressCity");
        Utils.checkNotNull(fromAddressState, "fromAddressState");
        Utils.checkNotNull(fromAddressZip, "fromAddressZip");
        Utils.checkNotNull(fromAddressCountryIso2, "fromAddressCountryIso2");
        this.firstName = firstName;
        this.lastName = lastName;
        this.phoneNumber = phoneNumber;
        this.fromAddressSt = fromAddressSt;
        this.fromAddressCity = fromAddressCity;
        this.fromAddressState = fromAddressState;
        this.fromAddressZip = fromAddressZip;
        this.fromAddressCountryIso2 = fromAddressCountryIso2;
    }

    /**
     * First name of the account holder
     */
    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    /**
     * Last name of the account holder
     */
    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * Phone number of the account holder
     */
    @JsonIgnore
    public String phoneNumber() {
        return phoneNumber;
    }

    /**
     * Street address of the account holder
     */
    @JsonIgnore
    public String fromAddressSt() {
        return fromAddressSt;
    }

    /**
     * City of the account holder
     */
    @JsonIgnore
    public String fromAddressCity() {
        return fromAddressCity;
    }

    /**
     * State of the account holder
     */
    @JsonIgnore
    public String fromAddressState() {
        return fromAddressState;
    }

    /**
     * Zip code of the account holder
     */
    @JsonIgnore
    public String fromAddressZip() {
        return fromAddressZip;
    }

    /**
     * Country of the account holder
     */
    @JsonIgnore
    public String fromAddressCountryIso2() {
        return fromAddressCountryIso2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * First name of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * Last name of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * Phone number of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Street address of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withFromAddressSt(String fromAddressSt) {
        Utils.checkNotNull(fromAddressSt, "fromAddressSt");
        this.fromAddressSt = fromAddressSt;
        return this;
    }

    /**
     * City of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withFromAddressCity(String fromAddressCity) {
        Utils.checkNotNull(fromAddressCity, "fromAddressCity");
        this.fromAddressCity = fromAddressCity;
        return this;
    }

    /**
     * State of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withFromAddressState(String fromAddressState) {
        Utils.checkNotNull(fromAddressState, "fromAddressState");
        this.fromAddressState = fromAddressState;
        return this;
    }

    /**
     * Zip code of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withFromAddressZip(String fromAddressZip) {
        Utils.checkNotNull(fromAddressZip, "fromAddressZip");
        this.fromAddressZip = fromAddressZip;
        return this;
    }

    /**
     * Country of the account holder
     */
    public FedExConnectExistingOwnAccountParameters withFromAddressCountryIso2(String fromAddressCountryIso2) {
        Utils.checkNotNull(fromAddressCountryIso2, "fromAddressCountryIso2");
        this.fromAddressCountryIso2 = fromAddressCountryIso2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FedExConnectExistingOwnAccountParameters other = (FedExConnectExistingOwnAccountParameters) o;
        return 
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.fromAddressSt, other.fromAddressSt) &&
            Objects.deepEquals(this.fromAddressCity, other.fromAddressCity) &&
            Objects.deepEquals(this.fromAddressState, other.fromAddressState) &&
            Objects.deepEquals(this.fromAddressZip, other.fromAddressZip) &&
            Objects.deepEquals(this.fromAddressCountryIso2, other.fromAddressCountryIso2);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            firstName,
            lastName,
            phoneNumber,
            fromAddressSt,
            fromAddressCity,
            fromAddressState,
            fromAddressZip,
            fromAddressCountryIso2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FedExConnectExistingOwnAccountParameters.class,
                "firstName", firstName,
                "lastName", lastName,
                "phoneNumber", phoneNumber,
                "fromAddressSt", fromAddressSt,
                "fromAddressCity", fromAddressCity,
                "fromAddressState", fromAddressState,
                "fromAddressZip", fromAddressZip,
                "fromAddressCountryIso2", fromAddressCountryIso2);
    }
    
    public final static class Builder {
 
        private String firstName;
 
        private String lastName;
 
        private String phoneNumber;
 
        private String fromAddressSt;
 
        private String fromAddressCity;
 
        private String fromAddressState;
 
        private String fromAddressZip;
 
        private String fromAddressCountryIso2;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * First name of the account holder
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * Last name of the account holder
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * Phone number of the account holder
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Street address of the account holder
         */
        public Builder fromAddressSt(String fromAddressSt) {
            Utils.checkNotNull(fromAddressSt, "fromAddressSt");
            this.fromAddressSt = fromAddressSt;
            return this;
        }

        /**
         * City of the account holder
         */
        public Builder fromAddressCity(String fromAddressCity) {
            Utils.checkNotNull(fromAddressCity, "fromAddressCity");
            this.fromAddressCity = fromAddressCity;
            return this;
        }

        /**
         * State of the account holder
         */
        public Builder fromAddressState(String fromAddressState) {
            Utils.checkNotNull(fromAddressState, "fromAddressState");
            this.fromAddressState = fromAddressState;
            return this;
        }

        /**
         * Zip code of the account holder
         */
        public Builder fromAddressZip(String fromAddressZip) {
            Utils.checkNotNull(fromAddressZip, "fromAddressZip");
            this.fromAddressZip = fromAddressZip;
            return this;
        }

        /**
         * Country of the account holder
         */
        public Builder fromAddressCountryIso2(String fromAddressCountryIso2) {
            Utils.checkNotNull(fromAddressCountryIso2, "fromAddressCountryIso2");
            this.fromAddressCountryIso2 = fromAddressCountryIso2;
            return this;
        }
        
        public FedExConnectExistingOwnAccountParameters build() {
            return new FedExConnectExistingOwnAccountParameters(
                firstName,
                lastName,
                phoneNumber,
                fromAddressSt,
                fromAddressCity,
                fromAddressState,
                fromAddressZip,
                fromAddressCountryIso2);
        }
    }
}

