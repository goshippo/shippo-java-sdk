/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * CustomsExporterIdentification - Additional exporter identification that may be required to ship in certain countries
 */

public class CustomsExporterIdentification {

    /**
     * Economic Operators' Registration and Identification (EORI) number. Must start with a 2 character 
     * country code followed by a 6-17 character alphanumeric identifier (e.g. PL1234567890ABCDE).
     * &lt;a href="https://ec.europa.eu/taxation_customs/business/customs-procedures/general-overview/economic-operators-registration-identification-number-eori_en"&gt;More information on EORI.&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eori_number")
    private Optional<String> eoriNumber;

    /**
     * Tax identification that may be required to ship in certain countries. Typically used to assess duties on 
     * goods that are crossing a border.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    private Optional<? extends CustomsTaxIdentification> taxId;

    @JsonCreator
    public CustomsExporterIdentification(
            @JsonProperty("eori_number") Optional<String> eoriNumber,
            @JsonProperty("tax_id") Optional<? extends CustomsTaxIdentification> taxId) {
        Utils.checkNotNull(eoriNumber, "eoriNumber");
        Utils.checkNotNull(taxId, "taxId");
        this.eoriNumber = eoriNumber;
        this.taxId = taxId;
    }
    
    public CustomsExporterIdentification() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Economic Operators' Registration and Identification (EORI) number. Must start with a 2 character 
     * country code followed by a 6-17 character alphanumeric identifier (e.g. PL1234567890ABCDE).
     * &lt;a href="https://ec.europa.eu/taxation_customs/business/customs-procedures/general-overview/economic-operators-registration-identification-number-eori_en"&gt;More information on EORI.&lt;/a&gt;
     */
    @JsonIgnore
    public Optional<String> eoriNumber() {
        return eoriNumber;
    }

    /**
     * Tax identification that may be required to ship in certain countries. Typically used to assess duties on 
     * goods that are crossing a border.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CustomsTaxIdentification> taxId() {
        return (Optional<CustomsTaxIdentification>) taxId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Economic Operators' Registration and Identification (EORI) number. Must start with a 2 character 
     * country code followed by a 6-17 character alphanumeric identifier (e.g. PL1234567890ABCDE).
     * &lt;a href="https://ec.europa.eu/taxation_customs/business/customs-procedures/general-overview/economic-operators-registration-identification-number-eori_en"&gt;More information on EORI.&lt;/a&gt;
     */
    public CustomsExporterIdentification withEoriNumber(String eoriNumber) {
        Utils.checkNotNull(eoriNumber, "eoriNumber");
        this.eoriNumber = Optional.ofNullable(eoriNumber);
        return this;
    }

    /**
     * Economic Operators' Registration and Identification (EORI) number. Must start with a 2 character 
     * country code followed by a 6-17 character alphanumeric identifier (e.g. PL1234567890ABCDE).
     * &lt;a href="https://ec.europa.eu/taxation_customs/business/customs-procedures/general-overview/economic-operators-registration-identification-number-eori_en"&gt;More information on EORI.&lt;/a&gt;
     */
    public CustomsExporterIdentification withEoriNumber(Optional<String> eoriNumber) {
        Utils.checkNotNull(eoriNumber, "eoriNumber");
        this.eoriNumber = eoriNumber;
        return this;
    }

    /**
     * Tax identification that may be required to ship in certain countries. Typically used to assess duties on 
     * goods that are crossing a border.
     */
    public CustomsExporterIdentification withTaxId(CustomsTaxIdentification taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = Optional.ofNullable(taxId);
        return this;
    }

    /**
     * Tax identification that may be required to ship in certain countries. Typically used to assess duties on 
     * goods that are crossing a border.
     */
    public CustomsExporterIdentification withTaxId(Optional<? extends CustomsTaxIdentification> taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = taxId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomsExporterIdentification other = (CustomsExporterIdentification) o;
        return 
            Objects.deepEquals(this.eoriNumber, other.eoriNumber) &&
            Objects.deepEquals(this.taxId, other.taxId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            eoriNumber,
            taxId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomsExporterIdentification.class,
                "eoriNumber", eoriNumber,
                "taxId", taxId);
    }
    
    public final static class Builder {
 
        private Optional<String> eoriNumber = Optional.empty();
 
        private Optional<? extends CustomsTaxIdentification> taxId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Economic Operators' Registration and Identification (EORI) number. Must start with a 2 character 
         * country code followed by a 6-17 character alphanumeric identifier (e.g. PL1234567890ABCDE).
         * &lt;a href="https://ec.europa.eu/taxation_customs/business/customs-procedures/general-overview/economic-operators-registration-identification-number-eori_en"&gt;More information on EORI.&lt;/a&gt;
         */
        public Builder eoriNumber(String eoriNumber) {
            Utils.checkNotNull(eoriNumber, "eoriNumber");
            this.eoriNumber = Optional.ofNullable(eoriNumber);
            return this;
        }

        /**
         * Economic Operators' Registration and Identification (EORI) number. Must start with a 2 character 
         * country code followed by a 6-17 character alphanumeric identifier (e.g. PL1234567890ABCDE).
         * &lt;a href="https://ec.europa.eu/taxation_customs/business/customs-procedures/general-overview/economic-operators-registration-identification-number-eori_en"&gt;More information on EORI.&lt;/a&gt;
         */
        public Builder eoriNumber(Optional<String> eoriNumber) {
            Utils.checkNotNull(eoriNumber, "eoriNumber");
            this.eoriNumber = eoriNumber;
            return this;
        }

        /**
         * Tax identification that may be required to ship in certain countries. Typically used to assess duties on 
         * goods that are crossing a border.
         */
        public Builder taxId(CustomsTaxIdentification taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = Optional.ofNullable(taxId);
            return this;
        }

        /**
         * Tax identification that may be required to ship in certain countries. Typically used to assess duties on 
         * goods that are crossing a border.
         */
        public Builder taxId(Optional<? extends CustomsTaxIdentification> taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = taxId;
            return this;
        }
        
        public CustomsExporterIdentification build() {
            return new CustomsExporterIdentification(
                eoriNumber,
                taxId);
        }
    }
}

