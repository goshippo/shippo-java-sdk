/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.shippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class Authentication {

    /**
     * Authentication method used by this account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends CarrierAccountWithExtraInfoType> type;

    /**
     * Current authentication status. Possible values: 'disconnected' (authorization lost, reconnect needed), 'connected' (authorized and active), 'authorization_pending' (awaiting initial authorization flow).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CarrierAccountWithExtraInfoStatus> status;

    @JsonCreator
    public Authentication(
            @JsonProperty("type") Optional<? extends CarrierAccountWithExtraInfoType> type,
            @JsonProperty("status") Optional<? extends CarrierAccountWithExtraInfoStatus> status) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(status, "status");
        this.type = type;
        this.status = status;
    }
    
    public Authentication() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Authentication method used by this account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CarrierAccountWithExtraInfoType> type() {
        return (Optional<CarrierAccountWithExtraInfoType>) type;
    }

    /**
     * Current authentication status. Possible values: 'disconnected' (authorization lost, reconnect needed), 'connected' (authorized and active), 'authorization_pending' (awaiting initial authorization flow).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CarrierAccountWithExtraInfoStatus> status() {
        return (Optional<CarrierAccountWithExtraInfoStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Authentication method used by this account.
     */
    public Authentication withType(CarrierAccountWithExtraInfoType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Authentication method used by this account.
     */
    public Authentication withType(Optional<? extends CarrierAccountWithExtraInfoType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Current authentication status. Possible values: 'disconnected' (authorization lost, reconnect needed), 'connected' (authorized and active), 'authorization_pending' (awaiting initial authorization flow).
     */
    public Authentication withStatus(CarrierAccountWithExtraInfoStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Current authentication status. Possible values: 'disconnected' (authorization lost, reconnect needed), 'connected' (authorized and active), 'authorization_pending' (awaiting initial authorization flow).
     */
    public Authentication withStatus(Optional<? extends CarrierAccountWithExtraInfoStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Authentication other = (Authentication) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Authentication.class,
                "type", type,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends CarrierAccountWithExtraInfoType> type = Optional.empty();
 
        private Optional<? extends CarrierAccountWithExtraInfoStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Authentication method used by this account.
         */
        public Builder type(CarrierAccountWithExtraInfoType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Authentication method used by this account.
         */
        public Builder type(Optional<? extends CarrierAccountWithExtraInfoType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Current authentication status. Possible values: 'disconnected' (authorization lost, reconnect needed), 'connected' (authorized and active), 'authorization_pending' (awaiting initial authorization flow).
         */
        public Builder status(CarrierAccountWithExtraInfoStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Current authentication status. Possible values: 'disconnected' (authorization lost, reconnect needed), 'connected' (authorized and active), 'authorization_pending' (awaiting initial authorization flow).
         */
        public Builder status(Optional<? extends CarrierAccountWithExtraInfoStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public Authentication build() {
            return new Authentication(
                type,
                status);
        }
    }
}

