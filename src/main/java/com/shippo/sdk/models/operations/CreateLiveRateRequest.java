/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.shippo.sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.shippo.sdk.models.components.LiveRateCreateRequest;
import com.shippo.sdk.utils.SpeakeasyMetadata;
import com.shippo.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CreateLiveRateRequest {

    /**
     * String used to pick a non-default API version to use
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=SHIPPO-API-VERSION")
    private Optional<String> shippoApiVersion;

    /**
     * Generate rates at checkout
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private LiveRateCreateRequest liveRateCreateRequest;

    @JsonCreator
    public CreateLiveRateRequest(
            Optional<String> shippoApiVersion,
            LiveRateCreateRequest liveRateCreateRequest) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        Utils.checkNotNull(liveRateCreateRequest, "liveRateCreateRequest");
        this.shippoApiVersion = shippoApiVersion;
        this.liveRateCreateRequest = liveRateCreateRequest;
    }
    
    public CreateLiveRateRequest(
            LiveRateCreateRequest liveRateCreateRequest) {
        this(Optional.empty(), liveRateCreateRequest);
    }

    /**
     * String used to pick a non-default API version to use
     */
    @JsonIgnore
    public Optional<String> shippoApiVersion() {
        return shippoApiVersion;
    }

    /**
     * Generate rates at checkout
     */
    @JsonIgnore
    public LiveRateCreateRequest liveRateCreateRequest() {
        return liveRateCreateRequest;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * String used to pick a non-default API version to use
     */
    public CreateLiveRateRequest withShippoApiVersion(String shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
        return this;
    }

    /**
     * String used to pick a non-default API version to use
     */
    public CreateLiveRateRequest withShippoApiVersion(Optional<String> shippoApiVersion) {
        Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
        this.shippoApiVersion = shippoApiVersion;
        return this;
    }

    /**
     * Generate rates at checkout
     */
    public CreateLiveRateRequest withLiveRateCreateRequest(LiveRateCreateRequest liveRateCreateRequest) {
        Utils.checkNotNull(liveRateCreateRequest, "liveRateCreateRequest");
        this.liveRateCreateRequest = liveRateCreateRequest;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateLiveRateRequest other = (CreateLiveRateRequest) o;
        return 
            Objects.deepEquals(this.shippoApiVersion, other.shippoApiVersion) &&
            Objects.deepEquals(this.liveRateCreateRequest, other.liveRateCreateRequest);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            shippoApiVersion,
            liveRateCreateRequest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateLiveRateRequest.class,
                "shippoApiVersion", shippoApiVersion,
                "liveRateCreateRequest", liveRateCreateRequest);
    }
    
    public final static class Builder {
 
        private Optional<String> shippoApiVersion = Optional.empty();
 
        private LiveRateCreateRequest liveRateCreateRequest;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * String used to pick a non-default API version to use
         */
        public Builder shippoApiVersion(String shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = Optional.ofNullable(shippoApiVersion);
            return this;
        }

        /**
         * String used to pick a non-default API version to use
         */
        public Builder shippoApiVersion(Optional<String> shippoApiVersion) {
            Utils.checkNotNull(shippoApiVersion, "shippoApiVersion");
            this.shippoApiVersion = shippoApiVersion;
            return this;
        }

        /**
         * Generate rates at checkout
         */
        public Builder liveRateCreateRequest(LiveRateCreateRequest liveRateCreateRequest) {
            Utils.checkNotNull(liveRateCreateRequest, "liveRateCreateRequest");
            this.liveRateCreateRequest = liveRateCreateRequest;
            return this;
        }
        
        public CreateLiveRateRequest build() {
            return new CreateLiveRateRequest(
                shippoApiVersion,
                liveRateCreateRequest);
        }
    }
}

